
UART_CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  080076d8  080076d8  000176d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dc8  08007dc8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007dc8  08007dc8  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dc8  08007dc8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dcc  08007dcc  00017dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001d4  08007fa4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08007fa4  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008e9d  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000221c  00000000  00000000  000290dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  0002b300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000673  00000000  00000000  0002bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001951e  00000000  00000000  0002c24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f443  00000000  00000000  00045769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084264  00000000  00000000  00054bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000349c  00000000  00000000  000d8e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000dc2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080076bc 	.word	0x080076bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080076bc 	.word	0x080076bc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2lz>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4605      	mov	r5, r0
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f7ff ff71 	bl	80009d0 <__aeabi_dcmplt>
 8000aee:	b928      	cbnz	r0, 8000afc <__aeabi_d2lz+0x20>
 8000af0:	4628      	mov	r0, r5
 8000af2:	4621      	mov	r1, r4
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000af8:	f000 b80a 	b.w	8000b10 <__aeabi_d2ulz>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b02:	f000 f805 	bl	8000b10 <__aeabi_d2ulz>
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	bd38      	pop	{r3, r4, r5, pc}
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2ulz>:
 8000b10:	b5d0      	push	{r4, r6, r7, lr}
 8000b12:	2200      	movs	r2, #0
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <__aeabi_d2ulz+0x34>)
 8000b16:	4606      	mov	r6, r0
 8000b18:	460f      	mov	r7, r1
 8000b1a:	f7ff fce7 	bl	80004ec <__aeabi_dmul>
 8000b1e:	f7ff ffbd 	bl	8000a9c <__aeabi_d2uiz>
 8000b22:	4604      	mov	r4, r0
 8000b24:	f7ff fc68 	bl	80003f8 <__aeabi_ui2d>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <__aeabi_d2ulz+0x38>)
 8000b2c:	f7ff fcde 	bl	80004ec <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4630      	mov	r0, r6
 8000b36:	4639      	mov	r1, r7
 8000b38:	f7ff fb20 	bl	800017c <__aeabi_dsub>
 8000b3c:	f7ff ffae 	bl	8000a9c <__aeabi_d2uiz>
 8000b40:	4621      	mov	r1, r4
 8000b42:	bdd0      	pop	{r4, r6, r7, pc}
 8000b44:	3df00000 	.word	0x3df00000
 8000b48:	41f00000 	.word	0x41f00000

08000b4c <led_driver_set_led>:

#include "led_driver.h"

//Tắt bật led
void led_driver_set_led(uint8_t index, uint8_t state)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	460a      	mov	r2, r1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 << index, (GPIO_PinState)state);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	79ba      	ldrb	r2, [r7, #6]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4803      	ldr	r0, [pc, #12]	; (8000b78 <led_driver_set_led+0x2c>)
 8000b6c:	f001 f8f4 	bl	8001d58 <HAL_GPIO_WritePin>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40010800 	.word	0x40010800

08000b7c <led_driver_set_all_led>:
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0 << index);
}

//Tắt bật tất cả led
void led_driver_set_all_led(uint8_t state)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i<8 ;i++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	e009      	b.n	8000ba0 <led_driver_set_all_led+0x24>
	{
		led_driver_set_led(i, state);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	79fa      	ldrb	r2, [r7, #7]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ffd9 	bl	8000b4c <led_driver_set_led>
	for(int i = 0; i<8 ;i++)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b07      	cmp	r3, #7
 8000ba4:	ddf2      	ble.n	8000b8c <led_driver_set_all_led+0x10>
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <led_driver_init>:

void led_driver_init()
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <led_effect_execute>:

static LedEffectState led_effect_state;

//thực hiện các trạng thái hiệu ứng led
void led_effect_execute()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	switch(led_effect_state.led_effect_name)
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <led_effect_execute+0xc8>)
 8000bc2:	799b      	ldrb	r3, [r3, #6]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d002      	beq.n	8000bce <led_effect_execute+0x12>
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d010      	beq.n	8000bee <led_effect_execute+0x32>
				led_effect_state.Effect.lightup_1by1.state = 1;
				led_effect_state.Effect.lightup_1by1.idx += led_effect_state.Effect.lightup_1by1.direction;
			}

			break;
		default: break;
 8000bcc:	e058      	b.n	8000c80 <led_effect_execute+0xc4>
			led_effect_state.Effect.blink.state = !led_effect_state.Effect.blink.state;
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <led_effect_execute+0xc8>)
 8000bd0:	79db      	ldrb	r3, [r3, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	bf0c      	ite	eq
 8000bd6:	2301      	moveq	r3, #1
 8000bd8:	2300      	movne	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <led_effect_execute+0xc8>)
 8000be0:	71da      	strb	r2, [r3, #7]
			led_driver_set_all_led(led_effect_state.Effect.blink.state);
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <led_effect_execute+0xc8>)
 8000be4:	79db      	ldrb	r3, [r3, #7]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ffc8 	bl	8000b7c <led_driver_set_all_led>
			break;
 8000bec:	e048      	b.n	8000c80 <led_effect_execute+0xc4>
			led_driver_set_led(led_effect_state.Effect.lightup_1by1.idx,led_effect_state.Effect.lightup_1by1.state);
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <led_effect_execute+0xc8>)
 8000bf0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <led_effect_execute+0xc8>)
 8000bf8:	79d2      	ldrb	r2, [r2, #7]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ffa5 	bl	8000b4c <led_driver_set_led>
			led_effect_state.Effect.lightup_1by1.idx += led_effect_state.Effect.lightup_1by1.direction;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <led_effect_execute+0xc8>)
 8000c04:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <led_effect_execute+0xc8>)
 8000c0c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4413      	add	r3, r2
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	b25a      	sxtb	r2, r3
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <led_effect_execute+0xc8>)
 8000c1a:	725a      	strb	r2, [r3, #9]
			if(led_effect_state.Effect.lightup_1by1.idx > 7)
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <led_effect_execute+0xc8>)
 8000c1e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c22:	2b07      	cmp	r3, #7
 8000c24:	dd13      	ble.n	8000c4e <led_effect_execute+0x92>
				led_effect_state.Effect.lightup_1by1.direction = -1;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <led_effect_execute+0xc8>)
 8000c28:	22ff      	movs	r2, #255	; 0xff
 8000c2a:	721a      	strb	r2, [r3, #8]
				led_effect_state.Effect.lightup_1by1.state =0;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <led_effect_execute+0xc8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	71da      	strb	r2, [r3, #7]
				led_effect_state.Effect.lightup_1by1.idx += led_effect_state.Effect.lightup_1by1.direction;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <led_effect_execute+0xc8>)
 8000c34:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <led_effect_execute+0xc8>)
 8000c3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4413      	add	r3, r2
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	b25a      	sxtb	r2, r3
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <led_effect_execute+0xc8>)
 8000c4a:	725a      	strb	r2, [r3, #9]
			break;
 8000c4c:	e017      	b.n	8000c7e <led_effect_execute+0xc2>
			else if(led_effect_state.Effect.lightup_1by1.idx < 0)
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <led_effect_execute+0xc8>)
 8000c50:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da12      	bge.n	8000c7e <led_effect_execute+0xc2>
				led_effect_state.Effect.lightup_1by1.direction = 1;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <led_effect_execute+0xc8>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	721a      	strb	r2, [r3, #8]
				led_effect_state.Effect.lightup_1by1.state = 1;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <led_effect_execute+0xc8>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	71da      	strb	r2, [r3, #7]
				led_effect_state.Effect.lightup_1by1.idx += led_effect_state.Effect.lightup_1by1.direction;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <led_effect_execute+0xc8>)
 8000c66:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <led_effect_execute+0xc8>)
 8000c6e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4413      	add	r3, r2
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <led_effect_execute+0xc8>)
 8000c7c:	725a      	strb	r2, [r3, #9]
			break;
 8000c7e:	bf00      	nop
	}
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200001f0 	.word	0x200001f0

08000c88 <led_effect_handle>:

//cách thời gian gọi hàm execute
void led_effect_handle()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
//Check for effect name
	if(led_effect_state.led_effect_name != LED_EFFECT_IDLE)
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <led_effect_handle+0x34>)
 8000c8e:	799b      	ldrb	r3, [r3, #6]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d010      	beq.n	8000cb6 <led_effect_handle+0x2e>
	{
		//nếu != idle thì cứ cách tgian = frequency thì gọi hàm execute để sáng/tắt led
		if(HAL_GetTick() - led_effect_state.time_start >= led_effect_state.frequency)
 8000c94:	f000 fd12 	bl	80016bc <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <led_effect_handle+0x34>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <led_effect_handle+0x34>)
 8000ca2:	8892      	ldrh	r2, [r2, #4]
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d306      	bcc.n	8000cb6 <led_effect_handle+0x2e>
		{
			led_effect_execute();
 8000ca8:	f7ff ff88 	bl	8000bbc <led_effect_execute>
			led_effect_state.time_start = HAL_GetTick();
 8000cac:	f000 fd06 	bl	80016bc <HAL_GetTick>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a02      	ldr	r2, [pc, #8]	; (8000cbc <led_effect_handle+0x34>)
 8000cb4:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001f0 	.word	0x200001f0

08000cc0 <led_effect_blink>:

//set các thông số cho trạng thái blink
void led_effect_blink(uint16_t freq)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
	led_effect_state.led_effect_name = LED_EFFECT_BLINK;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <led_effect_blink+0x28>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	719a      	strb	r2, [r3, #6]
	led_effect_state.frequency = freq;
 8000cd0:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <led_effect_blink+0x28>)
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	8093      	strh	r3, [r2, #4]
	led_effect_state.Effect.blink.state = 0;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <led_effect_blink+0x28>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	71da      	strb	r2, [r3, #7]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	200001f0 	.word	0x200001f0

08000cec <led_effect_lightup_1by1>:

//set các thông số cho trạng thái sáng dần
void led_effect_lightup_1by1(uint16_t freq)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
	led_effect_state.led_effect_name = LED_EFECT_LIGHTUP_1BY1;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <led_effect_lightup_1by1+0x34>)
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	719a      	strb	r2, [r3, #6]
	led_effect_state.frequency = freq;
 8000cfc:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <led_effect_lightup_1by1+0x34>)
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	8093      	strh	r3, [r2, #4]
	led_effect_state.Effect.lightup_1by1.idx = 0;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <led_effect_lightup_1by1+0x34>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	725a      	strb	r2, [r3, #9]
//bật theo chiều 0->7 thì direction = 1; tắt từ 7-> 0 thì direction = -1
	led_effect_state.Effect.lightup_1by1.direction = 1;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <led_effect_lightup_1by1+0x34>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	721a      	strb	r2, [r3, #8]
	led_effect_state.Effect.lightup_1by1.state = 1;
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <led_effect_lightup_1by1+0x34>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	71da      	strb	r2, [r3, #7]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200001f0 	.word	0x200001f0

08000d24 <led_effect_init>:

void led_effect_init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	led_driver_init();
 8000d28:	f7ff ff42 	bl	8000bb0 <led_driver_init>
	led_effect_state.led_effect_name = LED_EFFECT_IDLE;
 8000d2c:	4b02      	ldr	r3, [pc, #8]	; (8000d38 <led_effect_init+0x14>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	719a      	strb	r2, [r3, #6]
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001f0 	.word	0x200001f0

08000d3c <LM35_Gettemp>:
 *      Author: phamh
 */

#include "lm35.h"
float LM35_Gettemp(uint8_t channel)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]

//fake dữ liệu
	float temp =10;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <LM35_Gettemp+0x30>)
 8000d48:	60fb      	str	r3, [r7, #12]
	if(channel ==0) temp =20.5;
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <LM35_Gettemp+0x18>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <LM35_Gettemp+0x34>)
 8000d52:	60fb      	str	r3, [r7, #12]
	if(channel ==1) temp =50.7;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d101      	bne.n	8000d5e <LM35_Gettemp+0x22>
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <LM35_Gettemp+0x38>)
 8000d5c:	60fb      	str	r3, [r7, #12]
	return temp;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	41200000 	.word	0x41200000
 8000d70:	41a40000 	.word	0x41a40000
 8000d74:	424acccd 	.word	0x424acccd

08000d78 <find_command_info>:

static uint8_t help_flag = 0;

//hàm tìm lệnh truyền vào
const cli_command_info_t *find_command_info(char *cmd)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
//con trỏ trỏ đến mảng các struct command_entry_table
	const cli_command_entry_t *command_entry_p = command_entry_table;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <find_command_info+0x74>)
 8000d82:	60fb      	str	r3, [r7, #12]
//nếu lệnh truyền vào ko phải lệnh help
	if(strcmp(cmd,"help") != 0)
 8000d84:	491a      	ldr	r1, [pc, #104]	; (8000df0 <find_command_info+0x78>)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff f9e2 	bl	8000150 <strcmp>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d014      	beq.n	8000dbc <find_command_info+0x44>
	{
		//nếu tìm được tên lệnh trùng với lệnh nhập vào thì trả về con trỏ trỏ tới command_info của lệnh đó
		while(command_entry_p->command_info != NULL)
 8000d92:	e00e      	b.n	8000db2 <find_command_info+0x3a>
		{
			if(strcmp(cmd, command_entry_p->name)==0)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff f9d8 	bl	8000150 <strcmp>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <find_command_info+0x34>
				return command_entry_p->command_info;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	e01a      	b.n	8000de2 <find_command_info+0x6a>
			else
				command_entry_p++;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3308      	adds	r3, #8
 8000db0:	60fb      	str	r3, [r7, #12]
		while(command_entry_p->command_info != NULL)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1ec      	bne.n	8000d94 <find_command_info+0x1c>
 8000dba:	e011      	b.n	8000de0 <find_command_info+0x68>
		}
	}
//xử lí lệnh help
	else
	{
		help_flag = 1;
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <find_command_info+0x7c>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
		//duyệt command_entry->command_info để in ra help (cú pháp + chức năng các hàm)
		while(command_entry_p->command_info != NULL)
 8000dc2:	e009      	b.n	8000dd8 <find_command_info+0x60>
		{

			response_print("%s \n",command_entry_p->command_info->help);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <find_command_info+0x80>)
 8000dce:	f000 f88f 	bl	8000ef0 <response_print>
			command_entry_p++;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3308      	adds	r3, #8
 8000dd6:	60fb      	str	r3, [r7, #12]
		while(command_entry_p->command_info != NULL)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f1      	bne.n	8000dc4 <find_command_info+0x4c>
		}
	}
	//nếu không tìm được lệnh hoặc gọi hàm help thì trả về NULL
	return NULL;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	080078f0 	.word	0x080078f0
 8000df0:	080076d8 	.word	0x080076d8
 8000df4:	200001fc 	.word	0x200001fc
 8000df8:	080076e0 	.word	0x080076e0

08000dfc <cli_command_execute>:



//xử lí lệnh cli
void cli_command_execute(char *uartBuff, uint8_t uart_len)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b090      	sub	sp, #64	; 0x40
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
//tạo mảng con trỏ để tách & lưu riêng các thành phần của lệnh theo dấu cách
	char *argv[10];
	uint8_t argv_idx = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

//dùng strtok để tách chuỗi theo dấu cách, gán với con mảng con trỏ đã tạo
//-> argv[0] sẽ là con trỏ trỏ tới tên lệnh
	char *pch = strtok(uartBuff," ");
 8000e0e:	491c      	ldr	r1, [pc, #112]	; (8000e80 <cli_command_execute+0x84>)
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f003 fe8f 	bl	8004b34 <strtok>
 8000e16:	63b8      	str	r0, [r7, #56]	; 0x38
	while(pch != NULL)
 8000e18:	e00f      	b.n	8000e3a <cli_command_execute+0x3e>
	{
		argv[argv_idx++] = pch;
 8000e1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	3340      	adds	r3, #64	; 0x40
 8000e28:	443b      	add	r3, r7
 8000e2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e2c:	f843 2c34 	str.w	r2, [r3, #-52]
		pch = strtok(NULL," ");
 8000e30:	4913      	ldr	r1, [pc, #76]	; (8000e80 <cli_command_execute+0x84>)
 8000e32:	2000      	movs	r0, #0
 8000e34:	f003 fe7e 	bl	8004b34 <strtok>
 8000e38:	63b8      	str	r0, [r7, #56]	; 0x38
	while(pch != NULL)
 8000e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1ec      	bne.n	8000e1a <cli_command_execute+0x1e>
//		response_print("%s \n",argv[i]);
//	}

//tạo con trỏ, gán với hàm tìm lệnh -> nếu tìm đc con trỏ trả vè trỏ tới command_info của lệnh đó
//									-> nếu không tìm được hoặc gọi lệnh help thì con trỏ trả về = NULL
	const cli_command_info_t *command_info = find_command_info(argv[0]);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff98 	bl	8000d78 <find_command_info>
 8000e48:	6378      	str	r0, [r7, #52]	; 0x34
	//nếu tìm được lệnh
	if(command_info != NULL)
 8000e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d008      	beq.n	8000e62 <cli_command_execute+0x66>
	{
		//gọi hàm thực hiện lệnh thông qua con trỏ hàm trong command_info
		command_info->function(argv,argv_idx);
 8000e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8000e58:	f107 020c 	add.w	r2, r7, #12
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	4798      	blx	r3
		else
			help_flag = 0;


	}
}
 8000e60:	e00a      	b.n	8000e78 <cli_command_execute+0x7c>
		if(help_flag == 0)
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <cli_command_execute+0x88>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d103      	bne.n	8000e72 <cli_command_execute+0x76>
			response_print("command not found");
 8000e6a:	4807      	ldr	r0, [pc, #28]	; (8000e88 <cli_command_execute+0x8c>)
 8000e6c:	f000 f840 	bl	8000ef0 <response_print>
}
 8000e70:	e002      	b.n	8000e78 <cli_command_execute+0x7c>
			help_flag = 0;
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <cli_command_execute+0x88>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	3740      	adds	r7, #64	; 0x40
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	080076e8 	.word	0x080076e8
 8000e84:	200001fc 	.word	0x200001fc
 8000e88:	080076ec 	.word	0x080076ec

08000e8c <get_temp>:
 */

#include "get_temp_ci.h"

void get_temp(char **argv, uint8_t argv_idx)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
	//nếu có ít hơn 2 thành phần trong lệnh nhập vào
	if(argv_idx < 2)
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d803      	bhi.n	8000ea6 <get_temp+0x1a>
	{
		response_print("not enough arguments");
 8000e9e:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <get_temp+0x58>)
 8000ea0:	f000 f826 	bl	8000ef0 <response_print>
		return;
 8000ea4:	e01b      	b.n	8000ede <get_temp+0x52>
	}
	//nếu có nhiều hơn 2 thành phần trong lệnh nhập vào
	else if (argv_idx > 2)
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d903      	bls.n	8000eb4 <get_temp+0x28>
	{
		response_print("too many arguments");
 8000eac:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <get_temp+0x5c>)
 8000eae:	f000 f81f 	bl	8000ef0 <response_print>
		return;
 8000eb2:	e014      	b.n	8000ede <get_temp+0x52>
	}
	//đủ 2 thành phần
	else
	{
		//đổi chuỗi argv[1] (số kênh) thành int để lấy nhiệt độ
		uint8_t channel = atoi(argv[1]);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 f9ef 	bl	800329e <atoi>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73fb      	strb	r3, [r7, #15]
		response_print("temperature = %f", LM35_Gettemp(channel));
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff38 	bl	8000d3c <LM35_Gettemp>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fab4 	bl	800043c <__aeabi_f2d>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <get_temp+0x60>)
 8000eda:	f000 f809 	bl	8000ef0 <response_print>
	}
}
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	080077f4 	.word	0x080077f4
 8000ee8:	0800780c 	.word	0x0800780c
 8000eec:	08007820 	.word	0x08007820

08000ef0 <response_print>:

static UART_HandleTypeDef *huart_print;

//hàm printf - truyền dữ liệu qua uart lên terminal
void response_print(const char *str,...)
{
 8000ef0:	b40f      	push	{r0, r1, r2, r3}
 8000ef2:	b590      	push	{r4, r7, lr}
 8000ef4:	b09b      	sub	sp, #108	; 0x6c
 8000ef6:	af00      	add	r7, sp, #0
//tạo mảng để lưu dữ liệu và chèn biến
	char stringArray[100];
//tạo đối tượng va_list
	va_list args;
//va_start với đối tg va_list và đối tượng truyền xác định cuối cùng
	va_start(args,str);
 8000ef8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000efc:	603b      	str	r3, [r7, #0]
	vsprintf(stringArray,str,args);
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fdf1 	bl	8004aec <vsiprintf>
//va_end với đối tượng va_list, nếu ko thì kết quả sẽ ko đc định nghĩa
	va_end(args);

//HAL_transmit để in lên terminal
	HAL_UART_Transmit(huart_print, (uint8_t *)stringArray, strlen(stringArray), 100);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <response_print+0x44>)
 8000f0c:	681c      	ldr	r4, [r3, #0]
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff f927 	bl	8000164 <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	1d39      	adds	r1, r7, #4
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f001 fb92 	bl	8002648 <HAL_UART_Transmit>
}
 8000f24:	bf00      	nop
 8000f26:	376c      	adds	r7, #108	; 0x6c
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f2e:	b004      	add	sp, #16
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000200 	.word	0x20000200

08000f38 <response_uart_init>:

//hàm init để chọn uart
void response_uart_init(UART_HandleTypeDef *_huart_print)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	huart_print = _huart_print;
 8000f40:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <response_uart_init+0x18>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	20000200 	.word	0x20000200

08000f54 <set_led_effect>:


#include "set_led_effect_ci.h"

void set_led_effect(char **argv, uint8_t argv_idx)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
	//nếu có ít hơn 3 thành phần trong lệnh nhập vào
	if(argv_idx < 3)
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d803      	bhi.n	8000f6e <set_led_effect+0x1a>
	{
		response_print("not enough arguments");
 8000f66:	4819      	ldr	r0, [pc, #100]	; (8000fcc <set_led_effect+0x78>)
 8000f68:	f7ff ffc2 	bl	8000ef0 <response_print>
		return;
 8000f6c:	e02a      	b.n	8000fc4 <set_led_effect+0x70>
	}
	//nếu có nhiều hơn 2 thành phần trong lệnh nhập vào
	else if (argv_idx > 3)
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d903      	bls.n	8000f7c <set_led_effect+0x28>
	{
		response_print("too many arguments");
 8000f74:	4816      	ldr	r0, [pc, #88]	; (8000fd0 <set_led_effect+0x7c>)
 8000f76:	f7ff ffbb 	bl	8000ef0 <response_print>
		return;
 8000f7a:	e023      	b.n	8000fc4 <set_led_effect+0x70>
	}
	//đủ 2 thành phần
	else
	{
		//đổi chuỗi argv[1] (số chỉ hiệu ứng led) thành int để set led effect
		uint8_t led_effect_code = atoi(argv[1]);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3304      	adds	r3, #4
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 f98b 	bl	800329e <atoi>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
		uint16_t freq = atoi(argv[2]);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3308      	adds	r3, #8
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 f983 	bl	800329e <atoi>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	81bb      	strh	r3, [r7, #12]
		switch(led_effect_code)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d002      	beq.n	8000fa8 <set_led_effect+0x54>
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d005      	beq.n	8000fb2 <set_led_effect+0x5e>
 8000fa6:	e009      	b.n	8000fbc <set_led_effect+0x68>
		{
			case 1: // blink
				led_effect_blink(freq);
 8000fa8:	89bb      	ldrh	r3, [r7, #12]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fe88 	bl	8000cc0 <led_effect_blink>
				break;
 8000fb0:	e008      	b.n	8000fc4 <set_led_effect+0x70>
			case 2: //light up
				led_effect_lightup_1by1(freq);
 8000fb2:	89bb      	ldrh	r3, [r7, #12]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe99 	bl	8000cec <led_effect_lightup_1by1>
				break;
 8000fba:	e003      	b.n	8000fc4 <set_led_effect+0x70>
			default:
				response_print("LED code not defined yet");
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <set_led_effect+0x80>)
 8000fbe:	f7ff ff97 	bl	8000ef0 <response_print>
				break;
 8000fc2:	bf00      	nop

		}
	}

}
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	08007834 	.word	0x08007834
 8000fd0:	0800784c 	.word	0x0800784c
 8000fd4:	08007860 	.word	0x08007860

08000fd8 <setTempeartureMax>:
 */

#include "set_tempt_ci.h"

void setTempeartureMax(char **argv,uint8_t argv_idx)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
	if(argv_idx < 2)
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d803      	bhi.n	8000ff2 <setTempeartureMax+0x1a>
	{
		response_print("not enough arguments");
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <setTempeartureMax+0x44>)
 8000fec:	f7ff ff80 	bl	8000ef0 <response_print>
		return;
 8000ff0:	e011      	b.n	8001016 <setTempeartureMax+0x3e>
	}
	else if (argv_idx > 2)
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d903      	bls.n	8001000 <setTempeartureMax+0x28>
	{
		response_print("too many arguments");
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <setTempeartureMax+0x48>)
 8000ffa:	f7ff ff79 	bl	8000ef0 <response_print>
		return;
 8000ffe:	e00a      	b.n	8001016 <setTempeartureMax+0x3e>
	}
	else
	{
		response_print("Max temp set to %f",atof(argv[1]));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3304      	adds	r3, #4
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f002 f946 	bl	8003298 <atof>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <setTempeartureMax+0x4c>)
 8001012:	f7ff ff6d 	bl	8000ef0 <response_print>
	}
}
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	0800787c 	.word	0x0800787c
 8001020:	08007894 	.word	0x08007894
 8001024:	080078a8 	.word	0x080078a8

08001028 <setTempeartureMin>:
void setTempeartureMin(char **argv,uint8_t argv_idx)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
	if(argv_idx < 2)
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d803      	bhi.n	8001042 <setTempeartureMin+0x1a>
	{
		response_print("not enough arguments");
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <setTempeartureMin+0x44>)
 800103c:	f7ff ff58 	bl	8000ef0 <response_print>
		return;
 8001040:	e011      	b.n	8001066 <setTempeartureMin+0x3e>
	}
	else if (argv_idx > 2)
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d903      	bls.n	8001050 <setTempeartureMin+0x28>
	{
		response_print("too many arguments");
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <setTempeartureMin+0x48>)
 800104a:	f7ff ff51 	bl	8000ef0 <response_print>
		return;
 800104e:	e00a      	b.n	8001066 <setTempeartureMin+0x3e>
	}
	else
	{
		response_print("Min temp set to %f",atof(argv[1]));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3304      	adds	r3, #4
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f002 f91e 	bl	8003298 <atof>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <setTempeartureMin+0x4c>)
 8001062:	f7ff ff45 	bl	8000ef0 <response_print>
	}
}
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	0800787c 	.word	0x0800787c
 8001070:	08007894 	.word	0x08007894
 8001074:	080078bc 	.word	0x080078bc

08001078 <uart_Rxdata_receive>:
static uint8_t uart_len = 0;
uint8_t  uartFlag = 0;

//hàm ghi dữ liệu nhận qua UART vào buffer
void uart_Rxdata_receive(uint8_t data_rx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	if(data_rx == '\n')
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b0a      	cmp	r3, #10
 8001086:	d109      	bne.n	800109c <uart_Rxdata_receive+0x24>
	{
		uartBuff[uart_len] = '\0';
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <uart_Rxdata_receive+0x44>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <uart_Rxdata_receive+0x48>)
 8001090:	2100      	movs	r1, #0
 8001092:	5499      	strb	r1, [r3, r2]
		uartFlag = 1;
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <uart_Rxdata_receive+0x4c>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
	else
	{
		uartBuff[uart_len++] = data_rx;
	}

}
 800109a:	e009      	b.n	80010b0 <uart_Rxdata_receive+0x38>
		uartBuff[uart_len++] = data_rx;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <uart_Rxdata_receive+0x44>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	b2d1      	uxtb	r1, r2
 80010a4:	4a05      	ldr	r2, [pc, #20]	; (80010bc <uart_Rxdata_receive+0x44>)
 80010a6:	7011      	strb	r1, [r2, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <uart_Rxdata_receive+0x48>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	5453      	strb	r3, [r2, r1]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000268 	.word	0x20000268
 80010c0:	20000204 	.word	0x20000204
 80010c4:	20000269 	.word	0x20000269

080010c8 <uart_Rxdata_handle>:

//hàm xử lí dữ liệu lưu trong buffer
void uart_Rxdata_handle()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	if(uartFlag == 1)
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <uart_Rxdata_handle+0x28>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d10b      	bne.n	80010ec <uart_Rxdata_handle+0x24>
	{
		cli_command_execute(uartBuff, uart_len);
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <uart_Rxdata_handle+0x2c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <uart_Rxdata_handle+0x30>)
 80010dc:	f7ff fe8e 	bl	8000dfc <cli_command_execute>
		uartFlag = 0;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <uart_Rxdata_handle+0x28>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
		uart_len = 0;
 80010e6:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <uart_Rxdata_handle+0x2c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
	}
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000269 	.word	0x20000269
 80010f4:	20000268 	.word	0x20000268
 80010f8:	20000204 	.word	0x20000204

080010fc <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Rxdata;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(huart->Instance == huart1.Instance)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_UART_RxCpltCallback+0x30>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d109      	bne.n	8001124 <HAL_UART_RxCpltCallback+0x28>
  {
	  uart_Rxdata_receive(Rxdata);
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <HAL_UART_RxCpltCallback+0x34>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffaf 	bl	8001078 <uart_Rxdata_receive>
	  HAL_UART_Receive_IT(&huart1, &Rxdata, 1);
 800111a:	2201      	movs	r2, #1
 800111c:	4904      	ldr	r1, [pc, #16]	; (8001130 <HAL_UART_RxCpltCallback+0x34>)
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <HAL_UART_RxCpltCallback+0x30>)
 8001120:	f001 fb15 	bl	800274e <HAL_UART_Receive_IT>
  }
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000026c 	.word	0x2000026c
 8001130:	200002b4 	.word	0x200002b4

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 fa68 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f818 	bl	8001170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 f87c 	bl	800123c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001144:	f000 f850 	bl	80011e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &Rxdata, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	4907      	ldr	r1, [pc, #28]	; (8001168 <main+0x34>)
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <main+0x38>)
 800114e:	f001 fafe 	bl	800274e <HAL_UART_Receive_IT>
  response_uart_init(&huart1);
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <main+0x38>)
 8001154:	f7ff fef0 	bl	8000f38 <response_uart_init>
  led_effect_init();
 8001158:	f7ff fde4 	bl	8000d24 <led_effect_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uart_Rxdata_handle();
 800115c:	f7ff ffb4 	bl	80010c8 <uart_Rxdata_handle>
	  led_effect_handle();
 8001160:	f7ff fd92 	bl	8000c88 <led_effect_handle>
	  uart_Rxdata_handle();
 8001164:	e7fa      	b.n	800115c <main+0x28>
 8001166:	bf00      	nop
 8001168:	200002b4 	.word	0x200002b4
 800116c:	2000026c 	.word	0x2000026c

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b090      	sub	sp, #64	; 0x40
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	2228      	movs	r2, #40	; 0x28
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fcbe 	bl	8004b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001196:	2301      	movs	r3, #1
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119a:	2310      	movs	r3, #16
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800119e:	2300      	movs	r3, #0
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fdee 	bl	8001d88 <HAL_RCC_OscConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011b2:	f000 f881 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b6:	230f      	movs	r3, #15
 80011b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 f85c 	bl	800228c <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011da:	f000 f86d 	bl	80012b8 <Error_Handler>
  }
}
 80011de:	bf00      	nop
 80011e0:	3740      	adds	r7, #64	; 0x40
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_USART1_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 8001220:	f001 f9c2 	bl	80025a8 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f845 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000026c 	.word	0x2000026c
 8001238:	40013800 	.word	0x40013800

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_GPIO_Init+0x74>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <MX_GPIO_Init+0x74>)
 8001256:	f043 0320 	orr.w	r3, r3, #32
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_GPIO_Init+0x74>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_GPIO_Init+0x74>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <MX_GPIO_Init+0x74>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_GPIO_Init+0x74>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001280:	2200      	movs	r2, #0
 8001282:	21ff      	movs	r1, #255	; 0xff
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <MX_GPIO_Init+0x78>)
 8001286:	f000 fd67 	bl	8001d58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800128a:	23ff      	movs	r3, #255	; 0xff
 800128c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2302      	movs	r3, #2
 8001298:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	4619      	mov	r1, r3
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_GPIO_Init+0x78>)
 80012a2:	f000 fbd5 	bl	8001a50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010800 	.word	0x40010800

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <Error_Handler+0x8>
	...

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_MspInit+0x5c>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <HAL_MspInit+0x5c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6193      	str	r3, [r2, #24]
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_MspInit+0x5c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_MspInit+0x5c>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_MspInit+0x5c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_MspInit+0x5c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_MspInit+0x60>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_MspInit+0x60>)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a20      	ldr	r2, [pc, #128]	; (80013c4 <HAL_UART_MspInit+0x9c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d139      	bne.n	80013bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_UART_MspInit+0xa0>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <HAL_UART_MspInit+0xa0>)
 800134e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <HAL_UART_MspInit+0xa0>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_UART_MspInit+0xa0>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <HAL_UART_MspInit+0xa0>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_UART_MspInit+0xa0>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4619      	mov	r1, r3
 800138c:	480f      	ldr	r0, [pc, #60]	; (80013cc <HAL_UART_MspInit+0xa4>)
 800138e:	f000 fb5f 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <HAL_UART_MspInit+0xa4>)
 80013a8:	f000 fb52 	bl	8001a50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2101      	movs	r1, #1
 80013b0:	2025      	movs	r0, #37	; 0x25
 80013b2:	f000 fa64 	bl	800187e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013b6:	2025      	movs	r0, #37	; 0x25
 80013b8:	f000 fa7d 	bl	80018b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010800 	.word	0x40010800

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler+0x4>

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler+0x4>

080013e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <UsageFault_Handler+0x4>

080013ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001416:	f000 f93f 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <USART1_IRQHandler+0x10>)
 8001426:	f001 f9b7 	bl	8002798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000026c 	.word	0x2000026c

08001434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return 1;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <_kill>:

int _kill(int pid, int sig)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800144c:	f003 fc18 	bl	8004c80 <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	2216      	movs	r2, #22
 8001454:	601a      	str	r2, [r3, #0]
  return -1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_exit>:

void _exit (int status)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800146a:	f04f 31ff 	mov.w	r1, #4294967295
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffe7 	bl	8001442 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001474:	e7fe      	b.n	8001474 <_exit+0x12>

08001476 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e00a      	b.n	800149e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001488:	f3af 8000 	nop.w
 800148c:	4601      	mov	r1, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	60ba      	str	r2, [r7, #8]
 8001494:	b2ca      	uxtb	r2, r1
 8001496:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbf0      	blt.n	8001488 <_read+0x12>
  }

  return len;
 80014a6:	687b      	ldr	r3, [r7, #4]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e009      	b.n	80014d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	60ba      	str	r2, [r7, #8]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	dbf1      	blt.n	80014c2 <_write+0x12>
  }
  return len;
 80014de:	687b      	ldr	r3, [r7, #4]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_close>:

int _close(int file)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150e:	605a      	str	r2, [r3, #4]
  return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <_isatty>:

int _isatty(int file)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f003 fb82 	bl	8004c80 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20005000 	.word	0x20005000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	200002b8 	.word	0x200002b8
 80015b0:	20000410 	.word	0x20000410

080015b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c0:	f7ff fff8 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015c6:	490c      	ldr	r1, [pc, #48]	; (80015f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015dc:	4c09      	ldr	r4, [pc, #36]	; (8001604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ea:	f003 fb4f 	bl	8004c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ee:	f7ff fda1 	bl	8001134 <main>
  bx lr
 80015f2:	4770      	bx	lr
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015fc:	08007dd0 	.word	0x08007dd0
  ldr r2, =_sbss
 8001600:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001604:	2000040c 	.word	0x2000040c

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_Init+0x28>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_Init+0x28>)
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f923 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001622:	200f      	movs	r0, #15
 8001624:	f000 f808 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001628:	f7ff fe4c 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_InitTick+0x54>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x58>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f93b 	bl	80018d2 <HAL_SYSTICK_Config>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e00e      	b.n	8001684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d80a      	bhi.n	8001682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f000 f903 	bl	800187e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4a06      	ldr	r2, [pc, #24]	; (8001694 <HAL_InitTick+0x5c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000000 	.word	0x20000000
 8001690:	20000008 	.word	0x20000008
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x1c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x20>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a03      	ldr	r2, [pc, #12]	; (80016b8 <HAL_IncTick+0x20>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	20000008 	.word	0x20000008
 80016b8:	200002bc 	.word	0x200002bc

080016bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <HAL_GetTick+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	200002bc 	.word	0x200002bc

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4906      	ldr	r1, [pc, #24]	; (8001768 <__NVIC_EnableIRQ+0x34>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	; (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	; (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ff90 	bl	800176c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff2d 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001890:	f7ff ff42 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff ff90 	bl	80017c0 <NVIC_EncodePriority>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff5f 	bl	800176c <__NVIC_SetPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff35 	bl	8001734 <__NVIC_EnableIRQ>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffa2 	bl	8001824 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b085      	sub	sp, #20
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d008      	beq.n	8001914 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2204      	movs	r2, #4
 8001906:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e020      	b.n	8001956 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 020e 	bic.w	r2, r2, #14
 8001922:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d005      	beq.n	8001984 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2204      	movs	r2, #4
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	e051      	b.n	8001a28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 020e 	bic.w	r2, r2, #14
 8001992:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <HAL_DMA_Abort_IT+0xd4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d029      	beq.n	8001a02 <HAL_DMA_Abort_IT+0xa2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_DMA_Abort_IT+0xd8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d022      	beq.n	80019fe <HAL_DMA_Abort_IT+0x9e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_DMA_Abort_IT+0xdc>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d01a      	beq.n	80019f8 <HAL_DMA_Abort_IT+0x98>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <HAL_DMA_Abort_IT+0xe0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d012      	beq.n	80019f2 <HAL_DMA_Abort_IT+0x92>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_DMA_Abort_IT+0xe4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00a      	beq.n	80019ec <HAL_DMA_Abort_IT+0x8c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_DMA_Abort_IT+0xe8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d102      	bne.n	80019e6 <HAL_DMA_Abort_IT+0x86>
 80019e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019e4:	e00e      	b.n	8001a04 <HAL_DMA_Abort_IT+0xa4>
 80019e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019ea:	e00b      	b.n	8001a04 <HAL_DMA_Abort_IT+0xa4>
 80019ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f0:	e008      	b.n	8001a04 <HAL_DMA_Abort_IT+0xa4>
 80019f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f6:	e005      	b.n	8001a04 <HAL_DMA_Abort_IT+0xa4>
 80019f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019fc:	e002      	b.n	8001a04 <HAL_DMA_Abort_IT+0xa4>
 80019fe:	2310      	movs	r3, #16
 8001a00:	e000      	b.n	8001a04 <HAL_DMA_Abort_IT+0xa4>
 8001a02:	2301      	movs	r3, #1
 8001a04:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <HAL_DMA_Abort_IT+0xec>)
 8001a06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	4798      	blx	r3
    } 
  }
  return status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40020008 	.word	0x40020008
 8001a38:	4002001c 	.word	0x4002001c
 8001a3c:	40020030 	.word	0x40020030
 8001a40:	40020044 	.word	0x40020044
 8001a44:	40020058 	.word	0x40020058
 8001a48:	4002006c 	.word	0x4002006c
 8001a4c:	40020000 	.word	0x40020000

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b08b      	sub	sp, #44	; 0x2c
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	e169      	b.n	8001d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a64:	2201      	movs	r2, #1
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f040 8158 	bne.w	8001d32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a9a      	ldr	r2, [pc, #616]	; (8001cf0 <HAL_GPIO_Init+0x2a0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d05e      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001a8c:	4a98      	ldr	r2, [pc, #608]	; (8001cf0 <HAL_GPIO_Init+0x2a0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d875      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001a92:	4a98      	ldr	r2, [pc, #608]	; (8001cf4 <HAL_GPIO_Init+0x2a4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d058      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001a98:	4a96      	ldr	r2, [pc, #600]	; (8001cf4 <HAL_GPIO_Init+0x2a4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d86f      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001a9e:	4a96      	ldr	r2, [pc, #600]	; (8001cf8 <HAL_GPIO_Init+0x2a8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d052      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001aa4:	4a94      	ldr	r2, [pc, #592]	; (8001cf8 <HAL_GPIO_Init+0x2a8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d869      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001aaa:	4a94      	ldr	r2, [pc, #592]	; (8001cfc <HAL_GPIO_Init+0x2ac>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d04c      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001ab0:	4a92      	ldr	r2, [pc, #584]	; (8001cfc <HAL_GPIO_Init+0x2ac>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d863      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001ab6:	4a92      	ldr	r2, [pc, #584]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d046      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001abc:	4a90      	ldr	r2, [pc, #576]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d85d      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d82a      	bhi.n	8001b1c <HAL_GPIO_Init+0xcc>
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d859      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001aca:	a201      	add	r2, pc, #4	; (adr r2, 8001ad0 <HAL_GPIO_Init+0x80>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001b4b 	.word	0x08001b4b
 8001ad4:	08001b25 	.word	0x08001b25
 8001ad8:	08001b37 	.word	0x08001b37
 8001adc:	08001b79 	.word	0x08001b79
 8001ae0:	08001b7f 	.word	0x08001b7f
 8001ae4:	08001b7f 	.word	0x08001b7f
 8001ae8:	08001b7f 	.word	0x08001b7f
 8001aec:	08001b7f 	.word	0x08001b7f
 8001af0:	08001b7f 	.word	0x08001b7f
 8001af4:	08001b7f 	.word	0x08001b7f
 8001af8:	08001b7f 	.word	0x08001b7f
 8001afc:	08001b7f 	.word	0x08001b7f
 8001b00:	08001b7f 	.word	0x08001b7f
 8001b04:	08001b7f 	.word	0x08001b7f
 8001b08:	08001b7f 	.word	0x08001b7f
 8001b0c:	08001b7f 	.word	0x08001b7f
 8001b10:	08001b7f 	.word	0x08001b7f
 8001b14:	08001b2d 	.word	0x08001b2d
 8001b18:	08001b41 	.word	0x08001b41
 8001b1c:	4a79      	ldr	r2, [pc, #484]	; (8001d04 <HAL_GPIO_Init+0x2b4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b22:	e02c      	b.n	8001b7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e029      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	3304      	adds	r3, #4
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	e024      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	623b      	str	r3, [r7, #32]
          break;
 8001b3e:	e01f      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	330c      	adds	r3, #12
 8001b46:	623b      	str	r3, [r7, #32]
          break;
 8001b48:	e01a      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b52:	2304      	movs	r3, #4
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e013      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b60:	2308      	movs	r3, #8
 8001b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	611a      	str	r2, [r3, #16]
          break;
 8001b6a:	e009      	b.n	8001b80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	615a      	str	r2, [r3, #20]
          break;
 8001b76:	e003      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
          break;
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          break;
 8001b7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2bff      	cmp	r3, #255	; 0xff
 8001b84:	d801      	bhi.n	8001b8a <HAL_GPIO_Init+0x13a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	e001      	b.n	8001b8e <HAL_GPIO_Init+0x13e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2bff      	cmp	r3, #255	; 0xff
 8001b94:	d802      	bhi.n	8001b9c <HAL_GPIO_Init+0x14c>
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	e002      	b.n	8001ba2 <HAL_GPIO_Init+0x152>
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	3b08      	subs	r3, #8
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	210f      	movs	r1, #15
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	6a39      	ldr	r1, [r7, #32]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80b1 	beq.w	8001d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd0:	4b4d      	ldr	r3, [pc, #308]	; (8001d08 <HAL_GPIO_Init+0x2b8>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_GPIO_Init+0x2b8>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_GPIO_Init+0x2b8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be8:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <HAL_GPIO_Init+0x2bc>)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a40      	ldr	r2, [pc, #256]	; (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_Init+0x1ec>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3f      	ldr	r2, [pc, #252]	; (8001d14 <HAL_GPIO_Init+0x2c4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x1e8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3e      	ldr	r2, [pc, #248]	; (8001d18 <HAL_GPIO_Init+0x2c8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x1e4>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a3d      	ldr	r2, [pc, #244]	; (8001d1c <HAL_GPIO_Init+0x2cc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x1e0>
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e006      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c30:	2304      	movs	r3, #4
 8001c32:	e004      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c40:	f002 0203 	and.w	r2, r2, #3
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	4093      	lsls	r3, r2
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c4e:	492f      	ldr	r1, [pc, #188]	; (8001d0c <HAL_GPIO_Init+0x2bc>)
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	492c      	ldr	r1, [pc, #176]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c76:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4928      	ldr	r1, [pc, #160]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	4922      	ldr	r1, [pc, #136]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	60cb      	str	r3, [r1, #12]
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	491e      	ldr	r1, [pc, #120]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4918      	ldr	r1, [pc, #96]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4914      	ldr	r1, [pc, #80]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d021      	beq.n	8001d24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	490e      	ldr	r1, [pc, #56]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
 8001cec:	e021      	b.n	8001d32 <HAL_GPIO_Init+0x2e2>
 8001cee:	bf00      	nop
 8001cf0:	10320000 	.word	0x10320000
 8001cf4:	10310000 	.word	0x10310000
 8001cf8:	10220000 	.word	0x10220000
 8001cfc:	10210000 	.word	0x10210000
 8001d00:	10120000 	.word	0x10120000
 8001d04:	10110000 	.word	0x10110000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40010800 	.word	0x40010800
 8001d14:	40010c00 	.word	0x40010c00
 8001d18:	40011000 	.word	0x40011000
 8001d1c:	40011400 	.word	0x40011400
 8001d20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4909      	ldr	r1, [pc, #36]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	3301      	adds	r3, #1
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f47f ae8e 	bne.w	8001a64 <HAL_GPIO_Init+0x14>
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	372c      	adds	r7, #44	; 0x2c
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d74:	e003      	b.n	8001d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	041a      	lsls	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e272      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8087 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da8:	4b92      	ldr	r3, [pc, #584]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d00c      	beq.n	8001dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db4:	4b8f      	ldr	r3, [pc, #572]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d112      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d10b      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dce:	4b89      	ldr	r3, [pc, #548]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d06c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d168      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e24c      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x76>
 8001df0:	4b80      	ldr	r3, [pc, #512]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a7f      	ldr	r2, [pc, #508]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	e02e      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x98>
 8001e06:	4b7b      	ldr	r3, [pc, #492]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b78      	ldr	r3, [pc, #480]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a77      	ldr	r2, [pc, #476]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e01d      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0xbc>
 8001e2a:	4b72      	ldr	r3, [pc, #456]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a71      	ldr	r2, [pc, #452]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6e      	ldr	r2, [pc, #440]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e44:	4b6b      	ldr	r3, [pc, #428]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6a      	ldr	r2, [pc, #424]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a67      	ldr	r2, [pc, #412]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fc2a 	bl	80016bc <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fc26 	bl	80016bc <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e200      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0xe4>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fc16 	bl	80016bc <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff fc12 	bl	80016bc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1ec      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	4b53      	ldr	r3, [pc, #332]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x10c>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d063      	beq.n	8001f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec2:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ece:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d116      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1c0      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4939      	ldr	r1, [pc, #228]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	e03a      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7ff fbcb 	bl	80016bc <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fbc7 	bl	80016bc <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1a1      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4927      	ldr	r1, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fbaa 	bl	80016bc <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fba6 	bl	80016bc <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e180      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d03a      	beq.n	800200c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d019      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa4:	f7ff fb8a 	bl	80016bc <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7ff fb86 	bl	80016bc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e160      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f000 face 	bl	800256c <RCC_Delay>
 8001fd0:	e01c      	b.n	800200c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7ff fb70 	bl	80016bc <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fde:	e00f      	b.n	8002000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fb6c 	bl	80016bc <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d908      	bls.n	8002000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e146      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	42420000 	.word	0x42420000
 8001ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	4b92      	ldr	r3, [pc, #584]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e9      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a6 	beq.w	8002166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201e:	4b8b      	ldr	r3, [pc, #556]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10d      	bne.n	8002046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b88      	ldr	r3, [pc, #544]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a87      	ldr	r2, [pc, #540]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b85      	ldr	r3, [pc, #532]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002042:	2301      	movs	r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b82      	ldr	r3, [pc, #520]	; (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002052:	4b7f      	ldr	r3, [pc, #508]	; (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7e      	ldr	r2, [pc, #504]	; (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7ff fb2d 	bl	80016bc <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002066:	f7ff fb29 	bl	80016bc <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b64      	cmp	r3, #100	; 0x64
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e103      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4b75      	ldr	r3, [pc, #468]	; (8002250 <HAL_RCC_OscConfig+0x4c8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x312>
 800208c:	4b6f      	ldr	r3, [pc, #444]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a6e      	ldr	r2, [pc, #440]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	e02d      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x334>
 80020a2:	4b6a      	ldr	r3, [pc, #424]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a69      	ldr	r2, [pc, #420]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	4b67      	ldr	r3, [pc, #412]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a66      	ldr	r2, [pc, #408]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	e01c      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d10c      	bne.n	80020de <HAL_RCC_OscConfig+0x356>
 80020c4:	4b61      	ldr	r3, [pc, #388]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a60      	ldr	r2, [pc, #384]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	4b5e      	ldr	r3, [pc, #376]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a5d      	ldr	r2, [pc, #372]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6213      	str	r3, [r2, #32]
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020de:	4b5b      	ldr	r3, [pc, #364]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a5a      	ldr	r2, [pc, #360]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	4b58      	ldr	r3, [pc, #352]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a57      	ldr	r2, [pc, #348]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d015      	beq.n	800212a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff fadd 	bl	80016bc <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7ff fad9 	bl	80016bc <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0b1      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	4b4b      	ldr	r3, [pc, #300]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ee      	beq.n	8002106 <HAL_RCC_OscConfig+0x37e>
 8002128:	e014      	b.n	8002154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7ff fac7 	bl	80016bc <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7ff fac3 	bl	80016bc <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e09b      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002148:	4b40      	ldr	r3, [pc, #256]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ee      	bne.n	8002132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b3c      	ldr	r3, [pc, #240]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a3b      	ldr	r2, [pc, #236]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8087 	beq.w	800227e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002170:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d061      	beq.n	8002240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d146      	bne.n	8002212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b33      	ldr	r3, [pc, #204]	; (8002254 <HAL_RCC_OscConfig+0x4cc>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff fa97 	bl	80016bc <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff fa93 	bl	80016bc <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e06d      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b8:	d108      	bne.n	80021cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4921      	ldr	r1, [pc, #132]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a19      	ldr	r1, [r3, #32]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	430b      	orrs	r3, r1
 80021de:	491b      	ldr	r1, [pc, #108]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff fa67 	bl	80016bc <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f2:	f7ff fa63 	bl	80016bc <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e03d      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x46a>
 8002210:	e035      	b.n	800227e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_RCC_OscConfig+0x4cc>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fa50 	bl	80016bc <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7ff fa4c 	bl	80016bc <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e026      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x498>
 800223e:	e01e      	b.n	800227e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e019      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
 8002254:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_OscConfig+0x500>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	429a      	cmp	r2, r3
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0d0      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b6a      	ldr	r3, [pc, #424]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b67      	ldr	r3, [pc, #412]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4965      	ldr	r1, [pc, #404]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b63      	ldr	r3, [pc, #396]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0b8      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e8:	4b59      	ldr	r3, [pc, #356]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a58      	ldr	r2, [pc, #352]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002300:	4b53      	ldr	r3, [pc, #332]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a52      	ldr	r2, [pc, #328]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800230a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b50      	ldr	r3, [pc, #320]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	494d      	ldr	r1, [pc, #308]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d040      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d115      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e073      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e06b      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b39      	ldr	r3, [pc, #228]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4936      	ldr	r1, [pc, #216]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7ff f99e 	bl	80016bc <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7ff f99a 	bl	80016bc <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e053      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d210      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4922      	ldr	r1, [pc, #136]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e032      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4916      	ldr	r1, [pc, #88]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	490e      	ldr	r1, [pc, #56]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241a:	f000 f821 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 800241e:	4602      	mov	r2, r0
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	490a      	ldr	r1, [pc, #40]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 800242c:	5ccb      	ldrb	r3, [r1, r3]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x1cc>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_ClockConfig+0x1d0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff f8fc 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40022000 	.word	0x40022000
 8002450:	40021000 	.word	0x40021000
 8002454:	08007918 	.word	0x08007918
 8002458:	20000000 	.word	0x20000000
 800245c:	20000004 	.word	0x20000004

08002460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247a:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x30>
 800248a:	2b08      	cmp	r3, #8
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x36>
 800248e:	e027      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002492:	613b      	str	r3, [r7, #16]
      break;
 8002494:	e027      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	4a17      	ldr	r2, [pc, #92]	; (80024fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	0c5b      	lsrs	r3, r3, #17
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	4a11      	ldr	r2, [pc, #68]	; (8002500 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024c2:	fb03 f202 	mul.w	r2, r3, r2
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e004      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024d4:	fb02 f303 	mul.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	613b      	str	r3, [r7, #16]
      break;
 80024de:	e002      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024e2:	613b      	str	r3, [r7, #16]
      break;
 80024e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e6:	693b      	ldr	r3, [r7, #16]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	007a1200 	.word	0x007a1200
 80024fc:	08007930 	.word	0x08007930
 8002500:	08007940 	.word	0x08007940
 8002504:	003d0900 	.word	0x003d0900

08002508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800250c:	4b02      	ldr	r3, [pc, #8]	; (8002518 <HAL_RCC_GetHCLKFreq+0x10>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	20000000 	.word	0x20000000

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002520:	f7ff fff2 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4903      	ldr	r1, [pc, #12]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	08007928 	.word	0x08007928

08002544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002548:	f7ff ffde 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	0adb      	lsrs	r3, r3, #11
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4903      	ldr	r1, [pc, #12]	; (8002568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	08007928 	.word	0x08007928

0800256c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <RCC_Delay+0x34>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <RCC_Delay+0x38>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0a5b      	lsrs	r3, r3, #9
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002588:	bf00      	nop
  }
  while (Delay --);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	60fa      	str	r2, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f9      	bne.n	8002588 <RCC_Delay+0x1c>
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	20000000 	.word	0x20000000
 80025a4:	10624dd3 	.word	0x10624dd3

080025a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e042      	b.n	8002640 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe feaa 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2224      	movs	r2, #36	; 0x24
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fdc5 	bl	800317c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b20      	cmp	r3, #32
 8002666:	d16d      	bne.n	8002744 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_UART_Transmit+0x2c>
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e066      	b.n	8002746 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2221      	movs	r2, #33	; 0x21
 8002682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002686:	f7ff f819 	bl	80016bc <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a0:	d108      	bne.n	80026b4 <HAL_UART_Transmit+0x6c>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d104      	bne.n	80026b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	e003      	b.n	80026bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026bc:	e02a      	b.n	8002714 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2200      	movs	r2, #0
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fb14 	bl	8002cf6 <UART_WaitOnFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e036      	b.n	8002746 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	3302      	adds	r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	e007      	b.n	8002706 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	3301      	adds	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1cf      	bne.n	80026be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	2140      	movs	r1, #64	; 0x40
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fae4 	bl	8002cf6 <UART_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e006      	b.n	8002746 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002744:	2302      	movs	r3, #2
  }
}
 8002746:	4618      	mov	r0, r3
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	4613      	mov	r3, r2
 800275a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b20      	cmp	r3, #32
 8002766:	d112      	bne.n	800278e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_UART_Receive_IT+0x26>
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e00b      	b.n	8002790 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	461a      	mov	r2, r3
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fb24 	bl	8002dd2 <UART_Start_Receive_IT>
 800278a:	4603      	mov	r3, r0
 800278c:	e000      	b.n	8002790 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
  }
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0ba      	sub	sp, #232	; 0xe8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_UART_IRQHandler+0x66>
 80027ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fc01 	bl	8002ffe <UART_Receive_IT>
      return;
 80027fc:	e25b      	b.n	8002cb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80de 	beq.w	80029c4 <HAL_UART_IRQHandler+0x22c>
 8002808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d106      	bne.n	8002822 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002818:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80d1 	beq.w	80029c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_UART_IRQHandler+0xae>
 800282e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_UART_IRQHandler+0xd2>
 8002852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f043 0202 	orr.w	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800286a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00b      	beq.n	800288e <HAL_UART_IRQHandler+0xf6>
 8002876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f043 0204 	orr.w	r2, r3, #4
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800288e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d011      	beq.n	80028be <HAL_UART_IRQHandler+0x126>
 800289a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f043 0208 	orr.w	r2, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 81f2 	beq.w	8002cac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_UART_IRQHandler+0x14e>
 80028d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fb8c 	bl	8002ffe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf14      	ite	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	2300      	moveq	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <HAL_UART_IRQHandler+0x17a>
 800290a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d04f      	beq.n	80029b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fa96 	bl	8002e44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d041      	beq.n	80029aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3314      	adds	r3, #20
 800292c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002934:	e853 3f00 	ldrex	r3, [r3]
 8002938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800293c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3314      	adds	r3, #20
 800294e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002952:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800295e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800296a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1d9      	bne.n	8002926 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d013      	beq.n	80029a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	4a7e      	ldr	r2, [pc, #504]	; (8002b78 <HAL_UART_IRQHandler+0x3e0>)
 8002980:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe ffea 	bl	8001960 <HAL_DMA_Abort_IT>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d016      	beq.n	80029c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800299c:	4610      	mov	r0, r2
 800299e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a0:	e00e      	b.n	80029c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f993 	bl	8002cce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	e00a      	b.n	80029c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f98f 	bl	8002cce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b0:	e006      	b.n	80029c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f98b 	bl	8002cce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80029be:	e175      	b.n	8002cac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	bf00      	nop
    return;
 80029c2:	e173      	b.n	8002cac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	f040 814f 	bne.w	8002c6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8148 	beq.w	8002c6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8141 	beq.w	8002c6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80b6 	beq.w	8002b7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8145 	beq.w	8002cb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	f080 813e 	bcs.w	8002cb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	f000 8088 	beq.w	8002b58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	330c      	adds	r3, #12
 8002a70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a74:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a84:	e841 2300 	strex	r3, r2, [r1]
 8002a88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1d9      	bne.n	8002a48 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3314      	adds	r3, #20
 8002a9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9e:	e853 3f00 	ldrex	r3, [r3]
 8002aa2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ab8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002abc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ac0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ac4:	e841 2300 	strex	r3, r2, [r1]
 8002ac8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e1      	bne.n	8002a94 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3314      	adds	r3, #20
 8002ad6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ada:	e853 3f00 	ldrex	r3, [r3]
 8002ade:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3314      	adds	r3, #20
 8002af0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002af4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002af6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002afa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002afc:	e841 2300 	strex	r3, r2, [r1]
 8002b00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e3      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b20:	e853 3f00 	ldrex	r3, [r3]
 8002b24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b28:	f023 0310 	bic.w	r3, r3, #16
 8002b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b3c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e3      	bne.n	8002b16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fec9 	bl	80018ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f8b6 	bl	8002ce0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b74:	e09c      	b.n	8002cb0 <HAL_UART_IRQHandler+0x518>
 8002b76:	bf00      	nop
 8002b78:	08002f09 	.word	0x08002f09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 808e 	beq.w	8002cb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8089 	beq.w	8002cb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bc6:	647a      	str	r2, [r7, #68]	; 0x44
 8002bc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e3      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3314      	adds	r3, #20
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	e853 3f00 	ldrex	r3, [r3]
 8002be8:	623b      	str	r3, [r7, #32]
   return(result);
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3314      	adds	r3, #20
 8002bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c06:	e841 2300 	strex	r3, r2, [r1]
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1e3      	bne.n	8002bda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	e853 3f00 	ldrex	r3, [r3]
 8002c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0310 	bic.w	r3, r3, #16
 8002c36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c44:	61fa      	str	r2, [r7, #28]
 8002c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	69b9      	ldr	r1, [r7, #24]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	e841 2300 	strex	r3, r2, [r1]
 8002c50:	617b      	str	r3, [r7, #20]
   return(result);
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e3      	bne.n	8002c20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f83b 	bl	8002ce0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c6a:	e023      	b.n	8002cb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <HAL_UART_IRQHandler+0x4f4>
 8002c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f953 	bl	8002f30 <UART_Transmit_IT>
    return;
 8002c8a:	e014      	b.n	8002cb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00e      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x51e>
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f992 	bl	8002fce <UART_EndTransmit_IT>
    return;
 8002caa:	e004      	b.n	8002cb6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002cac:	bf00      	nop
 8002cae:	e002      	b.n	8002cb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cb0:	bf00      	nop
 8002cb2:	e000      	b.n	8002cb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cb4:	bf00      	nop
  }
}
 8002cb6:	37e8      	adds	r7, #232	; 0xe8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b090      	sub	sp, #64	; 0x40
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d06:	e050      	b.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d04c      	beq.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d16:	f7fe fcd1 	bl	80016bc <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d241      	bcs.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	e853 3f00 	ldrex	r3, [r3]
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	330c      	adds	r3, #12
 8002d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d46:	637a      	str	r2, [r7, #52]	; 0x34
 8002d48:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e5      	bne.n	8002d26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3314      	adds	r3, #20
 8002d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	613b      	str	r3, [r7, #16]
   return(result);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3314      	adds	r3, #20
 8002d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d7a:	623a      	str	r2, [r7, #32]
 8002d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	69f9      	ldr	r1, [r7, #28]
 8002d80:	6a3a      	ldr	r2, [r7, #32]
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e5      	bne.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e00f      	b.n	8002dca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4013      	ands	r3, r2
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d09f      	beq.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3740      	adds	r7, #64	; 0x40
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	88fa      	ldrh	r2, [r7, #6]
 8002dea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	88fa      	ldrh	r2, [r7, #6]
 8002df0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2222      	movs	r2, #34	; 0x22
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e16:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0220 	orr.w	r2, r2, #32
 8002e36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b095      	sub	sp, #84	; 0x54
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e6c:	643a      	str	r2, [r7, #64]	; 0x40
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e5      	bne.n	8002e4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3314      	adds	r3, #20
 8002e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	e853 3f00 	ldrex	r3, [r3]
 8002e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3314      	adds	r3, #20
 8002e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea8:	e841 2300 	strex	r3, r2, [r1]
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e5      	bne.n	8002e80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d119      	bne.n	8002ef0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	330c      	adds	r3, #12
 8002ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	e853 3f00 	ldrex	r3, [r3]
 8002eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f023 0310 	bic.w	r3, r3, #16
 8002ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002edc:	61ba      	str	r2, [r7, #24]
 8002ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	6979      	ldr	r1, [r7, #20]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e5      	bne.n	8002ebc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002efe:	bf00      	nop
 8002f00:	3754      	adds	r7, #84	; 0x54
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff fed3 	bl	8002cce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b21      	cmp	r3, #33	; 0x21
 8002f42:	d13e      	bne.n	8002fc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4c:	d114      	bne.n	8002f78 <UART_Transmit_IT+0x48>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d110      	bne.n	8002f78 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	1c9a      	adds	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	621a      	str	r2, [r3, #32]
 8002f76:	e008      	b.n	8002f8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	1c59      	adds	r1, r3, #1
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6211      	str	r1, [r2, #32]
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4619      	mov	r1, r3
 8002f98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e000      	b.n	8002fc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fc2:	2302      	movs	r3, #2
  }
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff fe64 	bl	8002cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b08c      	sub	sp, #48	; 0x30
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b22      	cmp	r3, #34	; 0x22
 8003010:	f040 80ae 	bne.w	8003170 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301c:	d117      	bne.n	800304e <UART_Receive_IT+0x50>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d113      	bne.n	800304e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003026:	2300      	movs	r3, #0
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	b29b      	uxth	r3, r3
 8003038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303c:	b29a      	uxth	r2, r3
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	1c9a      	adds	r2, r3, #2
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28
 800304c:	e026      	b.n	800309c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003054:	2300      	movs	r3, #0
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003060:	d007      	beq.n	8003072 <UART_Receive_IT+0x74>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <UART_Receive_IT+0x82>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e008      	b.n	8003092 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800308c:	b2da      	uxtb	r2, r3
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4619      	mov	r1, r3
 80030aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d15d      	bne.n	800316c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0220 	bic.w	r2, r2, #32
 80030be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d135      	bne.n	8003162 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	330c      	adds	r3, #12
 8003102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	e853 3f00 	ldrex	r3, [r3]
 800310a:	613b      	str	r3, [r7, #16]
   return(result);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f023 0310 	bic.w	r3, r3, #16
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	330c      	adds	r3, #12
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	623a      	str	r2, [r7, #32]
 800311e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003120:	69f9      	ldr	r1, [r7, #28]
 8003122:	6a3a      	ldr	r2, [r7, #32]
 8003124:	e841 2300 	strex	r3, r2, [r1]
 8003128:	61bb      	str	r3, [r7, #24]
   return(result);
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1e5      	bne.n	80030fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b10      	cmp	r3, #16
 800313c:	d10a      	bne.n	8003154 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003158:	4619      	mov	r1, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff fdc0 	bl	8002ce0 <HAL_UARTEx_RxEventCallback>
 8003160:	e002      	b.n	8003168 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd ffca 	bl	80010fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e002      	b.n	8003172 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3730      	adds	r7, #48	; 0x30
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031b6:	f023 030c 	bic.w	r3, r3, #12
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2c      	ldr	r2, [pc, #176]	; (8003290 <UART_SetConfig+0x114>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d103      	bne.n	80031ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031e4:	f7ff f9ae 	bl	8002544 <HAL_RCC_GetPCLK2Freq>
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	e002      	b.n	80031f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031ec:	f7ff f996 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 80031f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009a      	lsls	r2, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	4a22      	ldr	r2, [pc, #136]	; (8003294 <UART_SetConfig+0x118>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	0119      	lsls	r1, r3, #4
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009a      	lsls	r2, r3, #2
 800321c:	441a      	add	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	fbb2 f2f3 	udiv	r2, r2, r3
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <UART_SetConfig+0x118>)
 800322a:	fba3 0302 	umull	r0, r3, r3, r2
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2064      	movs	r0, #100	; 0x64
 8003232:	fb00 f303 	mul.w	r3, r0, r3
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	; 0x32
 800323c:	4a15      	ldr	r2, [pc, #84]	; (8003294 <UART_SetConfig+0x118>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003248:	4419      	add	r1, r3
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <UART_SetConfig+0x118>)
 8003262:	fba3 0302 	umull	r0, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2064      	movs	r0, #100	; 0x64
 800326a:	fb00 f303 	mul.w	r3, r0, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	; 0x32
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <UART_SetConfig+0x118>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 020f 	and.w	r2, r3, #15
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	440a      	add	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40013800 	.word	0x40013800
 8003294:	51eb851f 	.word	0x51eb851f

08003298 <atof>:
 8003298:	2100      	movs	r1, #0
 800329a:	f000 be19 	b.w	8003ed0 <strtod>

0800329e <atoi>:
 800329e:	220a      	movs	r2, #10
 80032a0:	2100      	movs	r1, #0
 80032a2:	f000 be9f 	b.w	8003fe4 <strtol>

080032a6 <sulp>:
 80032a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032aa:	460f      	mov	r7, r1
 80032ac:	4690      	mov	r8, r2
 80032ae:	f003 fb97 	bl	80069e0 <__ulp>
 80032b2:	4604      	mov	r4, r0
 80032b4:	460d      	mov	r5, r1
 80032b6:	f1b8 0f00 	cmp.w	r8, #0
 80032ba:	d011      	beq.n	80032e0 <sulp+0x3a>
 80032bc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80032c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	dd0b      	ble.n	80032e0 <sulp+0x3a>
 80032c8:	2400      	movs	r4, #0
 80032ca:	051b      	lsls	r3, r3, #20
 80032cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80032d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80032d4:	4622      	mov	r2, r4
 80032d6:	462b      	mov	r3, r5
 80032d8:	f7fd f908 	bl	80004ec <__aeabi_dmul>
 80032dc:	4604      	mov	r4, r0
 80032de:	460d      	mov	r5, r1
 80032e0:	4620      	mov	r0, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080032e8 <_strtod_l>:
 80032e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ec:	b09f      	sub	sp, #124	; 0x7c
 80032ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80032f0:	2200      	movs	r2, #0
 80032f2:	4604      	mov	r4, r0
 80032f4:	921a      	str	r2, [sp, #104]	; 0x68
 80032f6:	460d      	mov	r5, r1
 80032f8:	f04f 0800 	mov.w	r8, #0
 80032fc:	f04f 0900 	mov.w	r9, #0
 8003300:	460a      	mov	r2, r1
 8003302:	9219      	str	r2, [sp, #100]	; 0x64
 8003304:	7811      	ldrb	r1, [r2, #0]
 8003306:	292b      	cmp	r1, #43	; 0x2b
 8003308:	d04a      	beq.n	80033a0 <_strtod_l+0xb8>
 800330a:	d838      	bhi.n	800337e <_strtod_l+0x96>
 800330c:	290d      	cmp	r1, #13
 800330e:	d832      	bhi.n	8003376 <_strtod_l+0x8e>
 8003310:	2908      	cmp	r1, #8
 8003312:	d832      	bhi.n	800337a <_strtod_l+0x92>
 8003314:	2900      	cmp	r1, #0
 8003316:	d03b      	beq.n	8003390 <_strtod_l+0xa8>
 8003318:	2200      	movs	r2, #0
 800331a:	920e      	str	r2, [sp, #56]	; 0x38
 800331c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800331e:	7832      	ldrb	r2, [r6, #0]
 8003320:	2a30      	cmp	r2, #48	; 0x30
 8003322:	f040 80b2 	bne.w	800348a <_strtod_l+0x1a2>
 8003326:	7872      	ldrb	r2, [r6, #1]
 8003328:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800332c:	2a58      	cmp	r2, #88	; 0x58
 800332e:	d16e      	bne.n	800340e <_strtod_l+0x126>
 8003330:	9302      	str	r3, [sp, #8]
 8003332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003334:	4620      	mov	r0, r4
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	ab1a      	add	r3, sp, #104	; 0x68
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4a8c      	ldr	r2, [pc, #560]	; (8003570 <_strtod_l+0x288>)
 800333e:	ab1b      	add	r3, sp, #108	; 0x6c
 8003340:	a919      	add	r1, sp, #100	; 0x64
 8003342:	f002 fc29 	bl	8005b98 <__gethex>
 8003346:	f010 070f 	ands.w	r7, r0, #15
 800334a:	4605      	mov	r5, r0
 800334c:	d005      	beq.n	800335a <_strtod_l+0x72>
 800334e:	2f06      	cmp	r7, #6
 8003350:	d128      	bne.n	80033a4 <_strtod_l+0xbc>
 8003352:	2300      	movs	r3, #0
 8003354:	3601      	adds	r6, #1
 8003356:	9619      	str	r6, [sp, #100]	; 0x64
 8003358:	930e      	str	r3, [sp, #56]	; 0x38
 800335a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 85a0 	bne.w	8003ea2 <_strtod_l+0xbba>
 8003362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003364:	b1cb      	cbz	r3, 800339a <_strtod_l+0xb2>
 8003366:	4642      	mov	r2, r8
 8003368:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	b01f      	add	sp, #124	; 0x7c
 8003372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003376:	2920      	cmp	r1, #32
 8003378:	d1ce      	bne.n	8003318 <_strtod_l+0x30>
 800337a:	3201      	adds	r2, #1
 800337c:	e7c1      	b.n	8003302 <_strtod_l+0x1a>
 800337e:	292d      	cmp	r1, #45	; 0x2d
 8003380:	d1ca      	bne.n	8003318 <_strtod_l+0x30>
 8003382:	2101      	movs	r1, #1
 8003384:	910e      	str	r1, [sp, #56]	; 0x38
 8003386:	1c51      	adds	r1, r2, #1
 8003388:	9119      	str	r1, [sp, #100]	; 0x64
 800338a:	7852      	ldrb	r2, [r2, #1]
 800338c:	2a00      	cmp	r2, #0
 800338e:	d1c5      	bne.n	800331c <_strtod_l+0x34>
 8003390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003392:	9519      	str	r5, [sp, #100]	; 0x64
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 8582 	bne.w	8003e9e <_strtod_l+0xbb6>
 800339a:	4642      	mov	r2, r8
 800339c:	464b      	mov	r3, r9
 800339e:	e7e5      	b.n	800336c <_strtod_l+0x84>
 80033a0:	2100      	movs	r1, #0
 80033a2:	e7ef      	b.n	8003384 <_strtod_l+0x9c>
 80033a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80033a6:	b13a      	cbz	r2, 80033b8 <_strtod_l+0xd0>
 80033a8:	2135      	movs	r1, #53	; 0x35
 80033aa:	a81c      	add	r0, sp, #112	; 0x70
 80033ac:	f003 fc04 	bl	8006bb8 <__copybits>
 80033b0:	4620      	mov	r0, r4
 80033b2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80033b4:	f002 ffe8 	bl	8006388 <_Bfree>
 80033b8:	3f01      	subs	r7, #1
 80033ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80033bc:	2f04      	cmp	r7, #4
 80033be:	d806      	bhi.n	80033ce <_strtod_l+0xe6>
 80033c0:	e8df f007 	tbb	[pc, r7]
 80033c4:	201d0314 	.word	0x201d0314
 80033c8:	14          	.byte	0x14
 80033c9:	00          	.byte	0x00
 80033ca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80033ce:	05e9      	lsls	r1, r5, #23
 80033d0:	bf48      	it	mi
 80033d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80033d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80033da:	0d1b      	lsrs	r3, r3, #20
 80033dc:	051b      	lsls	r3, r3, #20
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1bb      	bne.n	800335a <_strtod_l+0x72>
 80033e2:	f001 fc4d 	bl	8004c80 <__errno>
 80033e6:	2322      	movs	r3, #34	; 0x22
 80033e8:	6003      	str	r3, [r0, #0]
 80033ea:	e7b6      	b.n	800335a <_strtod_l+0x72>
 80033ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80033f0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80033f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80033f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80033fc:	e7e7      	b.n	80033ce <_strtod_l+0xe6>
 80033fe:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8003574 <_strtod_l+0x28c>
 8003402:	e7e4      	b.n	80033ce <_strtod_l+0xe6>
 8003404:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003408:	f04f 38ff 	mov.w	r8, #4294967295
 800340c:	e7df      	b.n	80033ce <_strtod_l+0xe6>
 800340e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	9219      	str	r2, [sp, #100]	; 0x64
 8003414:	785b      	ldrb	r3, [r3, #1]
 8003416:	2b30      	cmp	r3, #48	; 0x30
 8003418:	d0f9      	beq.n	800340e <_strtod_l+0x126>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d09d      	beq.n	800335a <_strtod_l+0x72>
 800341e:	2301      	movs	r3, #1
 8003420:	f04f 0a00 	mov.w	sl, #0
 8003424:	220a      	movs	r2, #10
 8003426:	46d3      	mov	fp, sl
 8003428:	9305      	str	r3, [sp, #20]
 800342a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800342c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8003430:	930b      	str	r3, [sp, #44]	; 0x2c
 8003432:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003434:	7806      	ldrb	r6, [r0, #0]
 8003436:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800343a:	b2d9      	uxtb	r1, r3
 800343c:	2909      	cmp	r1, #9
 800343e:	d926      	bls.n	800348e <_strtod_l+0x1a6>
 8003440:	2201      	movs	r2, #1
 8003442:	494d      	ldr	r1, [pc, #308]	; (8003578 <_strtod_l+0x290>)
 8003444:	f001 fb64 	bl	8004b10 <strncmp>
 8003448:	2800      	cmp	r0, #0
 800344a:	d030      	beq.n	80034ae <_strtod_l+0x1c6>
 800344c:	2000      	movs	r0, #0
 800344e:	4632      	mov	r2, r6
 8003450:	4603      	mov	r3, r0
 8003452:	465e      	mov	r6, fp
 8003454:	9008      	str	r0, [sp, #32]
 8003456:	2a65      	cmp	r2, #101	; 0x65
 8003458:	d001      	beq.n	800345e <_strtod_l+0x176>
 800345a:	2a45      	cmp	r2, #69	; 0x45
 800345c:	d113      	bne.n	8003486 <_strtod_l+0x19e>
 800345e:	b91e      	cbnz	r6, 8003468 <_strtod_l+0x180>
 8003460:	9a05      	ldr	r2, [sp, #20]
 8003462:	4302      	orrs	r2, r0
 8003464:	d094      	beq.n	8003390 <_strtod_l+0xa8>
 8003466:	2600      	movs	r6, #0
 8003468:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800346a:	1c6a      	adds	r2, r5, #1
 800346c:	9219      	str	r2, [sp, #100]	; 0x64
 800346e:	786a      	ldrb	r2, [r5, #1]
 8003470:	2a2b      	cmp	r2, #43	; 0x2b
 8003472:	d074      	beq.n	800355e <_strtod_l+0x276>
 8003474:	2a2d      	cmp	r2, #45	; 0x2d
 8003476:	d078      	beq.n	800356a <_strtod_l+0x282>
 8003478:	f04f 0c00 	mov.w	ip, #0
 800347c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003480:	2909      	cmp	r1, #9
 8003482:	d97f      	bls.n	8003584 <_strtod_l+0x29c>
 8003484:	9519      	str	r5, [sp, #100]	; 0x64
 8003486:	2700      	movs	r7, #0
 8003488:	e09e      	b.n	80035c8 <_strtod_l+0x2e0>
 800348a:	2300      	movs	r3, #0
 800348c:	e7c8      	b.n	8003420 <_strtod_l+0x138>
 800348e:	f1bb 0f08 	cmp.w	fp, #8
 8003492:	bfd8      	it	le
 8003494:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8003496:	f100 0001 	add.w	r0, r0, #1
 800349a:	bfd6      	itet	le
 800349c:	fb02 3301 	mlale	r3, r2, r1, r3
 80034a0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80034a4:	930a      	strle	r3, [sp, #40]	; 0x28
 80034a6:	f10b 0b01 	add.w	fp, fp, #1
 80034aa:	9019      	str	r0, [sp, #100]	; 0x64
 80034ac:	e7c1      	b.n	8003432 <_strtod_l+0x14a>
 80034ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	9219      	str	r2, [sp, #100]	; 0x64
 80034b4:	785a      	ldrb	r2, [r3, #1]
 80034b6:	f1bb 0f00 	cmp.w	fp, #0
 80034ba:	d037      	beq.n	800352c <_strtod_l+0x244>
 80034bc:	465e      	mov	r6, fp
 80034be:	9008      	str	r0, [sp, #32]
 80034c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80034c4:	2b09      	cmp	r3, #9
 80034c6:	d912      	bls.n	80034ee <_strtod_l+0x206>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e7c4      	b.n	8003456 <_strtod_l+0x16e>
 80034cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80034ce:	3001      	adds	r0, #1
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	9219      	str	r2, [sp, #100]	; 0x64
 80034d4:	785a      	ldrb	r2, [r3, #1]
 80034d6:	2a30      	cmp	r2, #48	; 0x30
 80034d8:	d0f8      	beq.n	80034cc <_strtod_l+0x1e4>
 80034da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80034de:	2b08      	cmp	r3, #8
 80034e0:	f200 84e4 	bhi.w	8003eac <_strtod_l+0xbc4>
 80034e4:	9008      	str	r0, [sp, #32]
 80034e6:	2000      	movs	r0, #0
 80034e8:	4606      	mov	r6, r0
 80034ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80034ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80034ee:	3a30      	subs	r2, #48	; 0x30
 80034f0:	f100 0301 	add.w	r3, r0, #1
 80034f4:	d014      	beq.n	8003520 <_strtod_l+0x238>
 80034f6:	9908      	ldr	r1, [sp, #32]
 80034f8:	eb00 0c06 	add.w	ip, r0, r6
 80034fc:	4419      	add	r1, r3
 80034fe:	9108      	str	r1, [sp, #32]
 8003500:	4633      	mov	r3, r6
 8003502:	210a      	movs	r1, #10
 8003504:	4563      	cmp	r3, ip
 8003506:	d113      	bne.n	8003530 <_strtod_l+0x248>
 8003508:	1833      	adds	r3, r6, r0
 800350a:	2b08      	cmp	r3, #8
 800350c:	f106 0601 	add.w	r6, r6, #1
 8003510:	4406      	add	r6, r0
 8003512:	dc1a      	bgt.n	800354a <_strtod_l+0x262>
 8003514:	230a      	movs	r3, #10
 8003516:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003518:	fb03 2301 	mla	r3, r3, r1, r2
 800351c:	930a      	str	r3, [sp, #40]	; 0x28
 800351e:	2300      	movs	r3, #0
 8003520:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003522:	4618      	mov	r0, r3
 8003524:	1c51      	adds	r1, r2, #1
 8003526:	9119      	str	r1, [sp, #100]	; 0x64
 8003528:	7852      	ldrb	r2, [r2, #1]
 800352a:	e7c9      	b.n	80034c0 <_strtod_l+0x1d8>
 800352c:	4658      	mov	r0, fp
 800352e:	e7d2      	b.n	80034d6 <_strtod_l+0x1ee>
 8003530:	2b08      	cmp	r3, #8
 8003532:	f103 0301 	add.w	r3, r3, #1
 8003536:	dc03      	bgt.n	8003540 <_strtod_l+0x258>
 8003538:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800353a:	434f      	muls	r7, r1
 800353c:	970a      	str	r7, [sp, #40]	; 0x28
 800353e:	e7e1      	b.n	8003504 <_strtod_l+0x21c>
 8003540:	2b10      	cmp	r3, #16
 8003542:	bfd8      	it	le
 8003544:	fb01 fa0a 	mulle.w	sl, r1, sl
 8003548:	e7dc      	b.n	8003504 <_strtod_l+0x21c>
 800354a:	2e10      	cmp	r6, #16
 800354c:	bfdc      	itt	le
 800354e:	230a      	movle	r3, #10
 8003550:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8003554:	e7e3      	b.n	800351e <_strtod_l+0x236>
 8003556:	2300      	movs	r3, #0
 8003558:	9308      	str	r3, [sp, #32]
 800355a:	2301      	movs	r3, #1
 800355c:	e780      	b.n	8003460 <_strtod_l+0x178>
 800355e:	f04f 0c00 	mov.w	ip, #0
 8003562:	1caa      	adds	r2, r5, #2
 8003564:	9219      	str	r2, [sp, #100]	; 0x64
 8003566:	78aa      	ldrb	r2, [r5, #2]
 8003568:	e788      	b.n	800347c <_strtod_l+0x194>
 800356a:	f04f 0c01 	mov.w	ip, #1
 800356e:	e7f8      	b.n	8003562 <_strtod_l+0x27a>
 8003570:	08007944 	.word	0x08007944
 8003574:	7ff00000 	.word	0x7ff00000
 8003578:	08007942 	.word	0x08007942
 800357c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800357e:	1c51      	adds	r1, r2, #1
 8003580:	9119      	str	r1, [sp, #100]	; 0x64
 8003582:	7852      	ldrb	r2, [r2, #1]
 8003584:	2a30      	cmp	r2, #48	; 0x30
 8003586:	d0f9      	beq.n	800357c <_strtod_l+0x294>
 8003588:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800358c:	2908      	cmp	r1, #8
 800358e:	f63f af7a 	bhi.w	8003486 <_strtod_l+0x19e>
 8003592:	3a30      	subs	r2, #48	; 0x30
 8003594:	9209      	str	r2, [sp, #36]	; 0x24
 8003596:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003598:	920c      	str	r2, [sp, #48]	; 0x30
 800359a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800359c:	1c57      	adds	r7, r2, #1
 800359e:	9719      	str	r7, [sp, #100]	; 0x64
 80035a0:	7852      	ldrb	r2, [r2, #1]
 80035a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80035a6:	f1be 0f09 	cmp.w	lr, #9
 80035aa:	d938      	bls.n	800361e <_strtod_l+0x336>
 80035ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80035ae:	1a7f      	subs	r7, r7, r1
 80035b0:	2f08      	cmp	r7, #8
 80035b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80035b6:	dc03      	bgt.n	80035c0 <_strtod_l+0x2d8>
 80035b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035ba:	428f      	cmp	r7, r1
 80035bc:	bfa8      	it	ge
 80035be:	460f      	movge	r7, r1
 80035c0:	f1bc 0f00 	cmp.w	ip, #0
 80035c4:	d000      	beq.n	80035c8 <_strtod_l+0x2e0>
 80035c6:	427f      	negs	r7, r7
 80035c8:	2e00      	cmp	r6, #0
 80035ca:	d14f      	bne.n	800366c <_strtod_l+0x384>
 80035cc:	9905      	ldr	r1, [sp, #20]
 80035ce:	4301      	orrs	r1, r0
 80035d0:	f47f aec3 	bne.w	800335a <_strtod_l+0x72>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f47f aedb 	bne.w	8003390 <_strtod_l+0xa8>
 80035da:	2a69      	cmp	r2, #105	; 0x69
 80035dc:	d029      	beq.n	8003632 <_strtod_l+0x34a>
 80035de:	dc26      	bgt.n	800362e <_strtod_l+0x346>
 80035e0:	2a49      	cmp	r2, #73	; 0x49
 80035e2:	d026      	beq.n	8003632 <_strtod_l+0x34a>
 80035e4:	2a4e      	cmp	r2, #78	; 0x4e
 80035e6:	f47f aed3 	bne.w	8003390 <_strtod_l+0xa8>
 80035ea:	499a      	ldr	r1, [pc, #616]	; (8003854 <_strtod_l+0x56c>)
 80035ec:	a819      	add	r0, sp, #100	; 0x64
 80035ee:	f002 fd15 	bl	800601c <__match>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	f43f aecc 	beq.w	8003390 <_strtod_l+0xa8>
 80035f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b28      	cmp	r3, #40	; 0x28
 80035fe:	d12f      	bne.n	8003660 <_strtod_l+0x378>
 8003600:	4995      	ldr	r1, [pc, #596]	; (8003858 <_strtod_l+0x570>)
 8003602:	aa1c      	add	r2, sp, #112	; 0x70
 8003604:	a819      	add	r0, sp, #100	; 0x64
 8003606:	f002 fd1d 	bl	8006044 <__hexnan>
 800360a:	2805      	cmp	r0, #5
 800360c:	d128      	bne.n	8003660 <_strtod_l+0x378>
 800360e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003610:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003614:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003618:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800361c:	e69d      	b.n	800335a <_strtod_l+0x72>
 800361e:	210a      	movs	r1, #10
 8003620:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003622:	fb01 2107 	mla	r1, r1, r7, r2
 8003626:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800362a:	9209      	str	r2, [sp, #36]	; 0x24
 800362c:	e7b5      	b.n	800359a <_strtod_l+0x2b2>
 800362e:	2a6e      	cmp	r2, #110	; 0x6e
 8003630:	e7d9      	b.n	80035e6 <_strtod_l+0x2fe>
 8003632:	498a      	ldr	r1, [pc, #552]	; (800385c <_strtod_l+0x574>)
 8003634:	a819      	add	r0, sp, #100	; 0x64
 8003636:	f002 fcf1 	bl	800601c <__match>
 800363a:	2800      	cmp	r0, #0
 800363c:	f43f aea8 	beq.w	8003390 <_strtod_l+0xa8>
 8003640:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003642:	4987      	ldr	r1, [pc, #540]	; (8003860 <_strtod_l+0x578>)
 8003644:	3b01      	subs	r3, #1
 8003646:	a819      	add	r0, sp, #100	; 0x64
 8003648:	9319      	str	r3, [sp, #100]	; 0x64
 800364a:	f002 fce7 	bl	800601c <__match>
 800364e:	b910      	cbnz	r0, 8003656 <_strtod_l+0x36e>
 8003650:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003652:	3301      	adds	r3, #1
 8003654:	9319      	str	r3, [sp, #100]	; 0x64
 8003656:	f04f 0800 	mov.w	r8, #0
 800365a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8003864 <_strtod_l+0x57c>
 800365e:	e67c      	b.n	800335a <_strtod_l+0x72>
 8003660:	4881      	ldr	r0, [pc, #516]	; (8003868 <_strtod_l+0x580>)
 8003662:	f001 fb57 	bl	8004d14 <nan>
 8003666:	4680      	mov	r8, r0
 8003668:	4689      	mov	r9, r1
 800366a:	e676      	b.n	800335a <_strtod_l+0x72>
 800366c:	9b08      	ldr	r3, [sp, #32]
 800366e:	f1bb 0f00 	cmp.w	fp, #0
 8003672:	bf08      	it	eq
 8003674:	46b3      	moveq	fp, r6
 8003676:	1afb      	subs	r3, r7, r3
 8003678:	2e10      	cmp	r6, #16
 800367a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800367c:	4635      	mov	r5, r6
 800367e:	9309      	str	r3, [sp, #36]	; 0x24
 8003680:	bfa8      	it	ge
 8003682:	2510      	movge	r5, #16
 8003684:	f7fc feb8 	bl	80003f8 <__aeabi_ui2d>
 8003688:	2e09      	cmp	r6, #9
 800368a:	4680      	mov	r8, r0
 800368c:	4689      	mov	r9, r1
 800368e:	dd13      	ble.n	80036b8 <_strtod_l+0x3d0>
 8003690:	4b76      	ldr	r3, [pc, #472]	; (800386c <_strtod_l+0x584>)
 8003692:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003696:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800369a:	f7fc ff27 	bl	80004ec <__aeabi_dmul>
 800369e:	4680      	mov	r8, r0
 80036a0:	4650      	mov	r0, sl
 80036a2:	4689      	mov	r9, r1
 80036a4:	f7fc fea8 	bl	80003f8 <__aeabi_ui2d>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4640      	mov	r0, r8
 80036ae:	4649      	mov	r1, r9
 80036b0:	f7fc fd66 	bl	8000180 <__adddf3>
 80036b4:	4680      	mov	r8, r0
 80036b6:	4689      	mov	r9, r1
 80036b8:	2e0f      	cmp	r6, #15
 80036ba:	dc36      	bgt.n	800372a <_strtod_l+0x442>
 80036bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f43f ae4b 	beq.w	800335a <_strtod_l+0x72>
 80036c4:	dd22      	ble.n	800370c <_strtod_l+0x424>
 80036c6:	2b16      	cmp	r3, #22
 80036c8:	dc09      	bgt.n	80036de <_strtod_l+0x3f6>
 80036ca:	4968      	ldr	r1, [pc, #416]	; (800386c <_strtod_l+0x584>)
 80036cc:	4642      	mov	r2, r8
 80036ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80036d2:	464b      	mov	r3, r9
 80036d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036d8:	f7fc ff08 	bl	80004ec <__aeabi_dmul>
 80036dc:	e7c3      	b.n	8003666 <_strtod_l+0x37e>
 80036de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036e0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80036e4:	4293      	cmp	r3, r2
 80036e6:	db20      	blt.n	800372a <_strtod_l+0x442>
 80036e8:	4c60      	ldr	r4, [pc, #384]	; (800386c <_strtod_l+0x584>)
 80036ea:	f1c6 060f 	rsb	r6, r6, #15
 80036ee:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80036f2:	4642      	mov	r2, r8
 80036f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036f8:	464b      	mov	r3, r9
 80036fa:	f7fc fef7 	bl	80004ec <__aeabi_dmul>
 80036fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003700:	1b9e      	subs	r6, r3, r6
 8003702:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8003706:	e9d4 2300 	ldrd	r2, r3, [r4]
 800370a:	e7e5      	b.n	80036d8 <_strtod_l+0x3f0>
 800370c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800370e:	3316      	adds	r3, #22
 8003710:	db0b      	blt.n	800372a <_strtod_l+0x442>
 8003712:	9b08      	ldr	r3, [sp, #32]
 8003714:	4640      	mov	r0, r8
 8003716:	1bdf      	subs	r7, r3, r7
 8003718:	4b54      	ldr	r3, [pc, #336]	; (800386c <_strtod_l+0x584>)
 800371a:	4649      	mov	r1, r9
 800371c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003724:	f7fd f80c 	bl	8000740 <__aeabi_ddiv>
 8003728:	e79d      	b.n	8003666 <_strtod_l+0x37e>
 800372a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800372c:	1b75      	subs	r5, r6, r5
 800372e:	441d      	add	r5, r3
 8003730:	2d00      	cmp	r5, #0
 8003732:	dd70      	ble.n	8003816 <_strtod_l+0x52e>
 8003734:	f015 030f 	ands.w	r3, r5, #15
 8003738:	d00a      	beq.n	8003750 <_strtod_l+0x468>
 800373a:	494c      	ldr	r1, [pc, #304]	; (800386c <_strtod_l+0x584>)
 800373c:	4642      	mov	r2, r8
 800373e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003742:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003746:	464b      	mov	r3, r9
 8003748:	f7fc fed0 	bl	80004ec <__aeabi_dmul>
 800374c:	4680      	mov	r8, r0
 800374e:	4689      	mov	r9, r1
 8003750:	f035 050f 	bics.w	r5, r5, #15
 8003754:	d04d      	beq.n	80037f2 <_strtod_l+0x50a>
 8003756:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800375a:	dd22      	ble.n	80037a2 <_strtod_l+0x4ba>
 800375c:	2600      	movs	r6, #0
 800375e:	46b3      	mov	fp, r6
 8003760:	960b      	str	r6, [sp, #44]	; 0x2c
 8003762:	9608      	str	r6, [sp, #32]
 8003764:	2322      	movs	r3, #34	; 0x22
 8003766:	f04f 0800 	mov.w	r8, #0
 800376a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003864 <_strtod_l+0x57c>
 800376e:	6023      	str	r3, [r4, #0]
 8003770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003772:	2b00      	cmp	r3, #0
 8003774:	f43f adf1 	beq.w	800335a <_strtod_l+0x72>
 8003778:	4620      	mov	r0, r4
 800377a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800377c:	f002 fe04 	bl	8006388 <_Bfree>
 8003780:	4620      	mov	r0, r4
 8003782:	9908      	ldr	r1, [sp, #32]
 8003784:	f002 fe00 	bl	8006388 <_Bfree>
 8003788:	4659      	mov	r1, fp
 800378a:	4620      	mov	r0, r4
 800378c:	f002 fdfc 	bl	8006388 <_Bfree>
 8003790:	4620      	mov	r0, r4
 8003792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003794:	f002 fdf8 	bl	8006388 <_Bfree>
 8003798:	4631      	mov	r1, r6
 800379a:	4620      	mov	r0, r4
 800379c:	f002 fdf4 	bl	8006388 <_Bfree>
 80037a0:	e5db      	b.n	800335a <_strtod_l+0x72>
 80037a2:	4b33      	ldr	r3, [pc, #204]	; (8003870 <_strtod_l+0x588>)
 80037a4:	4640      	mov	r0, r8
 80037a6:	9305      	str	r3, [sp, #20]
 80037a8:	2300      	movs	r3, #0
 80037aa:	4649      	mov	r1, r9
 80037ac:	469a      	mov	sl, r3
 80037ae:	112d      	asrs	r5, r5, #4
 80037b0:	2d01      	cmp	r5, #1
 80037b2:	dc21      	bgt.n	80037f8 <_strtod_l+0x510>
 80037b4:	b10b      	cbz	r3, 80037ba <_strtod_l+0x4d2>
 80037b6:	4680      	mov	r8, r0
 80037b8:	4689      	mov	r9, r1
 80037ba:	492d      	ldr	r1, [pc, #180]	; (8003870 <_strtod_l+0x588>)
 80037bc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80037c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80037c4:	4642      	mov	r2, r8
 80037c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037ca:	464b      	mov	r3, r9
 80037cc:	f7fc fe8e 	bl	80004ec <__aeabi_dmul>
 80037d0:	4b24      	ldr	r3, [pc, #144]	; (8003864 <_strtod_l+0x57c>)
 80037d2:	460a      	mov	r2, r1
 80037d4:	400b      	ands	r3, r1
 80037d6:	4927      	ldr	r1, [pc, #156]	; (8003874 <_strtod_l+0x58c>)
 80037d8:	4680      	mov	r8, r0
 80037da:	428b      	cmp	r3, r1
 80037dc:	d8be      	bhi.n	800375c <_strtod_l+0x474>
 80037de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80037e2:	428b      	cmp	r3, r1
 80037e4:	bf86      	itte	hi
 80037e6:	f04f 38ff 	movhi.w	r8, #4294967295
 80037ea:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8003878 <_strtod_l+0x590>
 80037ee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80037f2:	2300      	movs	r3, #0
 80037f4:	9305      	str	r3, [sp, #20]
 80037f6:	e07b      	b.n	80038f0 <_strtod_l+0x608>
 80037f8:	07ea      	lsls	r2, r5, #31
 80037fa:	d505      	bpl.n	8003808 <_strtod_l+0x520>
 80037fc:	9b05      	ldr	r3, [sp, #20]
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fc fe73 	bl	80004ec <__aeabi_dmul>
 8003806:	2301      	movs	r3, #1
 8003808:	9a05      	ldr	r2, [sp, #20]
 800380a:	f10a 0a01 	add.w	sl, sl, #1
 800380e:	3208      	adds	r2, #8
 8003810:	106d      	asrs	r5, r5, #1
 8003812:	9205      	str	r2, [sp, #20]
 8003814:	e7cc      	b.n	80037b0 <_strtod_l+0x4c8>
 8003816:	d0ec      	beq.n	80037f2 <_strtod_l+0x50a>
 8003818:	426d      	negs	r5, r5
 800381a:	f015 020f 	ands.w	r2, r5, #15
 800381e:	d00a      	beq.n	8003836 <_strtod_l+0x54e>
 8003820:	4b12      	ldr	r3, [pc, #72]	; (800386c <_strtod_l+0x584>)
 8003822:	4640      	mov	r0, r8
 8003824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003828:	4649      	mov	r1, r9
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f7fc ff87 	bl	8000740 <__aeabi_ddiv>
 8003832:	4680      	mov	r8, r0
 8003834:	4689      	mov	r9, r1
 8003836:	112d      	asrs	r5, r5, #4
 8003838:	d0db      	beq.n	80037f2 <_strtod_l+0x50a>
 800383a:	2d1f      	cmp	r5, #31
 800383c:	dd1e      	ble.n	800387c <_strtod_l+0x594>
 800383e:	2600      	movs	r6, #0
 8003840:	46b3      	mov	fp, r6
 8003842:	960b      	str	r6, [sp, #44]	; 0x2c
 8003844:	9608      	str	r6, [sp, #32]
 8003846:	2322      	movs	r3, #34	; 0x22
 8003848:	f04f 0800 	mov.w	r8, #0
 800384c:	f04f 0900 	mov.w	r9, #0
 8003850:	6023      	str	r3, [r4, #0]
 8003852:	e78d      	b.n	8003770 <_strtod_l+0x488>
 8003854:	08007aa6 	.word	0x08007aa6
 8003858:	08007958 	.word	0x08007958
 800385c:	08007a9e 	.word	0x08007a9e
 8003860:	08007b85 	.word	0x08007b85
 8003864:	7ff00000 	.word	0x7ff00000
 8003868:	08007b81 	.word	0x08007b81
 800386c:	08007ce0 	.word	0x08007ce0
 8003870:	08007cb8 	.word	0x08007cb8
 8003874:	7ca00000 	.word	0x7ca00000
 8003878:	7fefffff 	.word	0x7fefffff
 800387c:	f015 0310 	ands.w	r3, r5, #16
 8003880:	bf18      	it	ne
 8003882:	236a      	movne	r3, #106	; 0x6a
 8003884:	4640      	mov	r0, r8
 8003886:	9305      	str	r3, [sp, #20]
 8003888:	4649      	mov	r1, r9
 800388a:	2300      	movs	r3, #0
 800388c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8003b58 <_strtod_l+0x870>
 8003890:	07ea      	lsls	r2, r5, #31
 8003892:	d504      	bpl.n	800389e <_strtod_l+0x5b6>
 8003894:	e9da 2300 	ldrd	r2, r3, [sl]
 8003898:	f7fc fe28 	bl	80004ec <__aeabi_dmul>
 800389c:	2301      	movs	r3, #1
 800389e:	106d      	asrs	r5, r5, #1
 80038a0:	f10a 0a08 	add.w	sl, sl, #8
 80038a4:	d1f4      	bne.n	8003890 <_strtod_l+0x5a8>
 80038a6:	b10b      	cbz	r3, 80038ac <_strtod_l+0x5c4>
 80038a8:	4680      	mov	r8, r0
 80038aa:	4689      	mov	r9, r1
 80038ac:	9b05      	ldr	r3, [sp, #20]
 80038ae:	b1bb      	cbz	r3, 80038e0 <_strtod_l+0x5f8>
 80038b0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80038b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	4649      	mov	r1, r9
 80038bc:	dd10      	ble.n	80038e0 <_strtod_l+0x5f8>
 80038be:	2b1f      	cmp	r3, #31
 80038c0:	f340 8128 	ble.w	8003b14 <_strtod_l+0x82c>
 80038c4:	2b34      	cmp	r3, #52	; 0x34
 80038c6:	bfd8      	it	le
 80038c8:	f04f 33ff 	movle.w	r3, #4294967295
 80038cc:	f04f 0800 	mov.w	r8, #0
 80038d0:	bfcf      	iteee	gt
 80038d2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80038d6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80038da:	4093      	lslle	r3, r2
 80038dc:	ea03 0901 	andle.w	r9, r3, r1
 80038e0:	2200      	movs	r2, #0
 80038e2:	2300      	movs	r3, #0
 80038e4:	4640      	mov	r0, r8
 80038e6:	4649      	mov	r1, r9
 80038e8:	f7fd f868 	bl	80009bc <__aeabi_dcmpeq>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d1a6      	bne.n	800383e <_strtod_l+0x556>
 80038f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038f2:	465a      	mov	r2, fp
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	4620      	mov	r0, r4
 80038f8:	4633      	mov	r3, r6
 80038fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038fc:	f002 fdac 	bl	8006458 <__s2b>
 8003900:	900b      	str	r0, [sp, #44]	; 0x2c
 8003902:	2800      	cmp	r0, #0
 8003904:	f43f af2a 	beq.w	800375c <_strtod_l+0x474>
 8003908:	2600      	movs	r6, #0
 800390a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800390c:	9b08      	ldr	r3, [sp, #32]
 800390e:	2a00      	cmp	r2, #0
 8003910:	eba3 0307 	sub.w	r3, r3, r7
 8003914:	bfa8      	it	ge
 8003916:	2300      	movge	r3, #0
 8003918:	46b3      	mov	fp, r6
 800391a:	9312      	str	r3, [sp, #72]	; 0x48
 800391c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003920:	9316      	str	r3, [sp, #88]	; 0x58
 8003922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003924:	4620      	mov	r0, r4
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	f002 fcee 	bl	8006308 <_Balloc>
 800392c:	9008      	str	r0, [sp, #32]
 800392e:	2800      	cmp	r0, #0
 8003930:	f43f af18 	beq.w	8003764 <_strtod_l+0x47c>
 8003934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003936:	300c      	adds	r0, #12
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	f103 010c 	add.w	r1, r3, #12
 800393e:	3202      	adds	r2, #2
 8003940:	0092      	lsls	r2, r2, #2
 8003942:	f001 f9d8 	bl	8004cf6 <memcpy>
 8003946:	ab1c      	add	r3, sp, #112	; 0x70
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	ab1b      	add	r3, sp, #108	; 0x6c
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	4642      	mov	r2, r8
 8003950:	464b      	mov	r3, r9
 8003952:	4620      	mov	r0, r4
 8003954:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8003958:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800395c:	f003 f8a8 	bl	8006ab0 <__d2b>
 8003960:	901a      	str	r0, [sp, #104]	; 0x68
 8003962:	2800      	cmp	r0, #0
 8003964:	f43f aefe 	beq.w	8003764 <_strtod_l+0x47c>
 8003968:	2101      	movs	r1, #1
 800396a:	4620      	mov	r0, r4
 800396c:	f002 fe0c 	bl	8006588 <__i2b>
 8003970:	4683      	mov	fp, r0
 8003972:	2800      	cmp	r0, #0
 8003974:	f43f aef6 	beq.w	8003764 <_strtod_l+0x47c>
 8003978:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800397a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800397c:	2f00      	cmp	r7, #0
 800397e:	bfab      	itete	ge
 8003980:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8003982:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003984:	eb07 0a03 	addge.w	sl, r7, r3
 8003988:	1bdd      	sublt	r5, r3, r7
 800398a:	9b05      	ldr	r3, [sp, #20]
 800398c:	bfa8      	it	ge
 800398e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8003990:	eba7 0703 	sub.w	r7, r7, r3
 8003994:	4417      	add	r7, r2
 8003996:	4b71      	ldr	r3, [pc, #452]	; (8003b5c <_strtod_l+0x874>)
 8003998:	f107 37ff 	add.w	r7, r7, #4294967295
 800399c:	bfb8      	it	lt
 800399e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80039a2:	429f      	cmp	r7, r3
 80039a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80039a8:	f280 80c7 	bge.w	8003b3a <_strtod_l+0x852>
 80039ac:	1bdb      	subs	r3, r3, r7
 80039ae:	2b1f      	cmp	r3, #31
 80039b0:	f04f 0101 	mov.w	r1, #1
 80039b4:	eba2 0203 	sub.w	r2, r2, r3
 80039b8:	f300 80b3 	bgt.w	8003b22 <_strtod_l+0x83a>
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80039c2:	2300      	movs	r3, #0
 80039c4:	9310      	str	r3, [sp, #64]	; 0x40
 80039c6:	eb0a 0702 	add.w	r7, sl, r2
 80039ca:	9b05      	ldr	r3, [sp, #20]
 80039cc:	45ba      	cmp	sl, r7
 80039ce:	4415      	add	r5, r2
 80039d0:	441d      	add	r5, r3
 80039d2:	4653      	mov	r3, sl
 80039d4:	bfa8      	it	ge
 80039d6:	463b      	movge	r3, r7
 80039d8:	42ab      	cmp	r3, r5
 80039da:	bfa8      	it	ge
 80039dc:	462b      	movge	r3, r5
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bfc2      	ittt	gt
 80039e2:	1aff      	subgt	r7, r7, r3
 80039e4:	1aed      	subgt	r5, r5, r3
 80039e6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80039ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	dd17      	ble.n	8003a20 <_strtod_l+0x738>
 80039f0:	4659      	mov	r1, fp
 80039f2:	461a      	mov	r2, r3
 80039f4:	4620      	mov	r0, r4
 80039f6:	f002 fe85 	bl	8006704 <__pow5mult>
 80039fa:	4683      	mov	fp, r0
 80039fc:	2800      	cmp	r0, #0
 80039fe:	f43f aeb1 	beq.w	8003764 <_strtod_l+0x47c>
 8003a02:	4601      	mov	r1, r0
 8003a04:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003a06:	4620      	mov	r0, r4
 8003a08:	f002 fdd4 	bl	80065b4 <__multiply>
 8003a0c:	900a      	str	r0, [sp, #40]	; 0x28
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	f43f aea8 	beq.w	8003764 <_strtod_l+0x47c>
 8003a14:	4620      	mov	r0, r4
 8003a16:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003a18:	f002 fcb6 	bl	8006388 <_Bfree>
 8003a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a20:	2f00      	cmp	r7, #0
 8003a22:	f300 808f 	bgt.w	8003b44 <_strtod_l+0x85c>
 8003a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	dd08      	ble.n	8003a3e <_strtod_l+0x756>
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003a30:	9908      	ldr	r1, [sp, #32]
 8003a32:	f002 fe67 	bl	8006704 <__pow5mult>
 8003a36:	9008      	str	r0, [sp, #32]
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	f43f ae93 	beq.w	8003764 <_strtod_l+0x47c>
 8003a3e:	2d00      	cmp	r5, #0
 8003a40:	dd08      	ble.n	8003a54 <_strtod_l+0x76c>
 8003a42:	462a      	mov	r2, r5
 8003a44:	4620      	mov	r0, r4
 8003a46:	9908      	ldr	r1, [sp, #32]
 8003a48:	f002 feb6 	bl	80067b8 <__lshift>
 8003a4c:	9008      	str	r0, [sp, #32]
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	f43f ae88 	beq.w	8003764 <_strtod_l+0x47c>
 8003a54:	f1ba 0f00 	cmp.w	sl, #0
 8003a58:	dd08      	ble.n	8003a6c <_strtod_l+0x784>
 8003a5a:	4659      	mov	r1, fp
 8003a5c:	4652      	mov	r2, sl
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f002 feaa 	bl	80067b8 <__lshift>
 8003a64:	4683      	mov	fp, r0
 8003a66:	2800      	cmp	r0, #0
 8003a68:	f43f ae7c 	beq.w	8003764 <_strtod_l+0x47c>
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	9a08      	ldr	r2, [sp, #32]
 8003a70:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003a72:	f002 ff29 	bl	80068c8 <__mdiff>
 8003a76:	4606      	mov	r6, r0
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	f43f ae73 	beq.w	8003764 <_strtod_l+0x47c>
 8003a7e:	2500      	movs	r5, #0
 8003a80:	68c3      	ldr	r3, [r0, #12]
 8003a82:	4659      	mov	r1, fp
 8003a84:	60c5      	str	r5, [r0, #12]
 8003a86:	930a      	str	r3, [sp, #40]	; 0x28
 8003a88:	f002 ff02 	bl	8006890 <__mcmp>
 8003a8c:	42a8      	cmp	r0, r5
 8003a8e:	da6b      	bge.n	8003b68 <_strtod_l+0x880>
 8003a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a92:	ea53 0308 	orrs.w	r3, r3, r8
 8003a96:	f040 808f 	bne.w	8003bb8 <_strtod_l+0x8d0>
 8003a9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 808a 	bne.w	8003bb8 <_strtod_l+0x8d0>
 8003aa4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003aa8:	0d1b      	lsrs	r3, r3, #20
 8003aaa:	051b      	lsls	r3, r3, #20
 8003aac:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003ab0:	f240 8082 	bls.w	8003bb8 <_strtod_l+0x8d0>
 8003ab4:	6973      	ldr	r3, [r6, #20]
 8003ab6:	b913      	cbnz	r3, 8003abe <_strtod_l+0x7d6>
 8003ab8:	6933      	ldr	r3, [r6, #16]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	dd7c      	ble.n	8003bb8 <_strtod_l+0x8d0>
 8003abe:	4631      	mov	r1, r6
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f002 fe78 	bl	80067b8 <__lshift>
 8003ac8:	4659      	mov	r1, fp
 8003aca:	4606      	mov	r6, r0
 8003acc:	f002 fee0 	bl	8006890 <__mcmp>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	dd71      	ble.n	8003bb8 <_strtod_l+0x8d0>
 8003ad4:	9905      	ldr	r1, [sp, #20]
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	4a21      	ldr	r2, [pc, #132]	; (8003b60 <_strtod_l+0x878>)
 8003ada:	2900      	cmp	r1, #0
 8003adc:	f000 808d 	beq.w	8003bfa <_strtod_l+0x912>
 8003ae0:	ea02 0109 	and.w	r1, r2, r9
 8003ae4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003ae8:	f300 8087 	bgt.w	8003bfa <_strtod_l+0x912>
 8003aec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003af0:	f77f aea9 	ble.w	8003846 <_strtod_l+0x55e>
 8003af4:	4640      	mov	r0, r8
 8003af6:	4649      	mov	r1, r9
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <_strtod_l+0x87c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	f7fc fcf6 	bl	80004ec <__aeabi_dmul>
 8003b00:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <_strtod_l+0x878>)
 8003b02:	4680      	mov	r8, r0
 8003b04:	400b      	ands	r3, r1
 8003b06:	4689      	mov	r9, r1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f47f ae35 	bne.w	8003778 <_strtod_l+0x490>
 8003b0e:	2322      	movs	r3, #34	; 0x22
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	e631      	b.n	8003778 <_strtod_l+0x490>
 8003b14:	f04f 32ff 	mov.w	r2, #4294967295
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	ea03 0808 	and.w	r8, r3, r8
 8003b20:	e6de      	b.n	80038e0 <_strtod_l+0x5f8>
 8003b22:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8003b26:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8003b2a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8003b2e:	37e2      	adds	r7, #226	; 0xe2
 8003b30:	fa01 f307 	lsl.w	r3, r1, r7
 8003b34:	9310      	str	r3, [sp, #64]	; 0x40
 8003b36:	9113      	str	r1, [sp, #76]	; 0x4c
 8003b38:	e745      	b.n	80039c6 <_strtod_l+0x6de>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	9310      	str	r3, [sp, #64]	; 0x40
 8003b3e:	2301      	movs	r3, #1
 8003b40:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b42:	e740      	b.n	80039c6 <_strtod_l+0x6de>
 8003b44:	463a      	mov	r2, r7
 8003b46:	4620      	mov	r0, r4
 8003b48:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003b4a:	f002 fe35 	bl	80067b8 <__lshift>
 8003b4e:	901a      	str	r0, [sp, #104]	; 0x68
 8003b50:	2800      	cmp	r0, #0
 8003b52:	f47f af68 	bne.w	8003a26 <_strtod_l+0x73e>
 8003b56:	e605      	b.n	8003764 <_strtod_l+0x47c>
 8003b58:	08007970 	.word	0x08007970
 8003b5c:	fffffc02 	.word	0xfffffc02
 8003b60:	7ff00000 	.word	0x7ff00000
 8003b64:	39500000 	.word	0x39500000
 8003b68:	46ca      	mov	sl, r9
 8003b6a:	d165      	bne.n	8003c38 <_strtod_l+0x950>
 8003b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003b72:	b352      	cbz	r2, 8003bca <_strtod_l+0x8e2>
 8003b74:	4a9e      	ldr	r2, [pc, #632]	; (8003df0 <_strtod_l+0xb08>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d12a      	bne.n	8003bd0 <_strtod_l+0x8e8>
 8003b7a:	9b05      	ldr	r3, [sp, #20]
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	b1fb      	cbz	r3, 8003bc0 <_strtod_l+0x8d8>
 8003b80:	4b9c      	ldr	r3, [pc, #624]	; (8003df4 <_strtod_l+0xb0c>)
 8003b82:	f04f 32ff 	mov.w	r2, #4294967295
 8003b86:	ea09 0303 	and.w	r3, r9, r3
 8003b8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003b8e:	d81a      	bhi.n	8003bc6 <_strtod_l+0x8de>
 8003b90:	0d1b      	lsrs	r3, r3, #20
 8003b92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	4299      	cmp	r1, r3
 8003b9c:	d118      	bne.n	8003bd0 <_strtod_l+0x8e8>
 8003b9e:	4b96      	ldr	r3, [pc, #600]	; (8003df8 <_strtod_l+0xb10>)
 8003ba0:	459a      	cmp	sl, r3
 8003ba2:	d102      	bne.n	8003baa <_strtod_l+0x8c2>
 8003ba4:	3101      	adds	r1, #1
 8003ba6:	f43f addd 	beq.w	8003764 <_strtod_l+0x47c>
 8003baa:	f04f 0800 	mov.w	r8, #0
 8003bae:	4b91      	ldr	r3, [pc, #580]	; (8003df4 <_strtod_l+0xb0c>)
 8003bb0:	ea0a 0303 	and.w	r3, sl, r3
 8003bb4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8003bb8:	9b05      	ldr	r3, [sp, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d19a      	bne.n	8003af4 <_strtod_l+0x80c>
 8003bbe:	e5db      	b.n	8003778 <_strtod_l+0x490>
 8003bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc4:	e7e9      	b.n	8003b9a <_strtod_l+0x8b2>
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	e7e7      	b.n	8003b9a <_strtod_l+0x8b2>
 8003bca:	ea53 0308 	orrs.w	r3, r3, r8
 8003bce:	d081      	beq.n	8003ad4 <_strtod_l+0x7ec>
 8003bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003bd2:	b1e3      	cbz	r3, 8003c0e <_strtod_l+0x926>
 8003bd4:	ea13 0f0a 	tst.w	r3, sl
 8003bd8:	d0ee      	beq.n	8003bb8 <_strtod_l+0x8d0>
 8003bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bdc:	4640      	mov	r0, r8
 8003bde:	4649      	mov	r1, r9
 8003be0:	9a05      	ldr	r2, [sp, #20]
 8003be2:	b1c3      	cbz	r3, 8003c16 <_strtod_l+0x92e>
 8003be4:	f7ff fb5f 	bl	80032a6 <sulp>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003bee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003bf0:	f7fc fac6 	bl	8000180 <__adddf3>
 8003bf4:	4680      	mov	r8, r0
 8003bf6:	4689      	mov	r9, r1
 8003bf8:	e7de      	b.n	8003bb8 <_strtod_l+0x8d0>
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003c00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8003c04:	f04f 38ff 	mov.w	r8, #4294967295
 8003c08:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8003c0c:	e7d4      	b.n	8003bb8 <_strtod_l+0x8d0>
 8003c0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c10:	ea13 0f08 	tst.w	r3, r8
 8003c14:	e7e0      	b.n	8003bd8 <_strtod_l+0x8f0>
 8003c16:	f7ff fb46 	bl	80032a6 <sulp>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003c20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003c22:	f7fc faab 	bl	800017c <__aeabi_dsub>
 8003c26:	2200      	movs	r2, #0
 8003c28:	2300      	movs	r3, #0
 8003c2a:	4680      	mov	r8, r0
 8003c2c:	4689      	mov	r9, r1
 8003c2e:	f7fc fec5 	bl	80009bc <__aeabi_dcmpeq>
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d0c0      	beq.n	8003bb8 <_strtod_l+0x8d0>
 8003c36:	e606      	b.n	8003846 <_strtod_l+0x55e>
 8003c38:	4659      	mov	r1, fp
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	f002 ff8e 	bl	8006b5c <__ratio>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c4e:	f7fc fec9 	bl	80009e4 <__aeabi_dcmple>
 8003c52:	2800      	cmp	r0, #0
 8003c54:	d06f      	beq.n	8003d36 <_strtod_l+0xa4e>
 8003c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d17c      	bne.n	8003d56 <_strtod_l+0xa6e>
 8003c5c:	f1b8 0f00 	cmp.w	r8, #0
 8003c60:	d159      	bne.n	8003d16 <_strtod_l+0xa2e>
 8003c62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d17b      	bne.n	8003d62 <_strtod_l+0xa7a>
 8003c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c6e:	2200      	movs	r2, #0
 8003c70:	4b62      	ldr	r3, [pc, #392]	; (8003dfc <_strtod_l+0xb14>)
 8003c72:	f7fc fead 	bl	80009d0 <__aeabi_dcmplt>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d15a      	bne.n	8003d30 <_strtod_l+0xa48>
 8003c7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c7e:	2200      	movs	r2, #0
 8003c80:	4b5f      	ldr	r3, [pc, #380]	; (8003e00 <_strtod_l+0xb18>)
 8003c82:	f7fc fc33 	bl	80004ec <__aeabi_dmul>
 8003c86:	4605      	mov	r5, r0
 8003c88:	460f      	mov	r7, r1
 8003c8a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8003c8e:	9506      	str	r5, [sp, #24]
 8003c90:	9307      	str	r3, [sp, #28]
 8003c92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003c9a:	4b56      	ldr	r3, [pc, #344]	; (8003df4 <_strtod_l+0xb0c>)
 8003c9c:	4a55      	ldr	r2, [pc, #340]	; (8003df4 <_strtod_l+0xb0c>)
 8003c9e:	ea0a 0303 	and.w	r3, sl, r3
 8003ca2:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ca4:	4b57      	ldr	r3, [pc, #348]	; (8003e04 <_strtod_l+0xb1c>)
 8003ca6:	ea0a 0202 	and.w	r2, sl, r2
 8003caa:	429a      	cmp	r2, r3
 8003cac:	f040 80b0 	bne.w	8003e10 <_strtod_l+0xb28>
 8003cb0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8003cb4:	4640      	mov	r0, r8
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	f002 fe92 	bl	80069e0 <__ulp>
 8003cbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003cc0:	f7fc fc14 	bl	80004ec <__aeabi_dmul>
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	f7fc fa5a 	bl	8000180 <__adddf3>
 8003ccc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8003df4 <_strtod_l+0xb0c>
 8003cd0:	4a4d      	ldr	r2, [pc, #308]	; (8003e08 <_strtod_l+0xb20>)
 8003cd2:	ea01 0a0a 	and.w	sl, r1, sl
 8003cd6:	4592      	cmp	sl, r2
 8003cd8:	4680      	mov	r8, r0
 8003cda:	d948      	bls.n	8003d6e <_strtod_l+0xa86>
 8003cdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003cde:	4b46      	ldr	r3, [pc, #280]	; (8003df8 <_strtod_l+0xb10>)
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d103      	bne.n	8003cec <_strtod_l+0xa04>
 8003ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f43f ad3c 	beq.w	8003764 <_strtod_l+0x47c>
 8003cec:	f04f 38ff 	mov.w	r8, #4294967295
 8003cf0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8003df8 <_strtod_l+0xb10>
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003cf8:	f002 fb46 	bl	8006388 <_Bfree>
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	9908      	ldr	r1, [sp, #32]
 8003d00:	f002 fb42 	bl	8006388 <_Bfree>
 8003d04:	4659      	mov	r1, fp
 8003d06:	4620      	mov	r0, r4
 8003d08:	f002 fb3e 	bl	8006388 <_Bfree>
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f002 fb3a 	bl	8006388 <_Bfree>
 8003d14:	e605      	b.n	8003922 <_strtod_l+0x63a>
 8003d16:	f1b8 0f01 	cmp.w	r8, #1
 8003d1a:	d103      	bne.n	8003d24 <_strtod_l+0xa3c>
 8003d1c:	f1b9 0f00 	cmp.w	r9, #0
 8003d20:	f43f ad91 	beq.w	8003846 <_strtod_l+0x55e>
 8003d24:	2200      	movs	r2, #0
 8003d26:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <_strtod_l+0xb24>)
 8003d28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003d2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d2e:	e016      	b.n	8003d5e <_strtod_l+0xa76>
 8003d30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003d32:	4f33      	ldr	r7, [pc, #204]	; (8003e00 <_strtod_l+0xb18>)
 8003d34:	e7a9      	b.n	8003c8a <_strtod_l+0x9a2>
 8003d36:	4b32      	ldr	r3, [pc, #200]	; (8003e00 <_strtod_l+0xb18>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d3e:	f7fc fbd5 	bl	80004ec <__aeabi_dmul>
 8003d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d44:	4605      	mov	r5, r0
 8003d46:	460f      	mov	r7, r1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d09e      	beq.n	8003c8a <_strtod_l+0x9a2>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d54:	e79d      	b.n	8003c92 <_strtod_l+0x9aa>
 8003d56:	2200      	movs	r2, #0
 8003d58:	4b28      	ldr	r3, [pc, #160]	; (8003dfc <_strtod_l+0xb14>)
 8003d5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d5e:	4f27      	ldr	r7, [pc, #156]	; (8003dfc <_strtod_l+0xb14>)
 8003d60:	e797      	b.n	8003c92 <_strtod_l+0x9aa>
 8003d62:	2200      	movs	r2, #0
 8003d64:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <_strtod_l+0xb24>)
 8003d66:	4645      	mov	r5, r8
 8003d68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d6c:	e7f7      	b.n	8003d5e <_strtod_l+0xa76>
 8003d6e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8003d72:	9b05      	ldr	r3, [sp, #20]
 8003d74:	46ca      	mov	sl, r9
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1bc      	bne.n	8003cf4 <_strtod_l+0xa0c>
 8003d7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003d7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003d80:	0d1b      	lsrs	r3, r3, #20
 8003d82:	051b      	lsls	r3, r3, #20
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1b5      	bne.n	8003cf4 <_strtod_l+0xa0c>
 8003d88:	4628      	mov	r0, r5
 8003d8a:	4639      	mov	r1, r7
 8003d8c:	f7fc fea6 	bl	8000adc <__aeabi_d2lz>
 8003d90:	f7fc fb7e 	bl	8000490 <__aeabi_l2d>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4628      	mov	r0, r5
 8003d9a:	4639      	mov	r1, r7
 8003d9c:	f7fc f9ee 	bl	800017c <__aeabi_dsub>
 8003da0:	460b      	mov	r3, r1
 8003da2:	4602      	mov	r2, r0
 8003da4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8003da8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dae:	ea4a 0a08 	orr.w	sl, sl, r8
 8003db2:	ea5a 0a03 	orrs.w	sl, sl, r3
 8003db6:	d06c      	beq.n	8003e92 <_strtod_l+0xbaa>
 8003db8:	a309      	add	r3, pc, #36	; (adr r3, 8003de0 <_strtod_l+0xaf8>)
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f7fc fe07 	bl	80009d0 <__aeabi_dcmplt>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	f47f acd8 	bne.w	8003778 <_strtod_l+0x490>
 8003dc8:	a307      	add	r3, pc, #28	; (adr r3, 8003de8 <_strtod_l+0xb00>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003dd2:	f7fc fe1b 	bl	8000a0c <__aeabi_dcmpgt>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d08c      	beq.n	8003cf4 <_strtod_l+0xa0c>
 8003dda:	e4cd      	b.n	8003778 <_strtod_l+0x490>
 8003ddc:	f3af 8000 	nop.w
 8003de0:	94a03595 	.word	0x94a03595
 8003de4:	3fdfffff 	.word	0x3fdfffff
 8003de8:	35afe535 	.word	0x35afe535
 8003dec:	3fe00000 	.word	0x3fe00000
 8003df0:	000fffff 	.word	0x000fffff
 8003df4:	7ff00000 	.word	0x7ff00000
 8003df8:	7fefffff 	.word	0x7fefffff
 8003dfc:	3ff00000 	.word	0x3ff00000
 8003e00:	3fe00000 	.word	0x3fe00000
 8003e04:	7fe00000 	.word	0x7fe00000
 8003e08:	7c9fffff 	.word	0x7c9fffff
 8003e0c:	bff00000 	.word	0xbff00000
 8003e10:	9b05      	ldr	r3, [sp, #20]
 8003e12:	b333      	cbz	r3, 8003e62 <_strtod_l+0xb7a>
 8003e14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003e1a:	d822      	bhi.n	8003e62 <_strtod_l+0xb7a>
 8003e1c:	a328      	add	r3, pc, #160	; (adr r3, 8003ec0 <_strtod_l+0xbd8>)
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	4628      	mov	r0, r5
 8003e24:	4639      	mov	r1, r7
 8003e26:	f7fc fddd 	bl	80009e4 <__aeabi_dcmple>
 8003e2a:	b1a0      	cbz	r0, 8003e56 <_strtod_l+0xb6e>
 8003e2c:	4639      	mov	r1, r7
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f7fc fe34 	bl	8000a9c <__aeabi_d2uiz>
 8003e34:	2801      	cmp	r0, #1
 8003e36:	bf38      	it	cc
 8003e38:	2001      	movcc	r0, #1
 8003e3a:	f7fc fadd 	bl	80003f8 <__aeabi_ui2d>
 8003e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e40:	4605      	mov	r5, r0
 8003e42:	460f      	mov	r7, r1
 8003e44:	bb03      	cbnz	r3, 8003e88 <_strtod_l+0xba0>
 8003e46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e4a:	9014      	str	r0, [sp, #80]	; 0x50
 8003e4c:	9315      	str	r3, [sp, #84]	; 0x54
 8003e4e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003e52:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003e56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003e5a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	9311      	str	r3, [sp, #68]	; 0x44
 8003e62:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003e64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003e66:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8003e6a:	f002 fdb9 	bl	80069e0 <__ulp>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4640      	mov	r0, r8
 8003e74:	4649      	mov	r1, r9
 8003e76:	f7fc fb39 	bl	80004ec <__aeabi_dmul>
 8003e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e7e:	f7fc f97f 	bl	8000180 <__adddf3>
 8003e82:	4680      	mov	r8, r0
 8003e84:	4689      	mov	r9, r1
 8003e86:	e774      	b.n	8003d72 <_strtod_l+0xa8a>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003e90:	e7dd      	b.n	8003e4e <_strtod_l+0xb66>
 8003e92:	a30d      	add	r3, pc, #52	; (adr r3, 8003ec8 <_strtod_l+0xbe0>)
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f7fc fd9a 	bl	80009d0 <__aeabi_dcmplt>
 8003e9c:	e79b      	b.n	8003dd6 <_strtod_l+0xaee>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	930e      	str	r3, [sp, #56]	; 0x38
 8003ea2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ea4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	f7ff ba5b 	b.w	8003362 <_strtod_l+0x7a>
 8003eac:	2a65      	cmp	r2, #101	; 0x65
 8003eae:	f43f ab52 	beq.w	8003556 <_strtod_l+0x26e>
 8003eb2:	2a45      	cmp	r2, #69	; 0x45
 8003eb4:	f43f ab4f 	beq.w	8003556 <_strtod_l+0x26e>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f7ff bb87 	b.w	80035cc <_strtod_l+0x2e4>
 8003ebe:	bf00      	nop
 8003ec0:	ffc00000 	.word	0xffc00000
 8003ec4:	41dfffff 	.word	0x41dfffff
 8003ec8:	94a03595 	.word	0x94a03595
 8003ecc:	3fcfffff 	.word	0x3fcfffff

08003ed0 <strtod>:
 8003ed0:	460a      	mov	r2, r1
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	4802      	ldr	r0, [pc, #8]	; (8003ee0 <strtod+0x10>)
 8003ed6:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <strtod+0x14>)
 8003ed8:	6800      	ldr	r0, [r0, #0]
 8003eda:	f7ff ba05 	b.w	80032e8 <_strtod_l>
 8003ede:	bf00      	nop
 8003ee0:	200001d0 	.word	0x200001d0
 8003ee4:	20000018 	.word	0x20000018

08003ee8 <_strtol_l.constprop.0>:
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eee:	4686      	mov	lr, r0
 8003ef0:	4690      	mov	r8, r2
 8003ef2:	d001      	beq.n	8003ef8 <_strtol_l.constprop.0+0x10>
 8003ef4:	2b24      	cmp	r3, #36	; 0x24
 8003ef6:	d906      	bls.n	8003f06 <_strtol_l.constprop.0+0x1e>
 8003ef8:	f000 fec2 	bl	8004c80 <__errno>
 8003efc:	2316      	movs	r3, #22
 8003efe:	6003      	str	r3, [r0, #0]
 8003f00:	2000      	movs	r0, #0
 8003f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f06:	460d      	mov	r5, r1
 8003f08:	4835      	ldr	r0, [pc, #212]	; (8003fe0 <_strtol_l.constprop.0+0xf8>)
 8003f0a:	462a      	mov	r2, r5
 8003f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f10:	5d06      	ldrb	r6, [r0, r4]
 8003f12:	f016 0608 	ands.w	r6, r6, #8
 8003f16:	d1f8      	bne.n	8003f0a <_strtol_l.constprop.0+0x22>
 8003f18:	2c2d      	cmp	r4, #45	; 0x2d
 8003f1a:	d12e      	bne.n	8003f7a <_strtol_l.constprop.0+0x92>
 8003f1c:	2601      	movs	r6, #1
 8003f1e:	782c      	ldrb	r4, [r5, #0]
 8003f20:	1c95      	adds	r5, r2, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d057      	beq.n	8003fd6 <_strtol_l.constprop.0+0xee>
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d109      	bne.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003f2a:	2c30      	cmp	r4, #48	; 0x30
 8003f2c:	d107      	bne.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003f2e:	782a      	ldrb	r2, [r5, #0]
 8003f30:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003f34:	2a58      	cmp	r2, #88	; 0x58
 8003f36:	d149      	bne.n	8003fcc <_strtol_l.constprop.0+0xe4>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	786c      	ldrb	r4, [r5, #1]
 8003f3c:	3502      	adds	r5, #2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8003f44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003f48:	fbbc f9f3 	udiv	r9, ip, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	fb03 ca19 	mls	sl, r3, r9, ip
 8003f52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003f56:	2f09      	cmp	r7, #9
 8003f58:	d814      	bhi.n	8003f84 <_strtol_l.constprop.0+0x9c>
 8003f5a:	463c      	mov	r4, r7
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	dd20      	ble.n	8003fa2 <_strtol_l.constprop.0+0xba>
 8003f60:	1c57      	adds	r7, r2, #1
 8003f62:	d007      	beq.n	8003f74 <_strtol_l.constprop.0+0x8c>
 8003f64:	4581      	cmp	r9, r0
 8003f66:	d319      	bcc.n	8003f9c <_strtol_l.constprop.0+0xb4>
 8003f68:	d101      	bne.n	8003f6e <_strtol_l.constprop.0+0x86>
 8003f6a:	45a2      	cmp	sl, r4
 8003f6c:	db16      	blt.n	8003f9c <_strtol_l.constprop.0+0xb4>
 8003f6e:	2201      	movs	r2, #1
 8003f70:	fb00 4003 	mla	r0, r0, r3, r4
 8003f74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f78:	e7eb      	b.n	8003f52 <_strtol_l.constprop.0+0x6a>
 8003f7a:	2c2b      	cmp	r4, #43	; 0x2b
 8003f7c:	bf04      	itt	eq
 8003f7e:	782c      	ldrbeq	r4, [r5, #0]
 8003f80:	1c95      	addeq	r5, r2, #2
 8003f82:	e7ce      	b.n	8003f22 <_strtol_l.constprop.0+0x3a>
 8003f84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003f88:	2f19      	cmp	r7, #25
 8003f8a:	d801      	bhi.n	8003f90 <_strtol_l.constprop.0+0xa8>
 8003f8c:	3c37      	subs	r4, #55	; 0x37
 8003f8e:	e7e5      	b.n	8003f5c <_strtol_l.constprop.0+0x74>
 8003f90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003f94:	2f19      	cmp	r7, #25
 8003f96:	d804      	bhi.n	8003fa2 <_strtol_l.constprop.0+0xba>
 8003f98:	3c57      	subs	r4, #87	; 0x57
 8003f9a:	e7df      	b.n	8003f5c <_strtol_l.constprop.0+0x74>
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	e7e8      	b.n	8003f74 <_strtol_l.constprop.0+0x8c>
 8003fa2:	1c53      	adds	r3, r2, #1
 8003fa4:	d108      	bne.n	8003fb8 <_strtol_l.constprop.0+0xd0>
 8003fa6:	2322      	movs	r3, #34	; 0x22
 8003fa8:	4660      	mov	r0, ip
 8003faa:	f8ce 3000 	str.w	r3, [lr]
 8003fae:	f1b8 0f00 	cmp.w	r8, #0
 8003fb2:	d0a6      	beq.n	8003f02 <_strtol_l.constprop.0+0x1a>
 8003fb4:	1e69      	subs	r1, r5, #1
 8003fb6:	e006      	b.n	8003fc6 <_strtol_l.constprop.0+0xde>
 8003fb8:	b106      	cbz	r6, 8003fbc <_strtol_l.constprop.0+0xd4>
 8003fba:	4240      	negs	r0, r0
 8003fbc:	f1b8 0f00 	cmp.w	r8, #0
 8003fc0:	d09f      	beq.n	8003f02 <_strtol_l.constprop.0+0x1a>
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	d1f6      	bne.n	8003fb4 <_strtol_l.constprop.0+0xcc>
 8003fc6:	f8c8 1000 	str.w	r1, [r8]
 8003fca:	e79a      	b.n	8003f02 <_strtol_l.constprop.0+0x1a>
 8003fcc:	2430      	movs	r4, #48	; 0x30
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1b5      	bne.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	e7b3      	b.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003fd6:	2c30      	cmp	r4, #48	; 0x30
 8003fd8:	d0a9      	beq.n	8003f2e <_strtol_l.constprop.0+0x46>
 8003fda:	230a      	movs	r3, #10
 8003fdc:	e7af      	b.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003fde:	bf00      	nop
 8003fe0:	08007999 	.word	0x08007999

08003fe4 <strtol>:
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	460a      	mov	r2, r1
 8003fe8:	4601      	mov	r1, r0
 8003fea:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <strtol+0x10>)
 8003fec:	6800      	ldr	r0, [r0, #0]
 8003fee:	f7ff bf7b 	b.w	8003ee8 <_strtol_l.constprop.0>
 8003ff2:	bf00      	nop
 8003ff4:	200001d0 	.word	0x200001d0

08003ff8 <__cvt>:
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffe:	461f      	mov	r7, r3
 8004000:	bfbb      	ittet	lt
 8004002:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004006:	461f      	movlt	r7, r3
 8004008:	2300      	movge	r3, #0
 800400a:	232d      	movlt	r3, #45	; 0x2d
 800400c:	b088      	sub	sp, #32
 800400e:	4614      	mov	r4, r2
 8004010:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004012:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004014:	7013      	strb	r3, [r2, #0]
 8004016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004018:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800401c:	f023 0820 	bic.w	r8, r3, #32
 8004020:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004024:	d005      	beq.n	8004032 <__cvt+0x3a>
 8004026:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800402a:	d100      	bne.n	800402e <__cvt+0x36>
 800402c:	3501      	adds	r5, #1
 800402e:	2302      	movs	r3, #2
 8004030:	e000      	b.n	8004034 <__cvt+0x3c>
 8004032:	2303      	movs	r3, #3
 8004034:	aa07      	add	r2, sp, #28
 8004036:	9204      	str	r2, [sp, #16]
 8004038:	aa06      	add	r2, sp, #24
 800403a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800403e:	e9cd 3500 	strd	r3, r5, [sp]
 8004042:	4622      	mov	r2, r4
 8004044:	463b      	mov	r3, r7
 8004046:	f000 ff13 	bl	8004e70 <_dtoa_r>
 800404a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800404e:	4606      	mov	r6, r0
 8004050:	d102      	bne.n	8004058 <__cvt+0x60>
 8004052:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004054:	07db      	lsls	r3, r3, #31
 8004056:	d522      	bpl.n	800409e <__cvt+0xa6>
 8004058:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800405c:	eb06 0905 	add.w	r9, r6, r5
 8004060:	d110      	bne.n	8004084 <__cvt+0x8c>
 8004062:	7833      	ldrb	r3, [r6, #0]
 8004064:	2b30      	cmp	r3, #48	; 0x30
 8004066:	d10a      	bne.n	800407e <__cvt+0x86>
 8004068:	2200      	movs	r2, #0
 800406a:	2300      	movs	r3, #0
 800406c:	4620      	mov	r0, r4
 800406e:	4639      	mov	r1, r7
 8004070:	f7fc fca4 	bl	80009bc <__aeabi_dcmpeq>
 8004074:	b918      	cbnz	r0, 800407e <__cvt+0x86>
 8004076:	f1c5 0501 	rsb	r5, r5, #1
 800407a:	f8ca 5000 	str.w	r5, [sl]
 800407e:	f8da 3000 	ldr.w	r3, [sl]
 8004082:	4499      	add	r9, r3
 8004084:	2200      	movs	r2, #0
 8004086:	2300      	movs	r3, #0
 8004088:	4620      	mov	r0, r4
 800408a:	4639      	mov	r1, r7
 800408c:	f7fc fc96 	bl	80009bc <__aeabi_dcmpeq>
 8004090:	b108      	cbz	r0, 8004096 <__cvt+0x9e>
 8004092:	f8cd 901c 	str.w	r9, [sp, #28]
 8004096:	2230      	movs	r2, #48	; 0x30
 8004098:	9b07      	ldr	r3, [sp, #28]
 800409a:	454b      	cmp	r3, r9
 800409c:	d307      	bcc.n	80040ae <__cvt+0xb6>
 800409e:	4630      	mov	r0, r6
 80040a0:	9b07      	ldr	r3, [sp, #28]
 80040a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80040a4:	1b9b      	subs	r3, r3, r6
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	b008      	add	sp, #32
 80040aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ae:	1c59      	adds	r1, r3, #1
 80040b0:	9107      	str	r1, [sp, #28]
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e7f0      	b.n	8004098 <__cvt+0xa0>

080040b6 <__exponent>:
 80040b6:	4603      	mov	r3, r0
 80040b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ba:	2900      	cmp	r1, #0
 80040bc:	f803 2b02 	strb.w	r2, [r3], #2
 80040c0:	bfb6      	itet	lt
 80040c2:	222d      	movlt	r2, #45	; 0x2d
 80040c4:	222b      	movge	r2, #43	; 0x2b
 80040c6:	4249      	neglt	r1, r1
 80040c8:	2909      	cmp	r1, #9
 80040ca:	7042      	strb	r2, [r0, #1]
 80040cc:	dd2a      	ble.n	8004124 <__exponent+0x6e>
 80040ce:	f10d 0207 	add.w	r2, sp, #7
 80040d2:	4617      	mov	r7, r2
 80040d4:	260a      	movs	r6, #10
 80040d6:	fb91 f5f6 	sdiv	r5, r1, r6
 80040da:	4694      	mov	ip, r2
 80040dc:	fb06 1415 	mls	r4, r6, r5, r1
 80040e0:	3430      	adds	r4, #48	; 0x30
 80040e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80040e6:	460c      	mov	r4, r1
 80040e8:	2c63      	cmp	r4, #99	; 0x63
 80040ea:	4629      	mov	r1, r5
 80040ec:	f102 32ff 	add.w	r2, r2, #4294967295
 80040f0:	dcf1      	bgt.n	80040d6 <__exponent+0x20>
 80040f2:	3130      	adds	r1, #48	; 0x30
 80040f4:	f1ac 0402 	sub.w	r4, ip, #2
 80040f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80040fc:	4622      	mov	r2, r4
 80040fe:	1c41      	adds	r1, r0, #1
 8004100:	42ba      	cmp	r2, r7
 8004102:	d30a      	bcc.n	800411a <__exponent+0x64>
 8004104:	f10d 0209 	add.w	r2, sp, #9
 8004108:	eba2 020c 	sub.w	r2, r2, ip
 800410c:	42bc      	cmp	r4, r7
 800410e:	bf88      	it	hi
 8004110:	2200      	movhi	r2, #0
 8004112:	4413      	add	r3, r2
 8004114:	1a18      	subs	r0, r3, r0
 8004116:	b003      	add	sp, #12
 8004118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800411a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800411e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004122:	e7ed      	b.n	8004100 <__exponent+0x4a>
 8004124:	2330      	movs	r3, #48	; 0x30
 8004126:	3130      	adds	r1, #48	; 0x30
 8004128:	7083      	strb	r3, [r0, #2]
 800412a:	70c1      	strb	r1, [r0, #3]
 800412c:	1d03      	adds	r3, r0, #4
 800412e:	e7f1      	b.n	8004114 <__exponent+0x5e>

08004130 <_printf_float>:
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	b091      	sub	sp, #68	; 0x44
 8004136:	460c      	mov	r4, r1
 8004138:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800413c:	4616      	mov	r6, r2
 800413e:	461f      	mov	r7, r3
 8004140:	4605      	mov	r5, r0
 8004142:	f000 fd53 	bl	8004bec <_localeconv_r>
 8004146:	6803      	ldr	r3, [r0, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	9309      	str	r3, [sp, #36]	; 0x24
 800414c:	f7fc f80a 	bl	8000164 <strlen>
 8004150:	2300      	movs	r3, #0
 8004152:	930e      	str	r3, [sp, #56]	; 0x38
 8004154:	f8d8 3000 	ldr.w	r3, [r8]
 8004158:	900a      	str	r0, [sp, #40]	; 0x28
 800415a:	3307      	adds	r3, #7
 800415c:	f023 0307 	bic.w	r3, r3, #7
 8004160:	f103 0208 	add.w	r2, r3, #8
 8004164:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004168:	f8d4 b000 	ldr.w	fp, [r4]
 800416c:	f8c8 2000 	str.w	r2, [r8]
 8004170:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004174:	4652      	mov	r2, sl
 8004176:	4643      	mov	r3, r8
 8004178:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800417c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004180:	930b      	str	r3, [sp, #44]	; 0x2c
 8004182:	f04f 32ff 	mov.w	r2, #4294967295
 8004186:	4650      	mov	r0, sl
 8004188:	4b9c      	ldr	r3, [pc, #624]	; (80043fc <_printf_float+0x2cc>)
 800418a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800418c:	f7fc fc48 	bl	8000a20 <__aeabi_dcmpun>
 8004190:	bb70      	cbnz	r0, 80041f0 <_printf_float+0xc0>
 8004192:	f04f 32ff 	mov.w	r2, #4294967295
 8004196:	4650      	mov	r0, sl
 8004198:	4b98      	ldr	r3, [pc, #608]	; (80043fc <_printf_float+0x2cc>)
 800419a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800419c:	f7fc fc22 	bl	80009e4 <__aeabi_dcmple>
 80041a0:	bb30      	cbnz	r0, 80041f0 <_printf_float+0xc0>
 80041a2:	2200      	movs	r2, #0
 80041a4:	2300      	movs	r3, #0
 80041a6:	4650      	mov	r0, sl
 80041a8:	4641      	mov	r1, r8
 80041aa:	f7fc fc11 	bl	80009d0 <__aeabi_dcmplt>
 80041ae:	b110      	cbz	r0, 80041b6 <_printf_float+0x86>
 80041b0:	232d      	movs	r3, #45	; 0x2d
 80041b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b6:	4a92      	ldr	r2, [pc, #584]	; (8004400 <_printf_float+0x2d0>)
 80041b8:	4b92      	ldr	r3, [pc, #584]	; (8004404 <_printf_float+0x2d4>)
 80041ba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80041be:	bf94      	ite	ls
 80041c0:	4690      	movls	r8, r2
 80041c2:	4698      	movhi	r8, r3
 80041c4:	2303      	movs	r3, #3
 80041c6:	f04f 0a00 	mov.w	sl, #0
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	f02b 0304 	bic.w	r3, fp, #4
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	4633      	mov	r3, r6
 80041d4:	4621      	mov	r1, r4
 80041d6:	4628      	mov	r0, r5
 80041d8:	9700      	str	r7, [sp, #0]
 80041da:	aa0f      	add	r2, sp, #60	; 0x3c
 80041dc:	f000 f9d6 	bl	800458c <_printf_common>
 80041e0:	3001      	adds	r0, #1
 80041e2:	f040 8090 	bne.w	8004306 <_printf_float+0x1d6>
 80041e6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ea:	b011      	add	sp, #68	; 0x44
 80041ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f0:	4652      	mov	r2, sl
 80041f2:	4643      	mov	r3, r8
 80041f4:	4650      	mov	r0, sl
 80041f6:	4641      	mov	r1, r8
 80041f8:	f7fc fc12 	bl	8000a20 <__aeabi_dcmpun>
 80041fc:	b148      	cbz	r0, 8004212 <_printf_float+0xe2>
 80041fe:	f1b8 0f00 	cmp.w	r8, #0
 8004202:	bfb8      	it	lt
 8004204:	232d      	movlt	r3, #45	; 0x2d
 8004206:	4a80      	ldr	r2, [pc, #512]	; (8004408 <_printf_float+0x2d8>)
 8004208:	bfb8      	it	lt
 800420a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800420e:	4b7f      	ldr	r3, [pc, #508]	; (800440c <_printf_float+0x2dc>)
 8004210:	e7d3      	b.n	80041ba <_printf_float+0x8a>
 8004212:	6863      	ldr	r3, [r4, #4]
 8004214:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	d142      	bne.n	80042a2 <_printf_float+0x172>
 800421c:	2306      	movs	r3, #6
 800421e:	6063      	str	r3, [r4, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	9206      	str	r2, [sp, #24]
 8004224:	aa0e      	add	r2, sp, #56	; 0x38
 8004226:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800422a:	aa0d      	add	r2, sp, #52	; 0x34
 800422c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004230:	9203      	str	r2, [sp, #12]
 8004232:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004236:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800423a:	6023      	str	r3, [r4, #0]
 800423c:	6863      	ldr	r3, [r4, #4]
 800423e:	4652      	mov	r2, sl
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	4628      	mov	r0, r5
 8004244:	4643      	mov	r3, r8
 8004246:	910b      	str	r1, [sp, #44]	; 0x2c
 8004248:	f7ff fed6 	bl	8003ff8 <__cvt>
 800424c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800424e:	4680      	mov	r8, r0
 8004250:	2947      	cmp	r1, #71	; 0x47
 8004252:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004254:	d108      	bne.n	8004268 <_printf_float+0x138>
 8004256:	1cc8      	adds	r0, r1, #3
 8004258:	db02      	blt.n	8004260 <_printf_float+0x130>
 800425a:	6863      	ldr	r3, [r4, #4]
 800425c:	4299      	cmp	r1, r3
 800425e:	dd40      	ble.n	80042e2 <_printf_float+0x1b2>
 8004260:	f1a9 0902 	sub.w	r9, r9, #2
 8004264:	fa5f f989 	uxtb.w	r9, r9
 8004268:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800426c:	d81f      	bhi.n	80042ae <_printf_float+0x17e>
 800426e:	464a      	mov	r2, r9
 8004270:	3901      	subs	r1, #1
 8004272:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004276:	910d      	str	r1, [sp, #52]	; 0x34
 8004278:	f7ff ff1d 	bl	80040b6 <__exponent>
 800427c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800427e:	4682      	mov	sl, r0
 8004280:	1813      	adds	r3, r2, r0
 8004282:	2a01      	cmp	r2, #1
 8004284:	6123      	str	r3, [r4, #16]
 8004286:	dc02      	bgt.n	800428e <_printf_float+0x15e>
 8004288:	6822      	ldr	r2, [r4, #0]
 800428a:	07d2      	lsls	r2, r2, #31
 800428c:	d501      	bpl.n	8004292 <_printf_float+0x162>
 800428e:	3301      	adds	r3, #1
 8004290:	6123      	str	r3, [r4, #16]
 8004292:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004296:	2b00      	cmp	r3, #0
 8004298:	d09b      	beq.n	80041d2 <_printf_float+0xa2>
 800429a:	232d      	movs	r3, #45	; 0x2d
 800429c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a0:	e797      	b.n	80041d2 <_printf_float+0xa2>
 80042a2:	2947      	cmp	r1, #71	; 0x47
 80042a4:	d1bc      	bne.n	8004220 <_printf_float+0xf0>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1ba      	bne.n	8004220 <_printf_float+0xf0>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e7b7      	b.n	800421e <_printf_float+0xee>
 80042ae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80042b2:	d118      	bne.n	80042e6 <_printf_float+0x1b6>
 80042b4:	2900      	cmp	r1, #0
 80042b6:	6863      	ldr	r3, [r4, #4]
 80042b8:	dd0b      	ble.n	80042d2 <_printf_float+0x1a2>
 80042ba:	6121      	str	r1, [r4, #16]
 80042bc:	b913      	cbnz	r3, 80042c4 <_printf_float+0x194>
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	07d0      	lsls	r0, r2, #31
 80042c2:	d502      	bpl.n	80042ca <_printf_float+0x19a>
 80042c4:	3301      	adds	r3, #1
 80042c6:	440b      	add	r3, r1
 80042c8:	6123      	str	r3, [r4, #16]
 80042ca:	f04f 0a00 	mov.w	sl, #0
 80042ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80042d0:	e7df      	b.n	8004292 <_printf_float+0x162>
 80042d2:	b913      	cbnz	r3, 80042da <_printf_float+0x1aa>
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	07d2      	lsls	r2, r2, #31
 80042d8:	d501      	bpl.n	80042de <_printf_float+0x1ae>
 80042da:	3302      	adds	r3, #2
 80042dc:	e7f4      	b.n	80042c8 <_printf_float+0x198>
 80042de:	2301      	movs	r3, #1
 80042e0:	e7f2      	b.n	80042c8 <_printf_float+0x198>
 80042e2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80042e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e8:	4299      	cmp	r1, r3
 80042ea:	db05      	blt.n	80042f8 <_printf_float+0x1c8>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	6121      	str	r1, [r4, #16]
 80042f0:	07d8      	lsls	r0, r3, #31
 80042f2:	d5ea      	bpl.n	80042ca <_printf_float+0x19a>
 80042f4:	1c4b      	adds	r3, r1, #1
 80042f6:	e7e7      	b.n	80042c8 <_printf_float+0x198>
 80042f8:	2900      	cmp	r1, #0
 80042fa:	bfcc      	ite	gt
 80042fc:	2201      	movgt	r2, #1
 80042fe:	f1c1 0202 	rsble	r2, r1, #2
 8004302:	4413      	add	r3, r2
 8004304:	e7e0      	b.n	80042c8 <_printf_float+0x198>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	055a      	lsls	r2, r3, #21
 800430a:	d407      	bmi.n	800431c <_printf_float+0x1ec>
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	4642      	mov	r2, r8
 8004310:	4631      	mov	r1, r6
 8004312:	4628      	mov	r0, r5
 8004314:	47b8      	blx	r7
 8004316:	3001      	adds	r0, #1
 8004318:	d12b      	bne.n	8004372 <_printf_float+0x242>
 800431a:	e764      	b.n	80041e6 <_printf_float+0xb6>
 800431c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004320:	f240 80dd 	bls.w	80044de <_printf_float+0x3ae>
 8004324:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004328:	2200      	movs	r2, #0
 800432a:	2300      	movs	r3, #0
 800432c:	f7fc fb46 	bl	80009bc <__aeabi_dcmpeq>
 8004330:	2800      	cmp	r0, #0
 8004332:	d033      	beq.n	800439c <_printf_float+0x26c>
 8004334:	2301      	movs	r3, #1
 8004336:	4631      	mov	r1, r6
 8004338:	4628      	mov	r0, r5
 800433a:	4a35      	ldr	r2, [pc, #212]	; (8004410 <_printf_float+0x2e0>)
 800433c:	47b8      	blx	r7
 800433e:	3001      	adds	r0, #1
 8004340:	f43f af51 	beq.w	80041e6 <_printf_float+0xb6>
 8004344:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004348:	429a      	cmp	r2, r3
 800434a:	db02      	blt.n	8004352 <_printf_float+0x222>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	07d8      	lsls	r0, r3, #31
 8004350:	d50f      	bpl.n	8004372 <_printf_float+0x242>
 8004352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004356:	4631      	mov	r1, r6
 8004358:	4628      	mov	r0, r5
 800435a:	47b8      	blx	r7
 800435c:	3001      	adds	r0, #1
 800435e:	f43f af42 	beq.w	80041e6 <_printf_float+0xb6>
 8004362:	f04f 0800 	mov.w	r8, #0
 8004366:	f104 091a 	add.w	r9, r4, #26
 800436a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800436c:	3b01      	subs	r3, #1
 800436e:	4543      	cmp	r3, r8
 8004370:	dc09      	bgt.n	8004386 <_printf_float+0x256>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	079b      	lsls	r3, r3, #30
 8004376:	f100 8104 	bmi.w	8004582 <_printf_float+0x452>
 800437a:	68e0      	ldr	r0, [r4, #12]
 800437c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800437e:	4298      	cmp	r0, r3
 8004380:	bfb8      	it	lt
 8004382:	4618      	movlt	r0, r3
 8004384:	e731      	b.n	80041ea <_printf_float+0xba>
 8004386:	2301      	movs	r3, #1
 8004388:	464a      	mov	r2, r9
 800438a:	4631      	mov	r1, r6
 800438c:	4628      	mov	r0, r5
 800438e:	47b8      	blx	r7
 8004390:	3001      	adds	r0, #1
 8004392:	f43f af28 	beq.w	80041e6 <_printf_float+0xb6>
 8004396:	f108 0801 	add.w	r8, r8, #1
 800439a:	e7e6      	b.n	800436a <_printf_float+0x23a>
 800439c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800439e:	2b00      	cmp	r3, #0
 80043a0:	dc38      	bgt.n	8004414 <_printf_float+0x2e4>
 80043a2:	2301      	movs	r3, #1
 80043a4:	4631      	mov	r1, r6
 80043a6:	4628      	mov	r0, r5
 80043a8:	4a19      	ldr	r2, [pc, #100]	; (8004410 <_printf_float+0x2e0>)
 80043aa:	47b8      	blx	r7
 80043ac:	3001      	adds	r0, #1
 80043ae:	f43f af1a 	beq.w	80041e6 <_printf_float+0xb6>
 80043b2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d102      	bne.n	80043c0 <_printf_float+0x290>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	07d9      	lsls	r1, r3, #31
 80043be:	d5d8      	bpl.n	8004372 <_printf_float+0x242>
 80043c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043c4:	4631      	mov	r1, r6
 80043c6:	4628      	mov	r0, r5
 80043c8:	47b8      	blx	r7
 80043ca:	3001      	adds	r0, #1
 80043cc:	f43f af0b 	beq.w	80041e6 <_printf_float+0xb6>
 80043d0:	f04f 0900 	mov.w	r9, #0
 80043d4:	f104 0a1a 	add.w	sl, r4, #26
 80043d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043da:	425b      	negs	r3, r3
 80043dc:	454b      	cmp	r3, r9
 80043de:	dc01      	bgt.n	80043e4 <_printf_float+0x2b4>
 80043e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043e2:	e794      	b.n	800430e <_printf_float+0x1de>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4652      	mov	r2, sl
 80043e8:	4631      	mov	r1, r6
 80043ea:	4628      	mov	r0, r5
 80043ec:	47b8      	blx	r7
 80043ee:	3001      	adds	r0, #1
 80043f0:	f43f aef9 	beq.w	80041e6 <_printf_float+0xb6>
 80043f4:	f109 0901 	add.w	r9, r9, #1
 80043f8:	e7ee      	b.n	80043d8 <_printf_float+0x2a8>
 80043fa:	bf00      	nop
 80043fc:	7fefffff 	.word	0x7fefffff
 8004400:	08007a99 	.word	0x08007a99
 8004404:	08007a9d 	.word	0x08007a9d
 8004408:	08007aa1 	.word	0x08007aa1
 800440c:	08007aa5 	.word	0x08007aa5
 8004410:	08007aa9 	.word	0x08007aa9
 8004414:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004416:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004418:	429a      	cmp	r2, r3
 800441a:	bfa8      	it	ge
 800441c:	461a      	movge	r2, r3
 800441e:	2a00      	cmp	r2, #0
 8004420:	4691      	mov	r9, r2
 8004422:	dc37      	bgt.n	8004494 <_printf_float+0x364>
 8004424:	f04f 0b00 	mov.w	fp, #0
 8004428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800442c:	f104 021a 	add.w	r2, r4, #26
 8004430:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004434:	ebaa 0309 	sub.w	r3, sl, r9
 8004438:	455b      	cmp	r3, fp
 800443a:	dc33      	bgt.n	80044a4 <_printf_float+0x374>
 800443c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004440:	429a      	cmp	r2, r3
 8004442:	db3b      	blt.n	80044bc <_printf_float+0x38c>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	07da      	lsls	r2, r3, #31
 8004448:	d438      	bmi.n	80044bc <_printf_float+0x38c>
 800444a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800444e:	eba2 0903 	sub.w	r9, r2, r3
 8004452:	eba2 020a 	sub.w	r2, r2, sl
 8004456:	4591      	cmp	r9, r2
 8004458:	bfa8      	it	ge
 800445a:	4691      	movge	r9, r2
 800445c:	f1b9 0f00 	cmp.w	r9, #0
 8004460:	dc34      	bgt.n	80044cc <_printf_float+0x39c>
 8004462:	f04f 0800 	mov.w	r8, #0
 8004466:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800446a:	f104 0a1a 	add.w	sl, r4, #26
 800446e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	eba3 0309 	sub.w	r3, r3, r9
 8004478:	4543      	cmp	r3, r8
 800447a:	f77f af7a 	ble.w	8004372 <_printf_float+0x242>
 800447e:	2301      	movs	r3, #1
 8004480:	4652      	mov	r2, sl
 8004482:	4631      	mov	r1, r6
 8004484:	4628      	mov	r0, r5
 8004486:	47b8      	blx	r7
 8004488:	3001      	adds	r0, #1
 800448a:	f43f aeac 	beq.w	80041e6 <_printf_float+0xb6>
 800448e:	f108 0801 	add.w	r8, r8, #1
 8004492:	e7ec      	b.n	800446e <_printf_float+0x33e>
 8004494:	4613      	mov	r3, r2
 8004496:	4631      	mov	r1, r6
 8004498:	4642      	mov	r2, r8
 800449a:	4628      	mov	r0, r5
 800449c:	47b8      	blx	r7
 800449e:	3001      	adds	r0, #1
 80044a0:	d1c0      	bne.n	8004424 <_printf_float+0x2f4>
 80044a2:	e6a0      	b.n	80041e6 <_printf_float+0xb6>
 80044a4:	2301      	movs	r3, #1
 80044a6:	4631      	mov	r1, r6
 80044a8:	4628      	mov	r0, r5
 80044aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80044ac:	47b8      	blx	r7
 80044ae:	3001      	adds	r0, #1
 80044b0:	f43f ae99 	beq.w	80041e6 <_printf_float+0xb6>
 80044b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044b6:	f10b 0b01 	add.w	fp, fp, #1
 80044ba:	e7b9      	b.n	8004430 <_printf_float+0x300>
 80044bc:	4631      	mov	r1, r6
 80044be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044c2:	4628      	mov	r0, r5
 80044c4:	47b8      	blx	r7
 80044c6:	3001      	adds	r0, #1
 80044c8:	d1bf      	bne.n	800444a <_printf_float+0x31a>
 80044ca:	e68c      	b.n	80041e6 <_printf_float+0xb6>
 80044cc:	464b      	mov	r3, r9
 80044ce:	4631      	mov	r1, r6
 80044d0:	4628      	mov	r0, r5
 80044d2:	eb08 020a 	add.w	r2, r8, sl
 80044d6:	47b8      	blx	r7
 80044d8:	3001      	adds	r0, #1
 80044da:	d1c2      	bne.n	8004462 <_printf_float+0x332>
 80044dc:	e683      	b.n	80041e6 <_printf_float+0xb6>
 80044de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044e0:	2a01      	cmp	r2, #1
 80044e2:	dc01      	bgt.n	80044e8 <_printf_float+0x3b8>
 80044e4:	07db      	lsls	r3, r3, #31
 80044e6:	d539      	bpl.n	800455c <_printf_float+0x42c>
 80044e8:	2301      	movs	r3, #1
 80044ea:	4642      	mov	r2, r8
 80044ec:	4631      	mov	r1, r6
 80044ee:	4628      	mov	r0, r5
 80044f0:	47b8      	blx	r7
 80044f2:	3001      	adds	r0, #1
 80044f4:	f43f ae77 	beq.w	80041e6 <_printf_float+0xb6>
 80044f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044fc:	4631      	mov	r1, r6
 80044fe:	4628      	mov	r0, r5
 8004500:	47b8      	blx	r7
 8004502:	3001      	adds	r0, #1
 8004504:	f43f ae6f 	beq.w	80041e6 <_printf_float+0xb6>
 8004508:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800450c:	2200      	movs	r2, #0
 800450e:	2300      	movs	r3, #0
 8004510:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004514:	f7fc fa52 	bl	80009bc <__aeabi_dcmpeq>
 8004518:	b9d8      	cbnz	r0, 8004552 <_printf_float+0x422>
 800451a:	f109 33ff 	add.w	r3, r9, #4294967295
 800451e:	f108 0201 	add.w	r2, r8, #1
 8004522:	4631      	mov	r1, r6
 8004524:	4628      	mov	r0, r5
 8004526:	47b8      	blx	r7
 8004528:	3001      	adds	r0, #1
 800452a:	d10e      	bne.n	800454a <_printf_float+0x41a>
 800452c:	e65b      	b.n	80041e6 <_printf_float+0xb6>
 800452e:	2301      	movs	r3, #1
 8004530:	464a      	mov	r2, r9
 8004532:	4631      	mov	r1, r6
 8004534:	4628      	mov	r0, r5
 8004536:	47b8      	blx	r7
 8004538:	3001      	adds	r0, #1
 800453a:	f43f ae54 	beq.w	80041e6 <_printf_float+0xb6>
 800453e:	f108 0801 	add.w	r8, r8, #1
 8004542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004544:	3b01      	subs	r3, #1
 8004546:	4543      	cmp	r3, r8
 8004548:	dcf1      	bgt.n	800452e <_printf_float+0x3fe>
 800454a:	4653      	mov	r3, sl
 800454c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004550:	e6de      	b.n	8004310 <_printf_float+0x1e0>
 8004552:	f04f 0800 	mov.w	r8, #0
 8004556:	f104 091a 	add.w	r9, r4, #26
 800455a:	e7f2      	b.n	8004542 <_printf_float+0x412>
 800455c:	2301      	movs	r3, #1
 800455e:	4642      	mov	r2, r8
 8004560:	e7df      	b.n	8004522 <_printf_float+0x3f2>
 8004562:	2301      	movs	r3, #1
 8004564:	464a      	mov	r2, r9
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f ae3a 	beq.w	80041e6 <_printf_float+0xb6>
 8004572:	f108 0801 	add.w	r8, r8, #1
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800457a:	1a5b      	subs	r3, r3, r1
 800457c:	4543      	cmp	r3, r8
 800457e:	dcf0      	bgt.n	8004562 <_printf_float+0x432>
 8004580:	e6fb      	b.n	800437a <_printf_float+0x24a>
 8004582:	f04f 0800 	mov.w	r8, #0
 8004586:	f104 0919 	add.w	r9, r4, #25
 800458a:	e7f4      	b.n	8004576 <_printf_float+0x446>

0800458c <_printf_common>:
 800458c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004590:	4616      	mov	r6, r2
 8004592:	4699      	mov	r9, r3
 8004594:	688a      	ldr	r2, [r1, #8]
 8004596:	690b      	ldr	r3, [r1, #16]
 8004598:	4607      	mov	r7, r0
 800459a:	4293      	cmp	r3, r2
 800459c:	bfb8      	it	lt
 800459e:	4613      	movlt	r3, r2
 80045a0:	6033      	str	r3, [r6, #0]
 80045a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045a6:	460c      	mov	r4, r1
 80045a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045ac:	b10a      	cbz	r2, 80045b2 <_printf_common+0x26>
 80045ae:	3301      	adds	r3, #1
 80045b0:	6033      	str	r3, [r6, #0]
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	0699      	lsls	r1, r3, #26
 80045b6:	bf42      	ittt	mi
 80045b8:	6833      	ldrmi	r3, [r6, #0]
 80045ba:	3302      	addmi	r3, #2
 80045bc:	6033      	strmi	r3, [r6, #0]
 80045be:	6825      	ldr	r5, [r4, #0]
 80045c0:	f015 0506 	ands.w	r5, r5, #6
 80045c4:	d106      	bne.n	80045d4 <_printf_common+0x48>
 80045c6:	f104 0a19 	add.w	sl, r4, #25
 80045ca:	68e3      	ldr	r3, [r4, #12]
 80045cc:	6832      	ldr	r2, [r6, #0]
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	42ab      	cmp	r3, r5
 80045d2:	dc2b      	bgt.n	800462c <_printf_common+0xa0>
 80045d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045d8:	1e13      	subs	r3, r2, #0
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	bf18      	it	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	0692      	lsls	r2, r2, #26
 80045e2:	d430      	bmi.n	8004646 <_printf_common+0xba>
 80045e4:	4649      	mov	r1, r9
 80045e6:	4638      	mov	r0, r7
 80045e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045ec:	47c0      	blx	r8
 80045ee:	3001      	adds	r0, #1
 80045f0:	d023      	beq.n	800463a <_printf_common+0xae>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	6922      	ldr	r2, [r4, #16]
 80045f6:	f003 0306 	and.w	r3, r3, #6
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	bf14      	ite	ne
 80045fe:	2500      	movne	r5, #0
 8004600:	6833      	ldreq	r3, [r6, #0]
 8004602:	f04f 0600 	mov.w	r6, #0
 8004606:	bf08      	it	eq
 8004608:	68e5      	ldreq	r5, [r4, #12]
 800460a:	f104 041a 	add.w	r4, r4, #26
 800460e:	bf08      	it	eq
 8004610:	1aed      	subeq	r5, r5, r3
 8004612:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004616:	bf08      	it	eq
 8004618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800461c:	4293      	cmp	r3, r2
 800461e:	bfc4      	itt	gt
 8004620:	1a9b      	subgt	r3, r3, r2
 8004622:	18ed      	addgt	r5, r5, r3
 8004624:	42b5      	cmp	r5, r6
 8004626:	d11a      	bne.n	800465e <_printf_common+0xd2>
 8004628:	2000      	movs	r0, #0
 800462a:	e008      	b.n	800463e <_printf_common+0xb2>
 800462c:	2301      	movs	r3, #1
 800462e:	4652      	mov	r2, sl
 8004630:	4649      	mov	r1, r9
 8004632:	4638      	mov	r0, r7
 8004634:	47c0      	blx	r8
 8004636:	3001      	adds	r0, #1
 8004638:	d103      	bne.n	8004642 <_printf_common+0xb6>
 800463a:	f04f 30ff 	mov.w	r0, #4294967295
 800463e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004642:	3501      	adds	r5, #1
 8004644:	e7c1      	b.n	80045ca <_printf_common+0x3e>
 8004646:	2030      	movs	r0, #48	; 0x30
 8004648:	18e1      	adds	r1, r4, r3
 800464a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004654:	4422      	add	r2, r4
 8004656:	3302      	adds	r3, #2
 8004658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800465c:	e7c2      	b.n	80045e4 <_printf_common+0x58>
 800465e:	2301      	movs	r3, #1
 8004660:	4622      	mov	r2, r4
 8004662:	4649      	mov	r1, r9
 8004664:	4638      	mov	r0, r7
 8004666:	47c0      	blx	r8
 8004668:	3001      	adds	r0, #1
 800466a:	d0e6      	beq.n	800463a <_printf_common+0xae>
 800466c:	3601      	adds	r6, #1
 800466e:	e7d9      	b.n	8004624 <_printf_common+0x98>

08004670 <_printf_i>:
 8004670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004674:	7e0f      	ldrb	r7, [r1, #24]
 8004676:	4691      	mov	r9, r2
 8004678:	2f78      	cmp	r7, #120	; 0x78
 800467a:	4680      	mov	r8, r0
 800467c:	460c      	mov	r4, r1
 800467e:	469a      	mov	sl, r3
 8004680:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004686:	d807      	bhi.n	8004698 <_printf_i+0x28>
 8004688:	2f62      	cmp	r7, #98	; 0x62
 800468a:	d80a      	bhi.n	80046a2 <_printf_i+0x32>
 800468c:	2f00      	cmp	r7, #0
 800468e:	f000 80d5 	beq.w	800483c <_printf_i+0x1cc>
 8004692:	2f58      	cmp	r7, #88	; 0x58
 8004694:	f000 80c1 	beq.w	800481a <_printf_i+0x1aa>
 8004698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800469c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046a0:	e03a      	b.n	8004718 <_printf_i+0xa8>
 80046a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046a6:	2b15      	cmp	r3, #21
 80046a8:	d8f6      	bhi.n	8004698 <_printf_i+0x28>
 80046aa:	a101      	add	r1, pc, #4	; (adr r1, 80046b0 <_printf_i+0x40>)
 80046ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046b0:	08004709 	.word	0x08004709
 80046b4:	0800471d 	.word	0x0800471d
 80046b8:	08004699 	.word	0x08004699
 80046bc:	08004699 	.word	0x08004699
 80046c0:	08004699 	.word	0x08004699
 80046c4:	08004699 	.word	0x08004699
 80046c8:	0800471d 	.word	0x0800471d
 80046cc:	08004699 	.word	0x08004699
 80046d0:	08004699 	.word	0x08004699
 80046d4:	08004699 	.word	0x08004699
 80046d8:	08004699 	.word	0x08004699
 80046dc:	08004823 	.word	0x08004823
 80046e0:	08004749 	.word	0x08004749
 80046e4:	080047dd 	.word	0x080047dd
 80046e8:	08004699 	.word	0x08004699
 80046ec:	08004699 	.word	0x08004699
 80046f0:	08004845 	.word	0x08004845
 80046f4:	08004699 	.word	0x08004699
 80046f8:	08004749 	.word	0x08004749
 80046fc:	08004699 	.word	0x08004699
 8004700:	08004699 	.word	0x08004699
 8004704:	080047e5 	.word	0x080047e5
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	1d1a      	adds	r2, r3, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	602a      	str	r2, [r5, #0]
 8004710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004718:	2301      	movs	r3, #1
 800471a:	e0a0      	b.n	800485e <_printf_i+0x1ee>
 800471c:	6820      	ldr	r0, [r4, #0]
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	0607      	lsls	r7, r0, #24
 8004722:	f103 0104 	add.w	r1, r3, #4
 8004726:	6029      	str	r1, [r5, #0]
 8004728:	d501      	bpl.n	800472e <_printf_i+0xbe>
 800472a:	681e      	ldr	r6, [r3, #0]
 800472c:	e003      	b.n	8004736 <_printf_i+0xc6>
 800472e:	0646      	lsls	r6, r0, #25
 8004730:	d5fb      	bpl.n	800472a <_printf_i+0xba>
 8004732:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004736:	2e00      	cmp	r6, #0
 8004738:	da03      	bge.n	8004742 <_printf_i+0xd2>
 800473a:	232d      	movs	r3, #45	; 0x2d
 800473c:	4276      	negs	r6, r6
 800473e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004742:	230a      	movs	r3, #10
 8004744:	4859      	ldr	r0, [pc, #356]	; (80048ac <_printf_i+0x23c>)
 8004746:	e012      	b.n	800476e <_printf_i+0xfe>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	6820      	ldr	r0, [r4, #0]
 800474c:	1d19      	adds	r1, r3, #4
 800474e:	6029      	str	r1, [r5, #0]
 8004750:	0605      	lsls	r5, r0, #24
 8004752:	d501      	bpl.n	8004758 <_printf_i+0xe8>
 8004754:	681e      	ldr	r6, [r3, #0]
 8004756:	e002      	b.n	800475e <_printf_i+0xee>
 8004758:	0641      	lsls	r1, r0, #25
 800475a:	d5fb      	bpl.n	8004754 <_printf_i+0xe4>
 800475c:	881e      	ldrh	r6, [r3, #0]
 800475e:	2f6f      	cmp	r7, #111	; 0x6f
 8004760:	bf0c      	ite	eq
 8004762:	2308      	moveq	r3, #8
 8004764:	230a      	movne	r3, #10
 8004766:	4851      	ldr	r0, [pc, #324]	; (80048ac <_printf_i+0x23c>)
 8004768:	2100      	movs	r1, #0
 800476a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800476e:	6865      	ldr	r5, [r4, #4]
 8004770:	2d00      	cmp	r5, #0
 8004772:	bfa8      	it	ge
 8004774:	6821      	ldrge	r1, [r4, #0]
 8004776:	60a5      	str	r5, [r4, #8]
 8004778:	bfa4      	itt	ge
 800477a:	f021 0104 	bicge.w	r1, r1, #4
 800477e:	6021      	strge	r1, [r4, #0]
 8004780:	b90e      	cbnz	r6, 8004786 <_printf_i+0x116>
 8004782:	2d00      	cmp	r5, #0
 8004784:	d04b      	beq.n	800481e <_printf_i+0x1ae>
 8004786:	4615      	mov	r5, r2
 8004788:	fbb6 f1f3 	udiv	r1, r6, r3
 800478c:	fb03 6711 	mls	r7, r3, r1, r6
 8004790:	5dc7      	ldrb	r7, [r0, r7]
 8004792:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004796:	4637      	mov	r7, r6
 8004798:	42bb      	cmp	r3, r7
 800479a:	460e      	mov	r6, r1
 800479c:	d9f4      	bls.n	8004788 <_printf_i+0x118>
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d10b      	bne.n	80047ba <_printf_i+0x14a>
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	07de      	lsls	r6, r3, #31
 80047a6:	d508      	bpl.n	80047ba <_printf_i+0x14a>
 80047a8:	6923      	ldr	r3, [r4, #16]
 80047aa:	6861      	ldr	r1, [r4, #4]
 80047ac:	4299      	cmp	r1, r3
 80047ae:	bfde      	ittt	le
 80047b0:	2330      	movle	r3, #48	; 0x30
 80047b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047ba:	1b52      	subs	r2, r2, r5
 80047bc:	6122      	str	r2, [r4, #16]
 80047be:	464b      	mov	r3, r9
 80047c0:	4621      	mov	r1, r4
 80047c2:	4640      	mov	r0, r8
 80047c4:	f8cd a000 	str.w	sl, [sp]
 80047c8:	aa03      	add	r2, sp, #12
 80047ca:	f7ff fedf 	bl	800458c <_printf_common>
 80047ce:	3001      	adds	r0, #1
 80047d0:	d14a      	bne.n	8004868 <_printf_i+0x1f8>
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	b004      	add	sp, #16
 80047d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	f043 0320 	orr.w	r3, r3, #32
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	2778      	movs	r7, #120	; 0x78
 80047e6:	4832      	ldr	r0, [pc, #200]	; (80048b0 <_printf_i+0x240>)
 80047e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	6829      	ldr	r1, [r5, #0]
 80047f0:	061f      	lsls	r7, r3, #24
 80047f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80047f6:	d402      	bmi.n	80047fe <_printf_i+0x18e>
 80047f8:	065f      	lsls	r7, r3, #25
 80047fa:	bf48      	it	mi
 80047fc:	b2b6      	uxthmi	r6, r6
 80047fe:	07df      	lsls	r7, r3, #31
 8004800:	bf48      	it	mi
 8004802:	f043 0320 	orrmi.w	r3, r3, #32
 8004806:	6029      	str	r1, [r5, #0]
 8004808:	bf48      	it	mi
 800480a:	6023      	strmi	r3, [r4, #0]
 800480c:	b91e      	cbnz	r6, 8004816 <_printf_i+0x1a6>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	f023 0320 	bic.w	r3, r3, #32
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	2310      	movs	r3, #16
 8004818:	e7a6      	b.n	8004768 <_printf_i+0xf8>
 800481a:	4824      	ldr	r0, [pc, #144]	; (80048ac <_printf_i+0x23c>)
 800481c:	e7e4      	b.n	80047e8 <_printf_i+0x178>
 800481e:	4615      	mov	r5, r2
 8004820:	e7bd      	b.n	800479e <_printf_i+0x12e>
 8004822:	682b      	ldr	r3, [r5, #0]
 8004824:	6826      	ldr	r6, [r4, #0]
 8004826:	1d18      	adds	r0, r3, #4
 8004828:	6961      	ldr	r1, [r4, #20]
 800482a:	6028      	str	r0, [r5, #0]
 800482c:	0635      	lsls	r5, r6, #24
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	d501      	bpl.n	8004836 <_printf_i+0x1c6>
 8004832:	6019      	str	r1, [r3, #0]
 8004834:	e002      	b.n	800483c <_printf_i+0x1cc>
 8004836:	0670      	lsls	r0, r6, #25
 8004838:	d5fb      	bpl.n	8004832 <_printf_i+0x1c2>
 800483a:	8019      	strh	r1, [r3, #0]
 800483c:	2300      	movs	r3, #0
 800483e:	4615      	mov	r5, r2
 8004840:	6123      	str	r3, [r4, #16]
 8004842:	e7bc      	b.n	80047be <_printf_i+0x14e>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	2100      	movs	r1, #0
 8004848:	1d1a      	adds	r2, r3, #4
 800484a:	602a      	str	r2, [r5, #0]
 800484c:	681d      	ldr	r5, [r3, #0]
 800484e:	6862      	ldr	r2, [r4, #4]
 8004850:	4628      	mov	r0, r5
 8004852:	f000 fa42 	bl	8004cda <memchr>
 8004856:	b108      	cbz	r0, 800485c <_printf_i+0x1ec>
 8004858:	1b40      	subs	r0, r0, r5
 800485a:	6060      	str	r0, [r4, #4]
 800485c:	6863      	ldr	r3, [r4, #4]
 800485e:	6123      	str	r3, [r4, #16]
 8004860:	2300      	movs	r3, #0
 8004862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004866:	e7aa      	b.n	80047be <_printf_i+0x14e>
 8004868:	462a      	mov	r2, r5
 800486a:	4649      	mov	r1, r9
 800486c:	4640      	mov	r0, r8
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	47d0      	blx	sl
 8004872:	3001      	adds	r0, #1
 8004874:	d0ad      	beq.n	80047d2 <_printf_i+0x162>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	079b      	lsls	r3, r3, #30
 800487a:	d413      	bmi.n	80048a4 <_printf_i+0x234>
 800487c:	68e0      	ldr	r0, [r4, #12]
 800487e:	9b03      	ldr	r3, [sp, #12]
 8004880:	4298      	cmp	r0, r3
 8004882:	bfb8      	it	lt
 8004884:	4618      	movlt	r0, r3
 8004886:	e7a6      	b.n	80047d6 <_printf_i+0x166>
 8004888:	2301      	movs	r3, #1
 800488a:	4632      	mov	r2, r6
 800488c:	4649      	mov	r1, r9
 800488e:	4640      	mov	r0, r8
 8004890:	47d0      	blx	sl
 8004892:	3001      	adds	r0, #1
 8004894:	d09d      	beq.n	80047d2 <_printf_i+0x162>
 8004896:	3501      	adds	r5, #1
 8004898:	68e3      	ldr	r3, [r4, #12]
 800489a:	9903      	ldr	r1, [sp, #12]
 800489c:	1a5b      	subs	r3, r3, r1
 800489e:	42ab      	cmp	r3, r5
 80048a0:	dcf2      	bgt.n	8004888 <_printf_i+0x218>
 80048a2:	e7eb      	b.n	800487c <_printf_i+0x20c>
 80048a4:	2500      	movs	r5, #0
 80048a6:	f104 0619 	add.w	r6, r4, #25
 80048aa:	e7f5      	b.n	8004898 <_printf_i+0x228>
 80048ac:	08007aab 	.word	0x08007aab
 80048b0:	08007abc 	.word	0x08007abc

080048b4 <std>:
 80048b4:	2300      	movs	r3, #0
 80048b6:	b510      	push	{r4, lr}
 80048b8:	4604      	mov	r4, r0
 80048ba:	e9c0 3300 	strd	r3, r3, [r0]
 80048be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048c2:	6083      	str	r3, [r0, #8]
 80048c4:	8181      	strh	r1, [r0, #12]
 80048c6:	6643      	str	r3, [r0, #100]	; 0x64
 80048c8:	81c2      	strh	r2, [r0, #14]
 80048ca:	6183      	str	r3, [r0, #24]
 80048cc:	4619      	mov	r1, r3
 80048ce:	2208      	movs	r2, #8
 80048d0:	305c      	adds	r0, #92	; 0x5c
 80048d2:	f000 f915 	bl	8004b00 <memset>
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <std+0x58>)
 80048d8:	6224      	str	r4, [r4, #32]
 80048da:	6263      	str	r3, [r4, #36]	; 0x24
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <std+0x5c>)
 80048de:	62a3      	str	r3, [r4, #40]	; 0x28
 80048e0:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <std+0x60>)
 80048e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048e4:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <std+0x64>)
 80048e6:	6323      	str	r3, [r4, #48]	; 0x30
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <std+0x68>)
 80048ea:	429c      	cmp	r4, r3
 80048ec:	d006      	beq.n	80048fc <std+0x48>
 80048ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80048f2:	4294      	cmp	r4, r2
 80048f4:	d002      	beq.n	80048fc <std+0x48>
 80048f6:	33d0      	adds	r3, #208	; 0xd0
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d105      	bne.n	8004908 <std+0x54>
 80048fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004904:	f000 b9e6 	b.w	8004cd4 <__retarget_lock_init_recursive>
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop
 800490c:	08004a39 	.word	0x08004a39
 8004910:	08004a5b 	.word	0x08004a5b
 8004914:	08004a93 	.word	0x08004a93
 8004918:	08004ab7 	.word	0x08004ab7
 800491c:	200002c0 	.word	0x200002c0

08004920 <stdio_exit_handler>:
 8004920:	4a02      	ldr	r2, [pc, #8]	; (800492c <stdio_exit_handler+0xc>)
 8004922:	4903      	ldr	r1, [pc, #12]	; (8004930 <stdio_exit_handler+0x10>)
 8004924:	4803      	ldr	r0, [pc, #12]	; (8004934 <stdio_exit_handler+0x14>)
 8004926:	f000 b869 	b.w	80049fc <_fwalk_sglue>
 800492a:	bf00      	nop
 800492c:	2000000c 	.word	0x2000000c
 8004930:	08007011 	.word	0x08007011
 8004934:	20000184 	.word	0x20000184

08004938 <cleanup_stdio>:
 8004938:	6841      	ldr	r1, [r0, #4]
 800493a:	4b0c      	ldr	r3, [pc, #48]	; (800496c <cleanup_stdio+0x34>)
 800493c:	b510      	push	{r4, lr}
 800493e:	4299      	cmp	r1, r3
 8004940:	4604      	mov	r4, r0
 8004942:	d001      	beq.n	8004948 <cleanup_stdio+0x10>
 8004944:	f002 fb64 	bl	8007010 <_fflush_r>
 8004948:	68a1      	ldr	r1, [r4, #8]
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <cleanup_stdio+0x38>)
 800494c:	4299      	cmp	r1, r3
 800494e:	d002      	beq.n	8004956 <cleanup_stdio+0x1e>
 8004950:	4620      	mov	r0, r4
 8004952:	f002 fb5d 	bl	8007010 <_fflush_r>
 8004956:	68e1      	ldr	r1, [r4, #12]
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <cleanup_stdio+0x3c>)
 800495a:	4299      	cmp	r1, r3
 800495c:	d004      	beq.n	8004968 <cleanup_stdio+0x30>
 800495e:	4620      	mov	r0, r4
 8004960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004964:	f002 bb54 	b.w	8007010 <_fflush_r>
 8004968:	bd10      	pop	{r4, pc}
 800496a:	bf00      	nop
 800496c:	200002c0 	.word	0x200002c0
 8004970:	20000328 	.word	0x20000328
 8004974:	20000390 	.word	0x20000390

08004978 <global_stdio_init.part.0>:
 8004978:	b510      	push	{r4, lr}
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <global_stdio_init.part.0+0x30>)
 800497c:	4c0b      	ldr	r4, [pc, #44]	; (80049ac <global_stdio_init.part.0+0x34>)
 800497e:	4a0c      	ldr	r2, [pc, #48]	; (80049b0 <global_stdio_init.part.0+0x38>)
 8004980:	4620      	mov	r0, r4
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	2104      	movs	r1, #4
 8004986:	2200      	movs	r2, #0
 8004988:	f7ff ff94 	bl	80048b4 <std>
 800498c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004990:	2201      	movs	r2, #1
 8004992:	2109      	movs	r1, #9
 8004994:	f7ff ff8e 	bl	80048b4 <std>
 8004998:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800499c:	2202      	movs	r2, #2
 800499e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a2:	2112      	movs	r1, #18
 80049a4:	f7ff bf86 	b.w	80048b4 <std>
 80049a8:	200003f8 	.word	0x200003f8
 80049ac:	200002c0 	.word	0x200002c0
 80049b0:	08004921 	.word	0x08004921

080049b4 <__sfp_lock_acquire>:
 80049b4:	4801      	ldr	r0, [pc, #4]	; (80049bc <__sfp_lock_acquire+0x8>)
 80049b6:	f000 b98e 	b.w	8004cd6 <__retarget_lock_acquire_recursive>
 80049ba:	bf00      	nop
 80049bc:	20000401 	.word	0x20000401

080049c0 <__sfp_lock_release>:
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <__sfp_lock_release+0x8>)
 80049c2:	f000 b989 	b.w	8004cd8 <__retarget_lock_release_recursive>
 80049c6:	bf00      	nop
 80049c8:	20000401 	.word	0x20000401

080049cc <__sinit>:
 80049cc:	b510      	push	{r4, lr}
 80049ce:	4604      	mov	r4, r0
 80049d0:	f7ff fff0 	bl	80049b4 <__sfp_lock_acquire>
 80049d4:	6a23      	ldr	r3, [r4, #32]
 80049d6:	b11b      	cbz	r3, 80049e0 <__sinit+0x14>
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049dc:	f7ff bff0 	b.w	80049c0 <__sfp_lock_release>
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <__sinit+0x28>)
 80049e2:	6223      	str	r3, [r4, #32]
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <__sinit+0x2c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f5      	bne.n	80049d8 <__sinit+0xc>
 80049ec:	f7ff ffc4 	bl	8004978 <global_stdio_init.part.0>
 80049f0:	e7f2      	b.n	80049d8 <__sinit+0xc>
 80049f2:	bf00      	nop
 80049f4:	08004939 	.word	0x08004939
 80049f8:	200003f8 	.word	0x200003f8

080049fc <_fwalk_sglue>:
 80049fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a00:	4607      	mov	r7, r0
 8004a02:	4688      	mov	r8, r1
 8004a04:	4614      	mov	r4, r2
 8004a06:	2600      	movs	r6, #0
 8004a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a10:	d505      	bpl.n	8004a1e <_fwalk_sglue+0x22>
 8004a12:	6824      	ldr	r4, [r4, #0]
 8004a14:	2c00      	cmp	r4, #0
 8004a16:	d1f7      	bne.n	8004a08 <_fwalk_sglue+0xc>
 8004a18:	4630      	mov	r0, r6
 8004a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1e:	89ab      	ldrh	r3, [r5, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d907      	bls.n	8004a34 <_fwalk_sglue+0x38>
 8004a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	d003      	beq.n	8004a34 <_fwalk_sglue+0x38>
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	4638      	mov	r0, r7
 8004a30:	47c0      	blx	r8
 8004a32:	4306      	orrs	r6, r0
 8004a34:	3568      	adds	r5, #104	; 0x68
 8004a36:	e7e9      	b.n	8004a0c <_fwalk_sglue+0x10>

08004a38 <__sread>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a40:	f000 f8fa 	bl	8004c38 <_read_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	bfab      	itete	ge
 8004a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a4c:	181b      	addge	r3, r3, r0
 8004a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a52:	bfac      	ite	ge
 8004a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a56:	81a3      	strhlt	r3, [r4, #12]
 8004a58:	bd10      	pop	{r4, pc}

08004a5a <__swrite>:
 8004a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5e:	461f      	mov	r7, r3
 8004a60:	898b      	ldrh	r3, [r1, #12]
 8004a62:	4605      	mov	r5, r0
 8004a64:	05db      	lsls	r3, r3, #23
 8004a66:	460c      	mov	r4, r1
 8004a68:	4616      	mov	r6, r2
 8004a6a:	d505      	bpl.n	8004a78 <__swrite+0x1e>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a74:	f000 f8ce 	bl	8004c14 <_lseek_r>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	4632      	mov	r2, r6
 8004a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	4628      	mov	r0, r5
 8004a84:	463b      	mov	r3, r7
 8004a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8e:	f000 b8e5 	b.w	8004c5c <_write_r>

08004a92 <__sseek>:
 8004a92:	b510      	push	{r4, lr}
 8004a94:	460c      	mov	r4, r1
 8004a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9a:	f000 f8bb 	bl	8004c14 <_lseek_r>
 8004a9e:	1c43      	adds	r3, r0, #1
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	bf15      	itete	ne
 8004aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aae:	81a3      	strheq	r3, [r4, #12]
 8004ab0:	bf18      	it	ne
 8004ab2:	81a3      	strhne	r3, [r4, #12]
 8004ab4:	bd10      	pop	{r4, pc}

08004ab6 <__sclose>:
 8004ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aba:	f000 b89b 	b.w	8004bf4 <_close_r>
	...

08004ac0 <_vsiprintf_r>:
 8004ac0:	b500      	push	{lr}
 8004ac2:	b09b      	sub	sp, #108	; 0x6c
 8004ac4:	9100      	str	r1, [sp, #0]
 8004ac6:	9104      	str	r1, [sp, #16]
 8004ac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004acc:	9105      	str	r1, [sp, #20]
 8004ace:	9102      	str	r1, [sp, #8]
 8004ad0:	4905      	ldr	r1, [pc, #20]	; (8004ae8 <_vsiprintf_r+0x28>)
 8004ad2:	9103      	str	r1, [sp, #12]
 8004ad4:	4669      	mov	r1, sp
 8004ad6:	f002 f91b 	bl	8006d10 <_svfiprintf_r>
 8004ada:	2200      	movs	r2, #0
 8004adc:	9b00      	ldr	r3, [sp, #0]
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	b01b      	add	sp, #108	; 0x6c
 8004ae2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ae6:	bf00      	nop
 8004ae8:	ffff0208 	.word	0xffff0208

08004aec <vsiprintf>:
 8004aec:	4613      	mov	r3, r2
 8004aee:	460a      	mov	r2, r1
 8004af0:	4601      	mov	r1, r0
 8004af2:	4802      	ldr	r0, [pc, #8]	; (8004afc <vsiprintf+0x10>)
 8004af4:	6800      	ldr	r0, [r0, #0]
 8004af6:	f7ff bfe3 	b.w	8004ac0 <_vsiprintf_r>
 8004afa:	bf00      	nop
 8004afc:	200001d0 	.word	0x200001d0

08004b00 <memset>:
 8004b00:	4603      	mov	r3, r0
 8004b02:	4402      	add	r2, r0
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d100      	bne.n	8004b0a <memset+0xa>
 8004b08:	4770      	bx	lr
 8004b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0e:	e7f9      	b.n	8004b04 <memset+0x4>

08004b10 <strncmp>:
 8004b10:	b510      	push	{r4, lr}
 8004b12:	b16a      	cbz	r2, 8004b30 <strncmp+0x20>
 8004b14:	3901      	subs	r1, #1
 8004b16:	1884      	adds	r4, r0, r2
 8004b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d103      	bne.n	8004b2c <strncmp+0x1c>
 8004b24:	42a0      	cmp	r0, r4
 8004b26:	d001      	beq.n	8004b2c <strncmp+0x1c>
 8004b28:	2a00      	cmp	r2, #0
 8004b2a:	d1f5      	bne.n	8004b18 <strncmp+0x8>
 8004b2c:	1ad0      	subs	r0, r2, r3
 8004b2e:	bd10      	pop	{r4, pc}
 8004b30:	4610      	mov	r0, r2
 8004b32:	e7fc      	b.n	8004b2e <strncmp+0x1e>

08004b34 <strtok>:
 8004b34:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <strtok+0x5c>)
 8004b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3a:	681f      	ldr	r7, [r3, #0]
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8004b40:	460e      	mov	r6, r1
 8004b42:	b9ec      	cbnz	r4, 8004b80 <strtok+0x4c>
 8004b44:	2050      	movs	r0, #80	; 0x50
 8004b46:	f001 fb19 	bl	800617c <malloc>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6478      	str	r0, [r7, #68]	; 0x44
 8004b4e:	b920      	cbnz	r0, 8004b5a <strtok+0x26>
 8004b50:	215b      	movs	r1, #91	; 0x5b
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <strtok+0x60>)
 8004b54:	4810      	ldr	r0, [pc, #64]	; (8004b98 <strtok+0x64>)
 8004b56:	f000 f8e3 	bl	8004d20 <__assert_func>
 8004b5a:	e9c0 4400 	strd	r4, r4, [r0]
 8004b5e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004b62:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004b66:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004b6a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004b6e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004b72:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004b76:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004b7a:	6184      	str	r4, [r0, #24]
 8004b7c:	7704      	strb	r4, [r0, #28]
 8004b7e:	6244      	str	r4, [r0, #36]	; 0x24
 8004b80:	4631      	mov	r1, r6
 8004b82:	4628      	mov	r0, r5
 8004b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b86:	2301      	movs	r3, #1
 8004b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8c:	f000 b806 	b.w	8004b9c <__strtok_r>
 8004b90:	200001d0 	.word	0x200001d0
 8004b94:	08007acd 	.word	0x08007acd
 8004b98:	08007ae4 	.word	0x08007ae4

08004b9c <__strtok_r>:
 8004b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9e:	b908      	cbnz	r0, 8004ba4 <__strtok_r+0x8>
 8004ba0:	6810      	ldr	r0, [r2, #0]
 8004ba2:	b188      	cbz	r0, 8004bc8 <__strtok_r+0x2c>
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	460f      	mov	r7, r1
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004bae:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004bb2:	b91e      	cbnz	r6, 8004bbc <__strtok_r+0x20>
 8004bb4:	b965      	cbnz	r5, 8004bd0 <__strtok_r+0x34>
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	6015      	str	r5, [r2, #0]
 8004bba:	e005      	b.n	8004bc8 <__strtok_r+0x2c>
 8004bbc:	42b5      	cmp	r5, r6
 8004bbe:	d1f6      	bne.n	8004bae <__strtok_r+0x12>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <__strtok_r+0xa>
 8004bc4:	6014      	str	r4, [r2, #0]
 8004bc6:	7003      	strb	r3, [r0, #0]
 8004bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bca:	461c      	mov	r4, r3
 8004bcc:	e00c      	b.n	8004be8 <__strtok_r+0x4c>
 8004bce:	b915      	cbnz	r5, 8004bd6 <__strtok_r+0x3a>
 8004bd0:	460e      	mov	r6, r1
 8004bd2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004bd6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004bda:	42ab      	cmp	r3, r5
 8004bdc:	d1f7      	bne.n	8004bce <__strtok_r+0x32>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f3      	beq.n	8004bca <__strtok_r+0x2e>
 8004be2:	2300      	movs	r3, #0
 8004be4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004be8:	6014      	str	r4, [r2, #0]
 8004bea:	e7ed      	b.n	8004bc8 <__strtok_r+0x2c>

08004bec <_localeconv_r>:
 8004bec:	4800      	ldr	r0, [pc, #0]	; (8004bf0 <_localeconv_r+0x4>)
 8004bee:	4770      	bx	lr
 8004bf0:	20000108 	.word	0x20000108

08004bf4 <_close_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	4d05      	ldr	r5, [pc, #20]	; (8004c10 <_close_r+0x1c>)
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	602b      	str	r3, [r5, #0]
 8004c00:	f7fc fc72 	bl	80014e8 <_close>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_close_r+0x1a>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_close_r+0x1a>
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	200003fc 	.word	0x200003fc

08004c14 <_lseek_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4604      	mov	r4, r0
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	4d05      	ldr	r5, [pc, #20]	; (8004c34 <_lseek_r+0x20>)
 8004c20:	602a      	str	r2, [r5, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f7fc fc84 	bl	8001530 <_lseek>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d102      	bne.n	8004c32 <_lseek_r+0x1e>
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	b103      	cbz	r3, 8004c32 <_lseek_r+0x1e>
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	200003fc 	.word	0x200003fc

08004c38 <_read_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	4611      	mov	r1, r2
 8004c40:	2200      	movs	r2, #0
 8004c42:	4d05      	ldr	r5, [pc, #20]	; (8004c58 <_read_r+0x20>)
 8004c44:	602a      	str	r2, [r5, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f7fc fc15 	bl	8001476 <_read>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_read_r+0x1e>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_read_r+0x1e>
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	200003fc 	.word	0x200003fc

08004c5c <_write_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	2200      	movs	r2, #0
 8004c66:	4d05      	ldr	r5, [pc, #20]	; (8004c7c <_write_r+0x20>)
 8004c68:	602a      	str	r2, [r5, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f7fc fc20 	bl	80014b0 <_write>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_write_r+0x1e>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_write_r+0x1e>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	200003fc 	.word	0x200003fc

08004c80 <__errno>:
 8004c80:	4b01      	ldr	r3, [pc, #4]	; (8004c88 <__errno+0x8>)
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	200001d0 	.word	0x200001d0

08004c8c <__libc_init_array>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	2600      	movs	r6, #0
 8004c90:	4d0c      	ldr	r5, [pc, #48]	; (8004cc4 <__libc_init_array+0x38>)
 8004c92:	4c0d      	ldr	r4, [pc, #52]	; (8004cc8 <__libc_init_array+0x3c>)
 8004c94:	1b64      	subs	r4, r4, r5
 8004c96:	10a4      	asrs	r4, r4, #2
 8004c98:	42a6      	cmp	r6, r4
 8004c9a:	d109      	bne.n	8004cb0 <__libc_init_array+0x24>
 8004c9c:	f002 fd0e 	bl	80076bc <_init>
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	4d0a      	ldr	r5, [pc, #40]	; (8004ccc <__libc_init_array+0x40>)
 8004ca4:	4c0a      	ldr	r4, [pc, #40]	; (8004cd0 <__libc_init_array+0x44>)
 8004ca6:	1b64      	subs	r4, r4, r5
 8004ca8:	10a4      	asrs	r4, r4, #2
 8004caa:	42a6      	cmp	r6, r4
 8004cac:	d105      	bne.n	8004cba <__libc_init_array+0x2e>
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb4:	4798      	blx	r3
 8004cb6:	3601      	adds	r6, #1
 8004cb8:	e7ee      	b.n	8004c98 <__libc_init_array+0xc>
 8004cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cbe:	4798      	blx	r3
 8004cc0:	3601      	adds	r6, #1
 8004cc2:	e7f2      	b.n	8004caa <__libc_init_array+0x1e>
 8004cc4:	08007dc8 	.word	0x08007dc8
 8004cc8:	08007dc8 	.word	0x08007dc8
 8004ccc:	08007dc8 	.word	0x08007dc8
 8004cd0:	08007dcc 	.word	0x08007dcc

08004cd4 <__retarget_lock_init_recursive>:
 8004cd4:	4770      	bx	lr

08004cd6 <__retarget_lock_acquire_recursive>:
 8004cd6:	4770      	bx	lr

08004cd8 <__retarget_lock_release_recursive>:
 8004cd8:	4770      	bx	lr

08004cda <memchr>:
 8004cda:	4603      	mov	r3, r0
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	b2c9      	uxtb	r1, r1
 8004ce0:	4402      	add	r2, r0
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	d101      	bne.n	8004cec <memchr+0x12>
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e003      	b.n	8004cf4 <memchr+0x1a>
 8004cec:	7804      	ldrb	r4, [r0, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	428c      	cmp	r4, r1
 8004cf2:	d1f6      	bne.n	8004ce2 <memchr+0x8>
 8004cf4:	bd10      	pop	{r4, pc}

08004cf6 <memcpy>:
 8004cf6:	440a      	add	r2, r1
 8004cf8:	4291      	cmp	r1, r2
 8004cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cfe:	d100      	bne.n	8004d02 <memcpy+0xc>
 8004d00:	4770      	bx	lr
 8004d02:	b510      	push	{r4, lr}
 8004d04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d08:	4291      	cmp	r1, r2
 8004d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d0e:	d1f9      	bne.n	8004d04 <memcpy+0xe>
 8004d10:	bd10      	pop	{r4, pc}
	...

08004d14 <nan>:
 8004d14:	2000      	movs	r0, #0
 8004d16:	4901      	ldr	r1, [pc, #4]	; (8004d1c <nan+0x8>)
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	7ff80000 	.word	0x7ff80000

08004d20 <__assert_func>:
 8004d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d22:	4614      	mov	r4, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <__assert_func+0x2c>)
 8004d28:	4605      	mov	r5, r0
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68d8      	ldr	r0, [r3, #12]
 8004d2e:	b14c      	cbz	r4, 8004d44 <__assert_func+0x24>
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <__assert_func+0x30>)
 8004d32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d36:	9100      	str	r1, [sp, #0]
 8004d38:	462b      	mov	r3, r5
 8004d3a:	4906      	ldr	r1, [pc, #24]	; (8004d54 <__assert_func+0x34>)
 8004d3c:	f002 f990 	bl	8007060 <fiprintf>
 8004d40:	f002 f9ca 	bl	80070d8 <abort>
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <__assert_func+0x38>)
 8004d46:	461c      	mov	r4, r3
 8004d48:	e7f3      	b.n	8004d32 <__assert_func+0x12>
 8004d4a:	bf00      	nop
 8004d4c:	200001d0 	.word	0x200001d0
 8004d50:	08007b46 	.word	0x08007b46
 8004d54:	08007b53 	.word	0x08007b53
 8004d58:	08007b81 	.word	0x08007b81

08004d5c <quorem>:
 8004d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d60:	6903      	ldr	r3, [r0, #16]
 8004d62:	690c      	ldr	r4, [r1, #16]
 8004d64:	4607      	mov	r7, r0
 8004d66:	42a3      	cmp	r3, r4
 8004d68:	db7f      	blt.n	8004e6a <quorem+0x10e>
 8004d6a:	3c01      	subs	r4, #1
 8004d6c:	f100 0514 	add.w	r5, r0, #20
 8004d70:	f101 0814 	add.w	r8, r1, #20
 8004d74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d82:	3301      	adds	r3, #1
 8004d84:	429a      	cmp	r2, r3
 8004d86:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d8a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d92:	d331      	bcc.n	8004df8 <quorem+0x9c>
 8004d94:	f04f 0e00 	mov.w	lr, #0
 8004d98:	4640      	mov	r0, r8
 8004d9a:	46ac      	mov	ip, r5
 8004d9c:	46f2      	mov	sl, lr
 8004d9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004da2:	b293      	uxth	r3, r2
 8004da4:	fb06 e303 	mla	r3, r6, r3, lr
 8004da8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004dac:	0c1a      	lsrs	r2, r3, #16
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	fb06 220e 	mla	r2, r6, lr, r2
 8004db4:	ebaa 0303 	sub.w	r3, sl, r3
 8004db8:	f8dc a000 	ldr.w	sl, [ip]
 8004dbc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004dc0:	fa1f fa8a 	uxth.w	sl, sl
 8004dc4:	4453      	add	r3, sl
 8004dc6:	f8dc a000 	ldr.w	sl, [ip]
 8004dca:	b292      	uxth	r2, r2
 8004dcc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004dd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dda:	4581      	cmp	r9, r0
 8004ddc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004de0:	f84c 3b04 	str.w	r3, [ip], #4
 8004de4:	d2db      	bcs.n	8004d9e <quorem+0x42>
 8004de6:	f855 300b 	ldr.w	r3, [r5, fp]
 8004dea:	b92b      	cbnz	r3, 8004df8 <quorem+0x9c>
 8004dec:	9b01      	ldr	r3, [sp, #4]
 8004dee:	3b04      	subs	r3, #4
 8004df0:	429d      	cmp	r5, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	d32d      	bcc.n	8004e52 <quorem+0xf6>
 8004df6:	613c      	str	r4, [r7, #16]
 8004df8:	4638      	mov	r0, r7
 8004dfa:	f001 fd49 	bl	8006890 <__mcmp>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	db23      	blt.n	8004e4a <quorem+0xee>
 8004e02:	4629      	mov	r1, r5
 8004e04:	2000      	movs	r0, #0
 8004e06:	3601      	adds	r6, #1
 8004e08:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e0c:	f8d1 c000 	ldr.w	ip, [r1]
 8004e10:	b293      	uxth	r3, r2
 8004e12:	1ac3      	subs	r3, r0, r3
 8004e14:	0c12      	lsrs	r2, r2, #16
 8004e16:	fa1f f08c 	uxth.w	r0, ip
 8004e1a:	4403      	add	r3, r0
 8004e1c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004e20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e2a:	45c1      	cmp	r9, r8
 8004e2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e30:	f841 3b04 	str.w	r3, [r1], #4
 8004e34:	d2e8      	bcs.n	8004e08 <quorem+0xac>
 8004e36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e3e:	b922      	cbnz	r2, 8004e4a <quorem+0xee>
 8004e40:	3b04      	subs	r3, #4
 8004e42:	429d      	cmp	r5, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	d30a      	bcc.n	8004e5e <quorem+0x102>
 8004e48:	613c      	str	r4, [r7, #16]
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	b003      	add	sp, #12
 8004e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	3b04      	subs	r3, #4
 8004e56:	2a00      	cmp	r2, #0
 8004e58:	d1cd      	bne.n	8004df6 <quorem+0x9a>
 8004e5a:	3c01      	subs	r4, #1
 8004e5c:	e7c8      	b.n	8004df0 <quorem+0x94>
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	d1f0      	bne.n	8004e48 <quorem+0xec>
 8004e66:	3c01      	subs	r4, #1
 8004e68:	e7eb      	b.n	8004e42 <quorem+0xe6>
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	e7ee      	b.n	8004e4c <quorem+0xf0>
	...

08004e70 <_dtoa_r>:
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	4616      	mov	r6, r2
 8004e76:	461f      	mov	r7, r3
 8004e78:	69c4      	ldr	r4, [r0, #28]
 8004e7a:	b099      	sub	sp, #100	; 0x64
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004e86:	b974      	cbnz	r4, 8004ea6 <_dtoa_r+0x36>
 8004e88:	2010      	movs	r0, #16
 8004e8a:	f001 f977 	bl	800617c <malloc>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	61e8      	str	r0, [r5, #28]
 8004e92:	b920      	cbnz	r0, 8004e9e <_dtoa_r+0x2e>
 8004e94:	21ef      	movs	r1, #239	; 0xef
 8004e96:	4bac      	ldr	r3, [pc, #688]	; (8005148 <_dtoa_r+0x2d8>)
 8004e98:	48ac      	ldr	r0, [pc, #688]	; (800514c <_dtoa_r+0x2dc>)
 8004e9a:	f7ff ff41 	bl	8004d20 <__assert_func>
 8004e9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ea2:	6004      	str	r4, [r0, #0]
 8004ea4:	60c4      	str	r4, [r0, #12]
 8004ea6:	69eb      	ldr	r3, [r5, #28]
 8004ea8:	6819      	ldr	r1, [r3, #0]
 8004eaa:	b151      	cbz	r1, 8004ec2 <_dtoa_r+0x52>
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4093      	lsls	r3, r2
 8004eb2:	604a      	str	r2, [r1, #4]
 8004eb4:	608b      	str	r3, [r1, #8]
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f001 fa66 	bl	8006388 <_Bfree>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	69eb      	ldr	r3, [r5, #28]
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	1e3b      	subs	r3, r7, #0
 8004ec4:	bfaf      	iteee	ge
 8004ec6:	2300      	movge	r3, #0
 8004ec8:	2201      	movlt	r2, #1
 8004eca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ece:	9305      	strlt	r3, [sp, #20]
 8004ed0:	bfa8      	it	ge
 8004ed2:	f8c8 3000 	strge.w	r3, [r8]
 8004ed6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004eda:	4b9d      	ldr	r3, [pc, #628]	; (8005150 <_dtoa_r+0x2e0>)
 8004edc:	bfb8      	it	lt
 8004ede:	f8c8 2000 	strlt.w	r2, [r8]
 8004ee2:	ea33 0309 	bics.w	r3, r3, r9
 8004ee6:	d119      	bne.n	8004f1c <_dtoa_r+0xac>
 8004ee8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004eec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ef4:	4333      	orrs	r3, r6
 8004ef6:	f000 8589 	beq.w	8005a0c <_dtoa_r+0xb9c>
 8004efa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004efc:	b953      	cbnz	r3, 8004f14 <_dtoa_r+0xa4>
 8004efe:	4b95      	ldr	r3, [pc, #596]	; (8005154 <_dtoa_r+0x2e4>)
 8004f00:	e023      	b.n	8004f4a <_dtoa_r+0xda>
 8004f02:	4b95      	ldr	r3, [pc, #596]	; (8005158 <_dtoa_r+0x2e8>)
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	3308      	adds	r3, #8
 8004f08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	9803      	ldr	r0, [sp, #12]
 8004f0e:	b019      	add	sp, #100	; 0x64
 8004f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f14:	4b8f      	ldr	r3, [pc, #572]	; (8005154 <_dtoa_r+0x2e4>)
 8004f16:	9303      	str	r3, [sp, #12]
 8004f18:	3303      	adds	r3, #3
 8004f1a:	e7f5      	b.n	8004f08 <_dtoa_r+0x98>
 8004f1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f7fb fd46 	bl	80009bc <__aeabi_dcmpeq>
 8004f30:	4680      	mov	r8, r0
 8004f32:	b160      	cbz	r0, 8004f4e <_dtoa_r+0xde>
 8004f34:	2301      	movs	r3, #1
 8004f36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8562 	beq.w	8005a06 <_dtoa_r+0xb96>
 8004f42:	4b86      	ldr	r3, [pc, #536]	; (800515c <_dtoa_r+0x2ec>)
 8004f44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	9303      	str	r3, [sp, #12]
 8004f4c:	e7de      	b.n	8004f0c <_dtoa_r+0x9c>
 8004f4e:	ab16      	add	r3, sp, #88	; 0x58
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	ab17      	add	r3, sp, #92	; 0x5c
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	4628      	mov	r0, r5
 8004f58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f5c:	f001 fda8 	bl	8006ab0 <__d2b>
 8004f60:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f64:	4682      	mov	sl, r0
 8004f66:	2c00      	cmp	r4, #0
 8004f68:	d07e      	beq.n	8005068 <_dtoa_r+0x1f8>
 8004f6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f70:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f78:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004f7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f80:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004f84:	4619      	mov	r1, r3
 8004f86:	2200      	movs	r2, #0
 8004f88:	4b75      	ldr	r3, [pc, #468]	; (8005160 <_dtoa_r+0x2f0>)
 8004f8a:	f7fb f8f7 	bl	800017c <__aeabi_dsub>
 8004f8e:	a368      	add	r3, pc, #416	; (adr r3, 8005130 <_dtoa_r+0x2c0>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f7fb faaa 	bl	80004ec <__aeabi_dmul>
 8004f98:	a367      	add	r3, pc, #412	; (adr r3, 8005138 <_dtoa_r+0x2c8>)
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f7fb f8ef 	bl	8000180 <__adddf3>
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	460f      	mov	r7, r1
 8004fa8:	f7fb fa36 	bl	8000418 <__aeabi_i2d>
 8004fac:	a364      	add	r3, pc, #400	; (adr r3, 8005140 <_dtoa_r+0x2d0>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f7fb fa9b 	bl	80004ec <__aeabi_dmul>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4630      	mov	r0, r6
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	f7fb f8df 	bl	8000180 <__adddf3>
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460f      	mov	r7, r1
 8004fc6:	f7fb fd41 	bl	8000a4c <__aeabi_d2iz>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	4683      	mov	fp, r0
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	f7fb fcfc 	bl	80009d0 <__aeabi_dcmplt>
 8004fd8:	b148      	cbz	r0, 8004fee <_dtoa_r+0x17e>
 8004fda:	4658      	mov	r0, fp
 8004fdc:	f7fb fa1c 	bl	8000418 <__aeabi_i2d>
 8004fe0:	4632      	mov	r2, r6
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	f7fb fcea 	bl	80009bc <__aeabi_dcmpeq>
 8004fe8:	b908      	cbnz	r0, 8004fee <_dtoa_r+0x17e>
 8004fea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fee:	f1bb 0f16 	cmp.w	fp, #22
 8004ff2:	d857      	bhi.n	80050a4 <_dtoa_r+0x234>
 8004ff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ff8:	4b5a      	ldr	r3, [pc, #360]	; (8005164 <_dtoa_r+0x2f4>)
 8004ffa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7fb fce5 	bl	80009d0 <__aeabi_dcmplt>
 8005006:	2800      	cmp	r0, #0
 8005008:	d04e      	beq.n	80050a8 <_dtoa_r+0x238>
 800500a:	2300      	movs	r3, #0
 800500c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005010:	930f      	str	r3, [sp, #60]	; 0x3c
 8005012:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005014:	1b1b      	subs	r3, r3, r4
 8005016:	1e5a      	subs	r2, r3, #1
 8005018:	bf46      	itte	mi
 800501a:	f1c3 0901 	rsbmi	r9, r3, #1
 800501e:	2300      	movmi	r3, #0
 8005020:	f04f 0900 	movpl.w	r9, #0
 8005024:	9209      	str	r2, [sp, #36]	; 0x24
 8005026:	bf48      	it	mi
 8005028:	9309      	strmi	r3, [sp, #36]	; 0x24
 800502a:	f1bb 0f00 	cmp.w	fp, #0
 800502e:	db3d      	blt.n	80050ac <_dtoa_r+0x23c>
 8005030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005032:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005036:	445b      	add	r3, fp
 8005038:	9309      	str	r3, [sp, #36]	; 0x24
 800503a:	2300      	movs	r3, #0
 800503c:	930a      	str	r3, [sp, #40]	; 0x28
 800503e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005040:	2b09      	cmp	r3, #9
 8005042:	d867      	bhi.n	8005114 <_dtoa_r+0x2a4>
 8005044:	2b05      	cmp	r3, #5
 8005046:	bfc4      	itt	gt
 8005048:	3b04      	subgt	r3, #4
 800504a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800504c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800504e:	bfc8      	it	gt
 8005050:	2400      	movgt	r4, #0
 8005052:	f1a3 0302 	sub.w	r3, r3, #2
 8005056:	bfd8      	it	le
 8005058:	2401      	movle	r4, #1
 800505a:	2b03      	cmp	r3, #3
 800505c:	f200 8086 	bhi.w	800516c <_dtoa_r+0x2fc>
 8005060:	e8df f003 	tbb	[pc, r3]
 8005064:	5637392c 	.word	0x5637392c
 8005068:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800506c:	441c      	add	r4, r3
 800506e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005072:	2b20      	cmp	r3, #32
 8005074:	bfc1      	itttt	gt
 8005076:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800507a:	fa09 f903 	lslgt.w	r9, r9, r3
 800507e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005082:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005086:	bfd6      	itet	le
 8005088:	f1c3 0320 	rsble	r3, r3, #32
 800508c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005090:	fa06 f003 	lslle.w	r0, r6, r3
 8005094:	f7fb f9b0 	bl	80003f8 <__aeabi_ui2d>
 8005098:	2201      	movs	r2, #1
 800509a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800509e:	3c01      	subs	r4, #1
 80050a0:	9213      	str	r2, [sp, #76]	; 0x4c
 80050a2:	e76f      	b.n	8004f84 <_dtoa_r+0x114>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e7b3      	b.n	8005010 <_dtoa_r+0x1a0>
 80050a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80050aa:	e7b2      	b.n	8005012 <_dtoa_r+0x1a2>
 80050ac:	f1cb 0300 	rsb	r3, fp, #0
 80050b0:	930a      	str	r3, [sp, #40]	; 0x28
 80050b2:	2300      	movs	r3, #0
 80050b4:	eba9 090b 	sub.w	r9, r9, fp
 80050b8:	930e      	str	r3, [sp, #56]	; 0x38
 80050ba:	e7c0      	b.n	800503e <_dtoa_r+0x1ce>
 80050bc:	2300      	movs	r3, #0
 80050be:	930b      	str	r3, [sp, #44]	; 0x2c
 80050c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	dc55      	bgt.n	8005172 <_dtoa_r+0x302>
 80050c6:	2301      	movs	r3, #1
 80050c8:	461a      	mov	r2, r3
 80050ca:	9306      	str	r3, [sp, #24]
 80050cc:	9308      	str	r3, [sp, #32]
 80050ce:	9223      	str	r2, [sp, #140]	; 0x8c
 80050d0:	e00b      	b.n	80050ea <_dtoa_r+0x27a>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e7f3      	b.n	80050be <_dtoa_r+0x24e>
 80050d6:	2300      	movs	r3, #0
 80050d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80050da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050dc:	445b      	add	r3, fp
 80050de:	9306      	str	r3, [sp, #24]
 80050e0:	3301      	adds	r3, #1
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	9308      	str	r3, [sp, #32]
 80050e6:	bfb8      	it	lt
 80050e8:	2301      	movlt	r3, #1
 80050ea:	2100      	movs	r1, #0
 80050ec:	2204      	movs	r2, #4
 80050ee:	69e8      	ldr	r0, [r5, #28]
 80050f0:	f102 0614 	add.w	r6, r2, #20
 80050f4:	429e      	cmp	r6, r3
 80050f6:	d940      	bls.n	800517a <_dtoa_r+0x30a>
 80050f8:	6041      	str	r1, [r0, #4]
 80050fa:	4628      	mov	r0, r5
 80050fc:	f001 f904 	bl	8006308 <_Balloc>
 8005100:	9003      	str	r0, [sp, #12]
 8005102:	2800      	cmp	r0, #0
 8005104:	d13c      	bne.n	8005180 <_dtoa_r+0x310>
 8005106:	4602      	mov	r2, r0
 8005108:	f240 11af 	movw	r1, #431	; 0x1af
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <_dtoa_r+0x2f8>)
 800510e:	e6c3      	b.n	8004e98 <_dtoa_r+0x28>
 8005110:	2301      	movs	r3, #1
 8005112:	e7e1      	b.n	80050d8 <_dtoa_r+0x268>
 8005114:	2401      	movs	r4, #1
 8005116:	2300      	movs	r3, #0
 8005118:	940b      	str	r4, [sp, #44]	; 0x2c
 800511a:	9322      	str	r3, [sp, #136]	; 0x88
 800511c:	f04f 33ff 	mov.w	r3, #4294967295
 8005120:	2200      	movs	r2, #0
 8005122:	9306      	str	r3, [sp, #24]
 8005124:	9308      	str	r3, [sp, #32]
 8005126:	2312      	movs	r3, #18
 8005128:	e7d1      	b.n	80050ce <_dtoa_r+0x25e>
 800512a:	bf00      	nop
 800512c:	f3af 8000 	nop.w
 8005130:	636f4361 	.word	0x636f4361
 8005134:	3fd287a7 	.word	0x3fd287a7
 8005138:	8b60c8b3 	.word	0x8b60c8b3
 800513c:	3fc68a28 	.word	0x3fc68a28
 8005140:	509f79fb 	.word	0x509f79fb
 8005144:	3fd34413 	.word	0x3fd34413
 8005148:	08007acd 	.word	0x08007acd
 800514c:	08007b8f 	.word	0x08007b8f
 8005150:	7ff00000 	.word	0x7ff00000
 8005154:	08007b8b 	.word	0x08007b8b
 8005158:	08007b82 	.word	0x08007b82
 800515c:	08007aaa 	.word	0x08007aaa
 8005160:	3ff80000 	.word	0x3ff80000
 8005164:	08007ce0 	.word	0x08007ce0
 8005168:	08007be7 	.word	0x08007be7
 800516c:	2301      	movs	r3, #1
 800516e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005170:	e7d4      	b.n	800511c <_dtoa_r+0x2ac>
 8005172:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005174:	9306      	str	r3, [sp, #24]
 8005176:	9308      	str	r3, [sp, #32]
 8005178:	e7b7      	b.n	80050ea <_dtoa_r+0x27a>
 800517a:	3101      	adds	r1, #1
 800517c:	0052      	lsls	r2, r2, #1
 800517e:	e7b7      	b.n	80050f0 <_dtoa_r+0x280>
 8005180:	69eb      	ldr	r3, [r5, #28]
 8005182:	9a03      	ldr	r2, [sp, #12]
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	9b08      	ldr	r3, [sp, #32]
 8005188:	2b0e      	cmp	r3, #14
 800518a:	f200 80a8 	bhi.w	80052de <_dtoa_r+0x46e>
 800518e:	2c00      	cmp	r4, #0
 8005190:	f000 80a5 	beq.w	80052de <_dtoa_r+0x46e>
 8005194:	f1bb 0f00 	cmp.w	fp, #0
 8005198:	dd34      	ble.n	8005204 <_dtoa_r+0x394>
 800519a:	4b9a      	ldr	r3, [pc, #616]	; (8005404 <_dtoa_r+0x594>)
 800519c:	f00b 020f 	and.w	r2, fp, #15
 80051a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80051a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051ac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051b0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80051b4:	d016      	beq.n	80051e4 <_dtoa_r+0x374>
 80051b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051ba:	4b93      	ldr	r3, [pc, #588]	; (8005408 <_dtoa_r+0x598>)
 80051bc:	2703      	movs	r7, #3
 80051be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051c2:	f7fb fabd 	bl	8000740 <__aeabi_ddiv>
 80051c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051ca:	f004 040f 	and.w	r4, r4, #15
 80051ce:	4e8e      	ldr	r6, [pc, #568]	; (8005408 <_dtoa_r+0x598>)
 80051d0:	b954      	cbnz	r4, 80051e8 <_dtoa_r+0x378>
 80051d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051da:	f7fb fab1 	bl	8000740 <__aeabi_ddiv>
 80051de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051e2:	e029      	b.n	8005238 <_dtoa_r+0x3c8>
 80051e4:	2702      	movs	r7, #2
 80051e6:	e7f2      	b.n	80051ce <_dtoa_r+0x35e>
 80051e8:	07e1      	lsls	r1, r4, #31
 80051ea:	d508      	bpl.n	80051fe <_dtoa_r+0x38e>
 80051ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051f4:	f7fb f97a 	bl	80004ec <__aeabi_dmul>
 80051f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051fc:	3701      	adds	r7, #1
 80051fe:	1064      	asrs	r4, r4, #1
 8005200:	3608      	adds	r6, #8
 8005202:	e7e5      	b.n	80051d0 <_dtoa_r+0x360>
 8005204:	f000 80a5 	beq.w	8005352 <_dtoa_r+0x4e2>
 8005208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800520c:	f1cb 0400 	rsb	r4, fp, #0
 8005210:	4b7c      	ldr	r3, [pc, #496]	; (8005404 <_dtoa_r+0x594>)
 8005212:	f004 020f 	and.w	r2, r4, #15
 8005216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f7fb f965 	bl	80004ec <__aeabi_dmul>
 8005222:	2702      	movs	r7, #2
 8005224:	2300      	movs	r3, #0
 8005226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800522a:	4e77      	ldr	r6, [pc, #476]	; (8005408 <_dtoa_r+0x598>)
 800522c:	1124      	asrs	r4, r4, #4
 800522e:	2c00      	cmp	r4, #0
 8005230:	f040 8084 	bne.w	800533c <_dtoa_r+0x4cc>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1d2      	bne.n	80051de <_dtoa_r+0x36e>
 8005238:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800523c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8087 	beq.w	8005356 <_dtoa_r+0x4e6>
 8005248:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800524c:	2200      	movs	r2, #0
 800524e:	4b6f      	ldr	r3, [pc, #444]	; (800540c <_dtoa_r+0x59c>)
 8005250:	f7fb fbbe 	bl	80009d0 <__aeabi_dcmplt>
 8005254:	2800      	cmp	r0, #0
 8005256:	d07e      	beq.n	8005356 <_dtoa_r+0x4e6>
 8005258:	9b08      	ldr	r3, [sp, #32]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d07b      	beq.n	8005356 <_dtoa_r+0x4e6>
 800525e:	9b06      	ldr	r3, [sp, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	dd38      	ble.n	80052d6 <_dtoa_r+0x466>
 8005264:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005268:	2200      	movs	r2, #0
 800526a:	4b69      	ldr	r3, [pc, #420]	; (8005410 <_dtoa_r+0x5a0>)
 800526c:	f7fb f93e 	bl	80004ec <__aeabi_dmul>
 8005270:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005274:	9c06      	ldr	r4, [sp, #24]
 8005276:	f10b 38ff 	add.w	r8, fp, #4294967295
 800527a:	3701      	adds	r7, #1
 800527c:	4638      	mov	r0, r7
 800527e:	f7fb f8cb 	bl	8000418 <__aeabi_i2d>
 8005282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005286:	f7fb f931 	bl	80004ec <__aeabi_dmul>
 800528a:	2200      	movs	r2, #0
 800528c:	4b61      	ldr	r3, [pc, #388]	; (8005414 <_dtoa_r+0x5a4>)
 800528e:	f7fa ff77 	bl	8000180 <__adddf3>
 8005292:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005296:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800529a:	9611      	str	r6, [sp, #68]	; 0x44
 800529c:	2c00      	cmp	r4, #0
 800529e:	d15d      	bne.n	800535c <_dtoa_r+0x4ec>
 80052a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052a4:	2200      	movs	r2, #0
 80052a6:	4b5c      	ldr	r3, [pc, #368]	; (8005418 <_dtoa_r+0x5a8>)
 80052a8:	f7fa ff68 	bl	800017c <__aeabi_dsub>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052b4:	4633      	mov	r3, r6
 80052b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052b8:	f7fb fba8 	bl	8000a0c <__aeabi_dcmpgt>
 80052bc:	2800      	cmp	r0, #0
 80052be:	f040 8295 	bne.w	80057ec <_dtoa_r+0x97c>
 80052c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80052cc:	f7fb fb80 	bl	80009d0 <__aeabi_dcmplt>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f040 8289 	bne.w	80057e8 <_dtoa_r+0x978>
 80052d6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80052da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f2c0 8151 	blt.w	8005588 <_dtoa_r+0x718>
 80052e6:	f1bb 0f0e 	cmp.w	fp, #14
 80052ea:	f300 814d 	bgt.w	8005588 <_dtoa_r+0x718>
 80052ee:	4b45      	ldr	r3, [pc, #276]	; (8005404 <_dtoa_r+0x594>)
 80052f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80052fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f280 80da 	bge.w	80054b8 <_dtoa_r+0x648>
 8005304:	9b08      	ldr	r3, [sp, #32]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f300 80d6 	bgt.w	80054b8 <_dtoa_r+0x648>
 800530c:	f040 826b 	bne.w	80057e6 <_dtoa_r+0x976>
 8005310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005314:	2200      	movs	r2, #0
 8005316:	4b40      	ldr	r3, [pc, #256]	; (8005418 <_dtoa_r+0x5a8>)
 8005318:	f7fb f8e8 	bl	80004ec <__aeabi_dmul>
 800531c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005320:	f7fb fb6a 	bl	80009f8 <__aeabi_dcmpge>
 8005324:	9c08      	ldr	r4, [sp, #32]
 8005326:	4626      	mov	r6, r4
 8005328:	2800      	cmp	r0, #0
 800532a:	f040 8241 	bne.w	80057b0 <_dtoa_r+0x940>
 800532e:	2331      	movs	r3, #49	; 0x31
 8005330:	9f03      	ldr	r7, [sp, #12]
 8005332:	f10b 0b01 	add.w	fp, fp, #1
 8005336:	f807 3b01 	strb.w	r3, [r7], #1
 800533a:	e23d      	b.n	80057b8 <_dtoa_r+0x948>
 800533c:	07e2      	lsls	r2, r4, #31
 800533e:	d505      	bpl.n	800534c <_dtoa_r+0x4dc>
 8005340:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005344:	f7fb f8d2 	bl	80004ec <__aeabi_dmul>
 8005348:	2301      	movs	r3, #1
 800534a:	3701      	adds	r7, #1
 800534c:	1064      	asrs	r4, r4, #1
 800534e:	3608      	adds	r6, #8
 8005350:	e76d      	b.n	800522e <_dtoa_r+0x3be>
 8005352:	2702      	movs	r7, #2
 8005354:	e770      	b.n	8005238 <_dtoa_r+0x3c8>
 8005356:	46d8      	mov	r8, fp
 8005358:	9c08      	ldr	r4, [sp, #32]
 800535a:	e78f      	b.n	800527c <_dtoa_r+0x40c>
 800535c:	9903      	ldr	r1, [sp, #12]
 800535e:	4b29      	ldr	r3, [pc, #164]	; (8005404 <_dtoa_r+0x594>)
 8005360:	4421      	add	r1, r4
 8005362:	9112      	str	r1, [sp, #72]	; 0x48
 8005364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005366:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800536a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800536e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005372:	2900      	cmp	r1, #0
 8005374:	d054      	beq.n	8005420 <_dtoa_r+0x5b0>
 8005376:	2000      	movs	r0, #0
 8005378:	4928      	ldr	r1, [pc, #160]	; (800541c <_dtoa_r+0x5ac>)
 800537a:	f7fb f9e1 	bl	8000740 <__aeabi_ddiv>
 800537e:	463b      	mov	r3, r7
 8005380:	4632      	mov	r2, r6
 8005382:	f7fa fefb 	bl	800017c <__aeabi_dsub>
 8005386:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800538a:	9f03      	ldr	r7, [sp, #12]
 800538c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005390:	f7fb fb5c 	bl	8000a4c <__aeabi_d2iz>
 8005394:	4604      	mov	r4, r0
 8005396:	f7fb f83f 	bl	8000418 <__aeabi_i2d>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053a2:	f7fa feeb 	bl	800017c <__aeabi_dsub>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	3430      	adds	r4, #48	; 0x30
 80053ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053b4:	f807 4b01 	strb.w	r4, [r7], #1
 80053b8:	f7fb fb0a 	bl	80009d0 <__aeabi_dcmplt>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d173      	bne.n	80054a8 <_dtoa_r+0x638>
 80053c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053c4:	2000      	movs	r0, #0
 80053c6:	4911      	ldr	r1, [pc, #68]	; (800540c <_dtoa_r+0x59c>)
 80053c8:	f7fa fed8 	bl	800017c <__aeabi_dsub>
 80053cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053d0:	f7fb fafe 	bl	80009d0 <__aeabi_dcmplt>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	f040 80b6 	bne.w	8005546 <_dtoa_r+0x6d6>
 80053da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053dc:	429f      	cmp	r7, r3
 80053de:	f43f af7a 	beq.w	80052d6 <_dtoa_r+0x466>
 80053e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053e6:	2200      	movs	r2, #0
 80053e8:	4b09      	ldr	r3, [pc, #36]	; (8005410 <_dtoa_r+0x5a0>)
 80053ea:	f7fb f87f 	bl	80004ec <__aeabi_dmul>
 80053ee:	2200      	movs	r2, #0
 80053f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <_dtoa_r+0x5a0>)
 80053fa:	f7fb f877 	bl	80004ec <__aeabi_dmul>
 80053fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005402:	e7c3      	b.n	800538c <_dtoa_r+0x51c>
 8005404:	08007ce0 	.word	0x08007ce0
 8005408:	08007cb8 	.word	0x08007cb8
 800540c:	3ff00000 	.word	0x3ff00000
 8005410:	40240000 	.word	0x40240000
 8005414:	401c0000 	.word	0x401c0000
 8005418:	40140000 	.word	0x40140000
 800541c:	3fe00000 	.word	0x3fe00000
 8005420:	4630      	mov	r0, r6
 8005422:	4639      	mov	r1, r7
 8005424:	f7fb f862 	bl	80004ec <__aeabi_dmul>
 8005428:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800542a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800542e:	9c03      	ldr	r4, [sp, #12]
 8005430:	9314      	str	r3, [sp, #80]	; 0x50
 8005432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005436:	f7fb fb09 	bl	8000a4c <__aeabi_d2iz>
 800543a:	9015      	str	r0, [sp, #84]	; 0x54
 800543c:	f7fa ffec 	bl	8000418 <__aeabi_i2d>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005448:	f7fa fe98 	bl	800017c <__aeabi_dsub>
 800544c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800544e:	4606      	mov	r6, r0
 8005450:	3330      	adds	r3, #48	; 0x30
 8005452:	f804 3b01 	strb.w	r3, [r4], #1
 8005456:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005458:	460f      	mov	r7, r1
 800545a:	429c      	cmp	r4, r3
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	d124      	bne.n	80054ac <_dtoa_r+0x63c>
 8005462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005466:	4baf      	ldr	r3, [pc, #700]	; (8005724 <_dtoa_r+0x8b4>)
 8005468:	f7fa fe8a 	bl	8000180 <__adddf3>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4630      	mov	r0, r6
 8005472:	4639      	mov	r1, r7
 8005474:	f7fb faca 	bl	8000a0c <__aeabi_dcmpgt>
 8005478:	2800      	cmp	r0, #0
 800547a:	d163      	bne.n	8005544 <_dtoa_r+0x6d4>
 800547c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005480:	2000      	movs	r0, #0
 8005482:	49a8      	ldr	r1, [pc, #672]	; (8005724 <_dtoa_r+0x8b4>)
 8005484:	f7fa fe7a 	bl	800017c <__aeabi_dsub>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4630      	mov	r0, r6
 800548e:	4639      	mov	r1, r7
 8005490:	f7fb fa9e 	bl	80009d0 <__aeabi_dcmplt>
 8005494:	2800      	cmp	r0, #0
 8005496:	f43f af1e 	beq.w	80052d6 <_dtoa_r+0x466>
 800549a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800549c:	1e7b      	subs	r3, r7, #1
 800549e:	9314      	str	r3, [sp, #80]	; 0x50
 80054a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80054a4:	2b30      	cmp	r3, #48	; 0x30
 80054a6:	d0f8      	beq.n	800549a <_dtoa_r+0x62a>
 80054a8:	46c3      	mov	fp, r8
 80054aa:	e03b      	b.n	8005524 <_dtoa_r+0x6b4>
 80054ac:	4b9e      	ldr	r3, [pc, #632]	; (8005728 <_dtoa_r+0x8b8>)
 80054ae:	f7fb f81d 	bl	80004ec <__aeabi_dmul>
 80054b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054b6:	e7bc      	b.n	8005432 <_dtoa_r+0x5c2>
 80054b8:	9f03      	ldr	r7, [sp, #12]
 80054ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80054be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054c2:	4640      	mov	r0, r8
 80054c4:	4649      	mov	r1, r9
 80054c6:	f7fb f93b 	bl	8000740 <__aeabi_ddiv>
 80054ca:	f7fb fabf 	bl	8000a4c <__aeabi_d2iz>
 80054ce:	4604      	mov	r4, r0
 80054d0:	f7fa ffa2 	bl	8000418 <__aeabi_i2d>
 80054d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054d8:	f7fb f808 	bl	80004ec <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4640      	mov	r0, r8
 80054e2:	4649      	mov	r1, r9
 80054e4:	f7fa fe4a 	bl	800017c <__aeabi_dsub>
 80054e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80054ec:	f807 6b01 	strb.w	r6, [r7], #1
 80054f0:	9e03      	ldr	r6, [sp, #12]
 80054f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80054f6:	1bbe      	subs	r6, r7, r6
 80054f8:	45b4      	cmp	ip, r6
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	d136      	bne.n	800556e <_dtoa_r+0x6fe>
 8005500:	f7fa fe3e 	bl	8000180 <__adddf3>
 8005504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005508:	4680      	mov	r8, r0
 800550a:	4689      	mov	r9, r1
 800550c:	f7fb fa7e 	bl	8000a0c <__aeabi_dcmpgt>
 8005510:	bb58      	cbnz	r0, 800556a <_dtoa_r+0x6fa>
 8005512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005516:	4640      	mov	r0, r8
 8005518:	4649      	mov	r1, r9
 800551a:	f7fb fa4f 	bl	80009bc <__aeabi_dcmpeq>
 800551e:	b108      	cbz	r0, 8005524 <_dtoa_r+0x6b4>
 8005520:	07e3      	lsls	r3, r4, #31
 8005522:	d422      	bmi.n	800556a <_dtoa_r+0x6fa>
 8005524:	4651      	mov	r1, sl
 8005526:	4628      	mov	r0, r5
 8005528:	f000 ff2e 	bl	8006388 <_Bfree>
 800552c:	2300      	movs	r3, #0
 800552e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005530:	703b      	strb	r3, [r7, #0]
 8005532:	f10b 0301 	add.w	r3, fp, #1
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800553a:	2b00      	cmp	r3, #0
 800553c:	f43f ace6 	beq.w	8004f0c <_dtoa_r+0x9c>
 8005540:	601f      	str	r7, [r3, #0]
 8005542:	e4e3      	b.n	8004f0c <_dtoa_r+0x9c>
 8005544:	4627      	mov	r7, r4
 8005546:	463b      	mov	r3, r7
 8005548:	461f      	mov	r7, r3
 800554a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800554e:	2a39      	cmp	r2, #57	; 0x39
 8005550:	d107      	bne.n	8005562 <_dtoa_r+0x6f2>
 8005552:	9a03      	ldr	r2, [sp, #12]
 8005554:	429a      	cmp	r2, r3
 8005556:	d1f7      	bne.n	8005548 <_dtoa_r+0x6d8>
 8005558:	2230      	movs	r2, #48	; 0x30
 800555a:	9903      	ldr	r1, [sp, #12]
 800555c:	f108 0801 	add.w	r8, r8, #1
 8005560:	700a      	strb	r2, [r1, #0]
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	3201      	adds	r2, #1
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e79e      	b.n	80054a8 <_dtoa_r+0x638>
 800556a:	46d8      	mov	r8, fp
 800556c:	e7eb      	b.n	8005546 <_dtoa_r+0x6d6>
 800556e:	2200      	movs	r2, #0
 8005570:	4b6d      	ldr	r3, [pc, #436]	; (8005728 <_dtoa_r+0x8b8>)
 8005572:	f7fa ffbb 	bl	80004ec <__aeabi_dmul>
 8005576:	2200      	movs	r2, #0
 8005578:	2300      	movs	r3, #0
 800557a:	4680      	mov	r8, r0
 800557c:	4689      	mov	r9, r1
 800557e:	f7fb fa1d 	bl	80009bc <__aeabi_dcmpeq>
 8005582:	2800      	cmp	r0, #0
 8005584:	d09b      	beq.n	80054be <_dtoa_r+0x64e>
 8005586:	e7cd      	b.n	8005524 <_dtoa_r+0x6b4>
 8005588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800558a:	2a00      	cmp	r2, #0
 800558c:	f000 80c4 	beq.w	8005718 <_dtoa_r+0x8a8>
 8005590:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005592:	2a01      	cmp	r2, #1
 8005594:	f300 80a8 	bgt.w	80056e8 <_dtoa_r+0x878>
 8005598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800559a:	2a00      	cmp	r2, #0
 800559c:	f000 80a0 	beq.w	80056e0 <_dtoa_r+0x870>
 80055a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055a4:	464f      	mov	r7, r9
 80055a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055aa:	2101      	movs	r1, #1
 80055ac:	441a      	add	r2, r3
 80055ae:	4628      	mov	r0, r5
 80055b0:	4499      	add	r9, r3
 80055b2:	9209      	str	r2, [sp, #36]	; 0x24
 80055b4:	f000 ffe8 	bl	8006588 <__i2b>
 80055b8:	4606      	mov	r6, r0
 80055ba:	b15f      	cbz	r7, 80055d4 <_dtoa_r+0x764>
 80055bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	dd08      	ble.n	80055d4 <_dtoa_r+0x764>
 80055c2:	42bb      	cmp	r3, r7
 80055c4:	bfa8      	it	ge
 80055c6:	463b      	movge	r3, r7
 80055c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ca:	eba9 0903 	sub.w	r9, r9, r3
 80055ce:	1aff      	subs	r7, r7, r3
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	9309      	str	r3, [sp, #36]	; 0x24
 80055d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d6:	b1f3      	cbz	r3, 8005616 <_dtoa_r+0x7a6>
 80055d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80a0 	beq.w	8005720 <_dtoa_r+0x8b0>
 80055e0:	2c00      	cmp	r4, #0
 80055e2:	dd10      	ble.n	8005606 <_dtoa_r+0x796>
 80055e4:	4631      	mov	r1, r6
 80055e6:	4622      	mov	r2, r4
 80055e8:	4628      	mov	r0, r5
 80055ea:	f001 f88b 	bl	8006704 <__pow5mult>
 80055ee:	4652      	mov	r2, sl
 80055f0:	4601      	mov	r1, r0
 80055f2:	4606      	mov	r6, r0
 80055f4:	4628      	mov	r0, r5
 80055f6:	f000 ffdd 	bl	80065b4 <__multiply>
 80055fa:	4680      	mov	r8, r0
 80055fc:	4651      	mov	r1, sl
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 fec2 	bl	8006388 <_Bfree>
 8005604:	46c2      	mov	sl, r8
 8005606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005608:	1b1a      	subs	r2, r3, r4
 800560a:	d004      	beq.n	8005616 <_dtoa_r+0x7a6>
 800560c:	4651      	mov	r1, sl
 800560e:	4628      	mov	r0, r5
 8005610:	f001 f878 	bl	8006704 <__pow5mult>
 8005614:	4682      	mov	sl, r0
 8005616:	2101      	movs	r1, #1
 8005618:	4628      	mov	r0, r5
 800561a:	f000 ffb5 	bl	8006588 <__i2b>
 800561e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005620:	4604      	mov	r4, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	f340 8082 	ble.w	800572c <_dtoa_r+0x8bc>
 8005628:	461a      	mov	r2, r3
 800562a:	4601      	mov	r1, r0
 800562c:	4628      	mov	r0, r5
 800562e:	f001 f869 	bl	8006704 <__pow5mult>
 8005632:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005634:	4604      	mov	r4, r0
 8005636:	2b01      	cmp	r3, #1
 8005638:	dd7b      	ble.n	8005732 <_dtoa_r+0x8c2>
 800563a:	f04f 0800 	mov.w	r8, #0
 800563e:	6923      	ldr	r3, [r4, #16]
 8005640:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005644:	6918      	ldr	r0, [r3, #16]
 8005646:	f000 ff51 	bl	80064ec <__hi0bits>
 800564a:	f1c0 0020 	rsb	r0, r0, #32
 800564e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005650:	4418      	add	r0, r3
 8005652:	f010 001f 	ands.w	r0, r0, #31
 8005656:	f000 8092 	beq.w	800577e <_dtoa_r+0x90e>
 800565a:	f1c0 0320 	rsb	r3, r0, #32
 800565e:	2b04      	cmp	r3, #4
 8005660:	f340 8085 	ble.w	800576e <_dtoa_r+0x8fe>
 8005664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005666:	f1c0 001c 	rsb	r0, r0, #28
 800566a:	4403      	add	r3, r0
 800566c:	4481      	add	r9, r0
 800566e:	4407      	add	r7, r0
 8005670:	9309      	str	r3, [sp, #36]	; 0x24
 8005672:	f1b9 0f00 	cmp.w	r9, #0
 8005676:	dd05      	ble.n	8005684 <_dtoa_r+0x814>
 8005678:	4651      	mov	r1, sl
 800567a:	464a      	mov	r2, r9
 800567c:	4628      	mov	r0, r5
 800567e:	f001 f89b 	bl	80067b8 <__lshift>
 8005682:	4682      	mov	sl, r0
 8005684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	dd05      	ble.n	8005696 <_dtoa_r+0x826>
 800568a:	4621      	mov	r1, r4
 800568c:	461a      	mov	r2, r3
 800568e:	4628      	mov	r0, r5
 8005690:	f001 f892 	bl	80067b8 <__lshift>
 8005694:	4604      	mov	r4, r0
 8005696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d072      	beq.n	8005782 <_dtoa_r+0x912>
 800569c:	4621      	mov	r1, r4
 800569e:	4650      	mov	r0, sl
 80056a0:	f001 f8f6 	bl	8006890 <__mcmp>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	da6c      	bge.n	8005782 <_dtoa_r+0x912>
 80056a8:	2300      	movs	r3, #0
 80056aa:	4651      	mov	r1, sl
 80056ac:	220a      	movs	r2, #10
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 fe8c 	bl	80063cc <__multadd>
 80056b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b6:	4682      	mov	sl, r0
 80056b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 81ac 	beq.w	8005a1a <_dtoa_r+0xbaa>
 80056c2:	2300      	movs	r3, #0
 80056c4:	4631      	mov	r1, r6
 80056c6:	220a      	movs	r2, #10
 80056c8:	4628      	mov	r0, r5
 80056ca:	f000 fe7f 	bl	80063cc <__multadd>
 80056ce:	9b06      	ldr	r3, [sp, #24]
 80056d0:	4606      	mov	r6, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f300 8093 	bgt.w	80057fe <_dtoa_r+0x98e>
 80056d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056da:	2b02      	cmp	r3, #2
 80056dc:	dc59      	bgt.n	8005792 <_dtoa_r+0x922>
 80056de:	e08e      	b.n	80057fe <_dtoa_r+0x98e>
 80056e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056e6:	e75d      	b.n	80055a4 <_dtoa_r+0x734>
 80056e8:	9b08      	ldr	r3, [sp, #32]
 80056ea:	1e5c      	subs	r4, r3, #1
 80056ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	bfbf      	itttt	lt
 80056f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80056f4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80056f6:	1ae3      	sublt	r3, r4, r3
 80056f8:	18d2      	addlt	r2, r2, r3
 80056fa:	bfa8      	it	ge
 80056fc:	1b1c      	subge	r4, r3, r4
 80056fe:	9b08      	ldr	r3, [sp, #32]
 8005700:	bfbe      	ittt	lt
 8005702:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005704:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005706:	2400      	movlt	r4, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	bfb5      	itete	lt
 800570c:	eba9 0703 	sublt.w	r7, r9, r3
 8005710:	464f      	movge	r7, r9
 8005712:	2300      	movlt	r3, #0
 8005714:	9b08      	ldrge	r3, [sp, #32]
 8005716:	e747      	b.n	80055a8 <_dtoa_r+0x738>
 8005718:	464f      	mov	r7, r9
 800571a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800571c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800571e:	e74c      	b.n	80055ba <_dtoa_r+0x74a>
 8005720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005722:	e773      	b.n	800560c <_dtoa_r+0x79c>
 8005724:	3fe00000 	.word	0x3fe00000
 8005728:	40240000 	.word	0x40240000
 800572c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800572e:	2b01      	cmp	r3, #1
 8005730:	dc18      	bgt.n	8005764 <_dtoa_r+0x8f4>
 8005732:	9b04      	ldr	r3, [sp, #16]
 8005734:	b9b3      	cbnz	r3, 8005764 <_dtoa_r+0x8f4>
 8005736:	9b05      	ldr	r3, [sp, #20]
 8005738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800573c:	b993      	cbnz	r3, 8005764 <_dtoa_r+0x8f4>
 800573e:	9b05      	ldr	r3, [sp, #20]
 8005740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005744:	0d1b      	lsrs	r3, r3, #20
 8005746:	051b      	lsls	r3, r3, #20
 8005748:	b17b      	cbz	r3, 800576a <_dtoa_r+0x8fa>
 800574a:	f04f 0801 	mov.w	r8, #1
 800574e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005750:	f109 0901 	add.w	r9, r9, #1
 8005754:	3301      	adds	r3, #1
 8005756:	9309      	str	r3, [sp, #36]	; 0x24
 8005758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800575a:	2b00      	cmp	r3, #0
 800575c:	f47f af6f 	bne.w	800563e <_dtoa_r+0x7ce>
 8005760:	2001      	movs	r0, #1
 8005762:	e774      	b.n	800564e <_dtoa_r+0x7de>
 8005764:	f04f 0800 	mov.w	r8, #0
 8005768:	e7f6      	b.n	8005758 <_dtoa_r+0x8e8>
 800576a:	4698      	mov	r8, r3
 800576c:	e7f4      	b.n	8005758 <_dtoa_r+0x8e8>
 800576e:	d080      	beq.n	8005672 <_dtoa_r+0x802>
 8005770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005772:	331c      	adds	r3, #28
 8005774:	441a      	add	r2, r3
 8005776:	4499      	add	r9, r3
 8005778:	441f      	add	r7, r3
 800577a:	9209      	str	r2, [sp, #36]	; 0x24
 800577c:	e779      	b.n	8005672 <_dtoa_r+0x802>
 800577e:	4603      	mov	r3, r0
 8005780:	e7f6      	b.n	8005770 <_dtoa_r+0x900>
 8005782:	9b08      	ldr	r3, [sp, #32]
 8005784:	2b00      	cmp	r3, #0
 8005786:	dc34      	bgt.n	80057f2 <_dtoa_r+0x982>
 8005788:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800578a:	2b02      	cmp	r3, #2
 800578c:	dd31      	ble.n	80057f2 <_dtoa_r+0x982>
 800578e:	9b08      	ldr	r3, [sp, #32]
 8005790:	9306      	str	r3, [sp, #24]
 8005792:	9b06      	ldr	r3, [sp, #24]
 8005794:	b963      	cbnz	r3, 80057b0 <_dtoa_r+0x940>
 8005796:	4621      	mov	r1, r4
 8005798:	2205      	movs	r2, #5
 800579a:	4628      	mov	r0, r5
 800579c:	f000 fe16 	bl	80063cc <__multadd>
 80057a0:	4601      	mov	r1, r0
 80057a2:	4604      	mov	r4, r0
 80057a4:	4650      	mov	r0, sl
 80057a6:	f001 f873 	bl	8006890 <__mcmp>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	f73f adbf 	bgt.w	800532e <_dtoa_r+0x4be>
 80057b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057b2:	9f03      	ldr	r7, [sp, #12]
 80057b4:	ea6f 0b03 	mvn.w	fp, r3
 80057b8:	f04f 0800 	mov.w	r8, #0
 80057bc:	4621      	mov	r1, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 fde2 	bl	8006388 <_Bfree>
 80057c4:	2e00      	cmp	r6, #0
 80057c6:	f43f aead 	beq.w	8005524 <_dtoa_r+0x6b4>
 80057ca:	f1b8 0f00 	cmp.w	r8, #0
 80057ce:	d005      	beq.n	80057dc <_dtoa_r+0x96c>
 80057d0:	45b0      	cmp	r8, r6
 80057d2:	d003      	beq.n	80057dc <_dtoa_r+0x96c>
 80057d4:	4641      	mov	r1, r8
 80057d6:	4628      	mov	r0, r5
 80057d8:	f000 fdd6 	bl	8006388 <_Bfree>
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 fdd2 	bl	8006388 <_Bfree>
 80057e4:	e69e      	b.n	8005524 <_dtoa_r+0x6b4>
 80057e6:	2400      	movs	r4, #0
 80057e8:	4626      	mov	r6, r4
 80057ea:	e7e1      	b.n	80057b0 <_dtoa_r+0x940>
 80057ec:	46c3      	mov	fp, r8
 80057ee:	4626      	mov	r6, r4
 80057f0:	e59d      	b.n	800532e <_dtoa_r+0x4be>
 80057f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80c8 	beq.w	800598a <_dtoa_r+0xb1a>
 80057fa:	9b08      	ldr	r3, [sp, #32]
 80057fc:	9306      	str	r3, [sp, #24]
 80057fe:	2f00      	cmp	r7, #0
 8005800:	dd05      	ble.n	800580e <_dtoa_r+0x99e>
 8005802:	4631      	mov	r1, r6
 8005804:	463a      	mov	r2, r7
 8005806:	4628      	mov	r0, r5
 8005808:	f000 ffd6 	bl	80067b8 <__lshift>
 800580c:	4606      	mov	r6, r0
 800580e:	f1b8 0f00 	cmp.w	r8, #0
 8005812:	d05b      	beq.n	80058cc <_dtoa_r+0xa5c>
 8005814:	4628      	mov	r0, r5
 8005816:	6871      	ldr	r1, [r6, #4]
 8005818:	f000 fd76 	bl	8006308 <_Balloc>
 800581c:	4607      	mov	r7, r0
 800581e:	b928      	cbnz	r0, 800582c <_dtoa_r+0x9bc>
 8005820:	4602      	mov	r2, r0
 8005822:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005826:	4b81      	ldr	r3, [pc, #516]	; (8005a2c <_dtoa_r+0xbbc>)
 8005828:	f7ff bb36 	b.w	8004e98 <_dtoa_r+0x28>
 800582c:	6932      	ldr	r2, [r6, #16]
 800582e:	f106 010c 	add.w	r1, r6, #12
 8005832:	3202      	adds	r2, #2
 8005834:	0092      	lsls	r2, r2, #2
 8005836:	300c      	adds	r0, #12
 8005838:	f7ff fa5d 	bl	8004cf6 <memcpy>
 800583c:	2201      	movs	r2, #1
 800583e:	4639      	mov	r1, r7
 8005840:	4628      	mov	r0, r5
 8005842:	f000 ffb9 	bl	80067b8 <__lshift>
 8005846:	46b0      	mov	r8, r6
 8005848:	4606      	mov	r6, r0
 800584a:	9b03      	ldr	r3, [sp, #12]
 800584c:	9a03      	ldr	r2, [sp, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	9308      	str	r3, [sp, #32]
 8005852:	9b06      	ldr	r3, [sp, #24]
 8005854:	4413      	add	r3, r2
 8005856:	930b      	str	r3, [sp, #44]	; 0x2c
 8005858:	9b04      	ldr	r3, [sp, #16]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	930a      	str	r3, [sp, #40]	; 0x28
 8005860:	9b08      	ldr	r3, [sp, #32]
 8005862:	4621      	mov	r1, r4
 8005864:	3b01      	subs	r3, #1
 8005866:	4650      	mov	r0, sl
 8005868:	9304      	str	r3, [sp, #16]
 800586a:	f7ff fa77 	bl	8004d5c <quorem>
 800586e:	4641      	mov	r1, r8
 8005870:	9006      	str	r0, [sp, #24]
 8005872:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005876:	4650      	mov	r0, sl
 8005878:	f001 f80a 	bl	8006890 <__mcmp>
 800587c:	4632      	mov	r2, r6
 800587e:	9009      	str	r0, [sp, #36]	; 0x24
 8005880:	4621      	mov	r1, r4
 8005882:	4628      	mov	r0, r5
 8005884:	f001 f820 	bl	80068c8 <__mdiff>
 8005888:	68c2      	ldr	r2, [r0, #12]
 800588a:	4607      	mov	r7, r0
 800588c:	bb02      	cbnz	r2, 80058d0 <_dtoa_r+0xa60>
 800588e:	4601      	mov	r1, r0
 8005890:	4650      	mov	r0, sl
 8005892:	f000 fffd 	bl	8006890 <__mcmp>
 8005896:	4602      	mov	r2, r0
 8005898:	4639      	mov	r1, r7
 800589a:	4628      	mov	r0, r5
 800589c:	920c      	str	r2, [sp, #48]	; 0x30
 800589e:	f000 fd73 	bl	8006388 <_Bfree>
 80058a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058a6:	9f08      	ldr	r7, [sp, #32]
 80058a8:	ea43 0102 	orr.w	r1, r3, r2
 80058ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ae:	4319      	orrs	r1, r3
 80058b0:	d110      	bne.n	80058d4 <_dtoa_r+0xa64>
 80058b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058b6:	d029      	beq.n	800590c <_dtoa_r+0xa9c>
 80058b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	dd02      	ble.n	80058c4 <_dtoa_r+0xa54>
 80058be:	9b06      	ldr	r3, [sp, #24]
 80058c0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80058c4:	9b04      	ldr	r3, [sp, #16]
 80058c6:	f883 9000 	strb.w	r9, [r3]
 80058ca:	e777      	b.n	80057bc <_dtoa_r+0x94c>
 80058cc:	4630      	mov	r0, r6
 80058ce:	e7ba      	b.n	8005846 <_dtoa_r+0x9d6>
 80058d0:	2201      	movs	r2, #1
 80058d2:	e7e1      	b.n	8005898 <_dtoa_r+0xa28>
 80058d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	db04      	blt.n	80058e4 <_dtoa_r+0xa74>
 80058da:	9922      	ldr	r1, [sp, #136]	; 0x88
 80058dc:	430b      	orrs	r3, r1
 80058de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058e0:	430b      	orrs	r3, r1
 80058e2:	d120      	bne.n	8005926 <_dtoa_r+0xab6>
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	dded      	ble.n	80058c4 <_dtoa_r+0xa54>
 80058e8:	4651      	mov	r1, sl
 80058ea:	2201      	movs	r2, #1
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 ff63 	bl	80067b8 <__lshift>
 80058f2:	4621      	mov	r1, r4
 80058f4:	4682      	mov	sl, r0
 80058f6:	f000 ffcb 	bl	8006890 <__mcmp>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	dc03      	bgt.n	8005906 <_dtoa_r+0xa96>
 80058fe:	d1e1      	bne.n	80058c4 <_dtoa_r+0xa54>
 8005900:	f019 0f01 	tst.w	r9, #1
 8005904:	d0de      	beq.n	80058c4 <_dtoa_r+0xa54>
 8005906:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800590a:	d1d8      	bne.n	80058be <_dtoa_r+0xa4e>
 800590c:	2339      	movs	r3, #57	; 0x39
 800590e:	9a04      	ldr	r2, [sp, #16]
 8005910:	7013      	strb	r3, [r2, #0]
 8005912:	463b      	mov	r3, r7
 8005914:	461f      	mov	r7, r3
 8005916:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800591a:	3b01      	subs	r3, #1
 800591c:	2a39      	cmp	r2, #57	; 0x39
 800591e:	d06b      	beq.n	80059f8 <_dtoa_r+0xb88>
 8005920:	3201      	adds	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	e74a      	b.n	80057bc <_dtoa_r+0x94c>
 8005926:	2a00      	cmp	r2, #0
 8005928:	dd07      	ble.n	800593a <_dtoa_r+0xaca>
 800592a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800592e:	d0ed      	beq.n	800590c <_dtoa_r+0xa9c>
 8005930:	9a04      	ldr	r2, [sp, #16]
 8005932:	f109 0301 	add.w	r3, r9, #1
 8005936:	7013      	strb	r3, [r2, #0]
 8005938:	e740      	b.n	80057bc <_dtoa_r+0x94c>
 800593a:	9b08      	ldr	r3, [sp, #32]
 800593c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800593e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005942:	4293      	cmp	r3, r2
 8005944:	d042      	beq.n	80059cc <_dtoa_r+0xb5c>
 8005946:	4651      	mov	r1, sl
 8005948:	2300      	movs	r3, #0
 800594a:	220a      	movs	r2, #10
 800594c:	4628      	mov	r0, r5
 800594e:	f000 fd3d 	bl	80063cc <__multadd>
 8005952:	45b0      	cmp	r8, r6
 8005954:	4682      	mov	sl, r0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	f04f 020a 	mov.w	r2, #10
 800595e:	4641      	mov	r1, r8
 8005960:	4628      	mov	r0, r5
 8005962:	d107      	bne.n	8005974 <_dtoa_r+0xb04>
 8005964:	f000 fd32 	bl	80063cc <__multadd>
 8005968:	4680      	mov	r8, r0
 800596a:	4606      	mov	r6, r0
 800596c:	9b08      	ldr	r3, [sp, #32]
 800596e:	3301      	adds	r3, #1
 8005970:	9308      	str	r3, [sp, #32]
 8005972:	e775      	b.n	8005860 <_dtoa_r+0x9f0>
 8005974:	f000 fd2a 	bl	80063cc <__multadd>
 8005978:	4631      	mov	r1, r6
 800597a:	4680      	mov	r8, r0
 800597c:	2300      	movs	r3, #0
 800597e:	220a      	movs	r2, #10
 8005980:	4628      	mov	r0, r5
 8005982:	f000 fd23 	bl	80063cc <__multadd>
 8005986:	4606      	mov	r6, r0
 8005988:	e7f0      	b.n	800596c <_dtoa_r+0xafc>
 800598a:	9b08      	ldr	r3, [sp, #32]
 800598c:	9306      	str	r3, [sp, #24]
 800598e:	9f03      	ldr	r7, [sp, #12]
 8005990:	4621      	mov	r1, r4
 8005992:	4650      	mov	r0, sl
 8005994:	f7ff f9e2 	bl	8004d5c <quorem>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800599e:	f807 9b01 	strb.w	r9, [r7], #1
 80059a2:	1afa      	subs	r2, r7, r3
 80059a4:	9b06      	ldr	r3, [sp, #24]
 80059a6:	4293      	cmp	r3, r2
 80059a8:	dd07      	ble.n	80059ba <_dtoa_r+0xb4a>
 80059aa:	4651      	mov	r1, sl
 80059ac:	2300      	movs	r3, #0
 80059ae:	220a      	movs	r2, #10
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 fd0b 	bl	80063cc <__multadd>
 80059b6:	4682      	mov	sl, r0
 80059b8:	e7ea      	b.n	8005990 <_dtoa_r+0xb20>
 80059ba:	9b06      	ldr	r3, [sp, #24]
 80059bc:	f04f 0800 	mov.w	r8, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bfcc      	ite	gt
 80059c4:	461f      	movgt	r7, r3
 80059c6:	2701      	movle	r7, #1
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	441f      	add	r7, r3
 80059cc:	4651      	mov	r1, sl
 80059ce:	2201      	movs	r2, #1
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 fef1 	bl	80067b8 <__lshift>
 80059d6:	4621      	mov	r1, r4
 80059d8:	4682      	mov	sl, r0
 80059da:	f000 ff59 	bl	8006890 <__mcmp>
 80059de:	2800      	cmp	r0, #0
 80059e0:	dc97      	bgt.n	8005912 <_dtoa_r+0xaa2>
 80059e2:	d102      	bne.n	80059ea <_dtoa_r+0xb7a>
 80059e4:	f019 0f01 	tst.w	r9, #1
 80059e8:	d193      	bne.n	8005912 <_dtoa_r+0xaa2>
 80059ea:	463b      	mov	r3, r7
 80059ec:	461f      	mov	r7, r3
 80059ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059f2:	2a30      	cmp	r2, #48	; 0x30
 80059f4:	d0fa      	beq.n	80059ec <_dtoa_r+0xb7c>
 80059f6:	e6e1      	b.n	80057bc <_dtoa_r+0x94c>
 80059f8:	9a03      	ldr	r2, [sp, #12]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d18a      	bne.n	8005914 <_dtoa_r+0xaa4>
 80059fe:	2331      	movs	r3, #49	; 0x31
 8005a00:	f10b 0b01 	add.w	fp, fp, #1
 8005a04:	e797      	b.n	8005936 <_dtoa_r+0xac6>
 8005a06:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <_dtoa_r+0xbc0>)
 8005a08:	f7ff ba9f 	b.w	8004f4a <_dtoa_r+0xda>
 8005a0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f47f aa77 	bne.w	8004f02 <_dtoa_r+0x92>
 8005a14:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <_dtoa_r+0xbc4>)
 8005a16:	f7ff ba98 	b.w	8004f4a <_dtoa_r+0xda>
 8005a1a:	9b06      	ldr	r3, [sp, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dcb6      	bgt.n	800598e <_dtoa_r+0xb1e>
 8005a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	f73f aeb5 	bgt.w	8005792 <_dtoa_r+0x922>
 8005a28:	e7b1      	b.n	800598e <_dtoa_r+0xb1e>
 8005a2a:	bf00      	nop
 8005a2c:	08007be7 	.word	0x08007be7
 8005a30:	08007aa9 	.word	0x08007aa9
 8005a34:	08007b82 	.word	0x08007b82

08005a38 <_free_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	d040      	beq.n	8005ac2 <_free_r+0x8a>
 8005a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a44:	1f0c      	subs	r4, r1, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bfb8      	it	lt
 8005a4a:	18e4      	addlt	r4, r4, r3
 8005a4c:	f000 fc50 	bl	80062f0 <__malloc_lock>
 8005a50:	4a1c      	ldr	r2, [pc, #112]	; (8005ac4 <_free_r+0x8c>)
 8005a52:	6813      	ldr	r3, [r2, #0]
 8005a54:	b933      	cbnz	r3, 8005a64 <_free_r+0x2c>
 8005a56:	6063      	str	r3, [r4, #4]
 8005a58:	6014      	str	r4, [r2, #0]
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a60:	f000 bc4c 	b.w	80062fc <__malloc_unlock>
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d908      	bls.n	8005a7a <_free_r+0x42>
 8005a68:	6820      	ldr	r0, [r4, #0]
 8005a6a:	1821      	adds	r1, r4, r0
 8005a6c:	428b      	cmp	r3, r1
 8005a6e:	bf01      	itttt	eq
 8005a70:	6819      	ldreq	r1, [r3, #0]
 8005a72:	685b      	ldreq	r3, [r3, #4]
 8005a74:	1809      	addeq	r1, r1, r0
 8005a76:	6021      	streq	r1, [r4, #0]
 8005a78:	e7ed      	b.n	8005a56 <_free_r+0x1e>
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	b10b      	cbz	r3, 8005a84 <_free_r+0x4c>
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	d9fa      	bls.n	8005a7a <_free_r+0x42>
 8005a84:	6811      	ldr	r1, [r2, #0]
 8005a86:	1850      	adds	r0, r2, r1
 8005a88:	42a0      	cmp	r0, r4
 8005a8a:	d10b      	bne.n	8005aa4 <_free_r+0x6c>
 8005a8c:	6820      	ldr	r0, [r4, #0]
 8005a8e:	4401      	add	r1, r0
 8005a90:	1850      	adds	r0, r2, r1
 8005a92:	4283      	cmp	r3, r0
 8005a94:	6011      	str	r1, [r2, #0]
 8005a96:	d1e0      	bne.n	8005a5a <_free_r+0x22>
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4408      	add	r0, r1
 8005a9e:	6010      	str	r0, [r2, #0]
 8005aa0:	6053      	str	r3, [r2, #4]
 8005aa2:	e7da      	b.n	8005a5a <_free_r+0x22>
 8005aa4:	d902      	bls.n	8005aac <_free_r+0x74>
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	e7d6      	b.n	8005a5a <_free_r+0x22>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	1821      	adds	r1, r4, r0
 8005ab0:	428b      	cmp	r3, r1
 8005ab2:	bf01      	itttt	eq
 8005ab4:	6819      	ldreq	r1, [r3, #0]
 8005ab6:	685b      	ldreq	r3, [r3, #4]
 8005ab8:	1809      	addeq	r1, r1, r0
 8005aba:	6021      	streq	r1, [r4, #0]
 8005abc:	6063      	str	r3, [r4, #4]
 8005abe:	6054      	str	r4, [r2, #4]
 8005ac0:	e7cb      	b.n	8005a5a <_free_r+0x22>
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20000404 	.word	0x20000404

08005ac8 <rshift>:
 8005ac8:	6903      	ldr	r3, [r0, #16]
 8005aca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ace:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005ad2:	f100 0414 	add.w	r4, r0, #20
 8005ad6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005ada:	dd46      	ble.n	8005b6a <rshift+0xa2>
 8005adc:	f011 011f 	ands.w	r1, r1, #31
 8005ae0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005ae4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005ae8:	d10c      	bne.n	8005b04 <rshift+0x3c>
 8005aea:	4629      	mov	r1, r5
 8005aec:	f100 0710 	add.w	r7, r0, #16
 8005af0:	42b1      	cmp	r1, r6
 8005af2:	d335      	bcc.n	8005b60 <rshift+0x98>
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	1eea      	subs	r2, r5, #3
 8005afa:	4296      	cmp	r6, r2
 8005afc:	bf38      	it	cc
 8005afe:	2300      	movcc	r3, #0
 8005b00:	4423      	add	r3, r4
 8005b02:	e015      	b.n	8005b30 <rshift+0x68>
 8005b04:	46a1      	mov	r9, r4
 8005b06:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005b0a:	f1c1 0820 	rsb	r8, r1, #32
 8005b0e:	40cf      	lsrs	r7, r1
 8005b10:	f105 0e04 	add.w	lr, r5, #4
 8005b14:	4576      	cmp	r6, lr
 8005b16:	46f4      	mov	ip, lr
 8005b18:	d816      	bhi.n	8005b48 <rshift+0x80>
 8005b1a:	1a9a      	subs	r2, r3, r2
 8005b1c:	0092      	lsls	r2, r2, #2
 8005b1e:	3a04      	subs	r2, #4
 8005b20:	3501      	adds	r5, #1
 8005b22:	42ae      	cmp	r6, r5
 8005b24:	bf38      	it	cc
 8005b26:	2200      	movcc	r2, #0
 8005b28:	18a3      	adds	r3, r4, r2
 8005b2a:	50a7      	str	r7, [r4, r2]
 8005b2c:	b107      	cbz	r7, 8005b30 <rshift+0x68>
 8005b2e:	3304      	adds	r3, #4
 8005b30:	42a3      	cmp	r3, r4
 8005b32:	eba3 0204 	sub.w	r2, r3, r4
 8005b36:	bf08      	it	eq
 8005b38:	2300      	moveq	r3, #0
 8005b3a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005b3e:	6102      	str	r2, [r0, #16]
 8005b40:	bf08      	it	eq
 8005b42:	6143      	streq	r3, [r0, #20]
 8005b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b48:	f8dc c000 	ldr.w	ip, [ip]
 8005b4c:	fa0c fc08 	lsl.w	ip, ip, r8
 8005b50:	ea4c 0707 	orr.w	r7, ip, r7
 8005b54:	f849 7b04 	str.w	r7, [r9], #4
 8005b58:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005b5c:	40cf      	lsrs	r7, r1
 8005b5e:	e7d9      	b.n	8005b14 <rshift+0x4c>
 8005b60:	f851 cb04 	ldr.w	ip, [r1], #4
 8005b64:	f847 cf04 	str.w	ip, [r7, #4]!
 8005b68:	e7c2      	b.n	8005af0 <rshift+0x28>
 8005b6a:	4623      	mov	r3, r4
 8005b6c:	e7e0      	b.n	8005b30 <rshift+0x68>

08005b6e <__hexdig_fun>:
 8005b6e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005b72:	2b09      	cmp	r3, #9
 8005b74:	d802      	bhi.n	8005b7c <__hexdig_fun+0xe>
 8005b76:	3820      	subs	r0, #32
 8005b78:	b2c0      	uxtb	r0, r0
 8005b7a:	4770      	bx	lr
 8005b7c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005b80:	2b05      	cmp	r3, #5
 8005b82:	d801      	bhi.n	8005b88 <__hexdig_fun+0x1a>
 8005b84:	3847      	subs	r0, #71	; 0x47
 8005b86:	e7f7      	b.n	8005b78 <__hexdig_fun+0xa>
 8005b88:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005b8c:	2b05      	cmp	r3, #5
 8005b8e:	d801      	bhi.n	8005b94 <__hexdig_fun+0x26>
 8005b90:	3827      	subs	r0, #39	; 0x27
 8005b92:	e7f1      	b.n	8005b78 <__hexdig_fun+0xa>
 8005b94:	2000      	movs	r0, #0
 8005b96:	4770      	bx	lr

08005b98 <__gethex>:
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	4681      	mov	r9, r0
 8005b9e:	468a      	mov	sl, r1
 8005ba0:	4617      	mov	r7, r2
 8005ba2:	680a      	ldr	r2, [r1, #0]
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	f102 0b02 	add.w	fp, r2, #2
 8005baa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005bae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005bb2:	9302      	str	r3, [sp, #8]
 8005bb4:	32fe      	adds	r2, #254	; 0xfe
 8005bb6:	eb02 030b 	add.w	r3, r2, fp
 8005bba:	46d8      	mov	r8, fp
 8005bbc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	2830      	cmp	r0, #48	; 0x30
 8005bc4:	d0f7      	beq.n	8005bb6 <__gethex+0x1e>
 8005bc6:	f7ff ffd2 	bl	8005b6e <__hexdig_fun>
 8005bca:	4604      	mov	r4, r0
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d138      	bne.n	8005c42 <__gethex+0xaa>
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	49a7      	ldr	r1, [pc, #668]	; (8005e74 <__gethex+0x2dc>)
 8005bd6:	f7fe ff9b 	bl	8004b10 <strncmp>
 8005bda:	4606      	mov	r6, r0
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d169      	bne.n	8005cb4 <__gethex+0x11c>
 8005be0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8005be4:	465d      	mov	r5, fp
 8005be6:	f7ff ffc2 	bl	8005b6e <__hexdig_fun>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d064      	beq.n	8005cb8 <__gethex+0x120>
 8005bee:	465a      	mov	r2, fp
 8005bf0:	7810      	ldrb	r0, [r2, #0]
 8005bf2:	4690      	mov	r8, r2
 8005bf4:	2830      	cmp	r0, #48	; 0x30
 8005bf6:	f102 0201 	add.w	r2, r2, #1
 8005bfa:	d0f9      	beq.n	8005bf0 <__gethex+0x58>
 8005bfc:	f7ff ffb7 	bl	8005b6e <__hexdig_fun>
 8005c00:	2301      	movs	r3, #1
 8005c02:	fab0 f480 	clz	r4, r0
 8005c06:	465e      	mov	r6, fp
 8005c08:	0964      	lsrs	r4, r4, #5
 8005c0a:	9301      	str	r3, [sp, #4]
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	4615      	mov	r5, r2
 8005c10:	7828      	ldrb	r0, [r5, #0]
 8005c12:	3201      	adds	r2, #1
 8005c14:	f7ff ffab 	bl	8005b6e <__hexdig_fun>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d1f8      	bne.n	8005c0e <__gethex+0x76>
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	4628      	mov	r0, r5
 8005c20:	4994      	ldr	r1, [pc, #592]	; (8005e74 <__gethex+0x2dc>)
 8005c22:	f7fe ff75 	bl	8004b10 <strncmp>
 8005c26:	b978      	cbnz	r0, 8005c48 <__gethex+0xb0>
 8005c28:	b946      	cbnz	r6, 8005c3c <__gethex+0xa4>
 8005c2a:	1c6e      	adds	r6, r5, #1
 8005c2c:	4632      	mov	r2, r6
 8005c2e:	4615      	mov	r5, r2
 8005c30:	7828      	ldrb	r0, [r5, #0]
 8005c32:	3201      	adds	r2, #1
 8005c34:	f7ff ff9b 	bl	8005b6e <__hexdig_fun>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d1f8      	bne.n	8005c2e <__gethex+0x96>
 8005c3c:	1b73      	subs	r3, r6, r5
 8005c3e:	009e      	lsls	r6, r3, #2
 8005c40:	e004      	b.n	8005c4c <__gethex+0xb4>
 8005c42:	2400      	movs	r4, #0
 8005c44:	4626      	mov	r6, r4
 8005c46:	e7e1      	b.n	8005c0c <__gethex+0x74>
 8005c48:	2e00      	cmp	r6, #0
 8005c4a:	d1f7      	bne.n	8005c3c <__gethex+0xa4>
 8005c4c:	782b      	ldrb	r3, [r5, #0]
 8005c4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c52:	2b50      	cmp	r3, #80	; 0x50
 8005c54:	d13d      	bne.n	8005cd2 <__gethex+0x13a>
 8005c56:	786b      	ldrb	r3, [r5, #1]
 8005c58:	2b2b      	cmp	r3, #43	; 0x2b
 8005c5a:	d02f      	beq.n	8005cbc <__gethex+0x124>
 8005c5c:	2b2d      	cmp	r3, #45	; 0x2d
 8005c5e:	d031      	beq.n	8005cc4 <__gethex+0x12c>
 8005c60:	f04f 0b00 	mov.w	fp, #0
 8005c64:	1c69      	adds	r1, r5, #1
 8005c66:	7808      	ldrb	r0, [r1, #0]
 8005c68:	f7ff ff81 	bl	8005b6e <__hexdig_fun>
 8005c6c:	1e42      	subs	r2, r0, #1
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	2a18      	cmp	r2, #24
 8005c72:	d82e      	bhi.n	8005cd2 <__gethex+0x13a>
 8005c74:	f1a0 0210 	sub.w	r2, r0, #16
 8005c78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005c7c:	f7ff ff77 	bl	8005b6e <__hexdig_fun>
 8005c80:	f100 3cff 	add.w	ip, r0, #4294967295
 8005c84:	fa5f fc8c 	uxtb.w	ip, ip
 8005c88:	f1bc 0f18 	cmp.w	ip, #24
 8005c8c:	d91d      	bls.n	8005cca <__gethex+0x132>
 8005c8e:	f1bb 0f00 	cmp.w	fp, #0
 8005c92:	d000      	beq.n	8005c96 <__gethex+0xfe>
 8005c94:	4252      	negs	r2, r2
 8005c96:	4416      	add	r6, r2
 8005c98:	f8ca 1000 	str.w	r1, [sl]
 8005c9c:	b1dc      	cbz	r4, 8005cd6 <__gethex+0x13e>
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	bf14      	ite	ne
 8005ca4:	f04f 0800 	movne.w	r8, #0
 8005ca8:	f04f 0806 	moveq.w	r8, #6
 8005cac:	4640      	mov	r0, r8
 8005cae:	b005      	add	sp, #20
 8005cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb4:	4645      	mov	r5, r8
 8005cb6:	4626      	mov	r6, r4
 8005cb8:	2401      	movs	r4, #1
 8005cba:	e7c7      	b.n	8005c4c <__gethex+0xb4>
 8005cbc:	f04f 0b00 	mov.w	fp, #0
 8005cc0:	1ca9      	adds	r1, r5, #2
 8005cc2:	e7d0      	b.n	8005c66 <__gethex+0xce>
 8005cc4:	f04f 0b01 	mov.w	fp, #1
 8005cc8:	e7fa      	b.n	8005cc0 <__gethex+0x128>
 8005cca:	230a      	movs	r3, #10
 8005ccc:	fb03 0002 	mla	r0, r3, r2, r0
 8005cd0:	e7d0      	b.n	8005c74 <__gethex+0xdc>
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	e7e0      	b.n	8005c98 <__gethex+0x100>
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	eba5 0308 	sub.w	r3, r5, r8
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	2b07      	cmp	r3, #7
 8005ce0:	dc0a      	bgt.n	8005cf8 <__gethex+0x160>
 8005ce2:	4648      	mov	r0, r9
 8005ce4:	f000 fb10 	bl	8006308 <_Balloc>
 8005ce8:	4604      	mov	r4, r0
 8005cea:	b940      	cbnz	r0, 8005cfe <__gethex+0x166>
 8005cec:	4602      	mov	r2, r0
 8005cee:	21e4      	movs	r1, #228	; 0xe4
 8005cf0:	4b61      	ldr	r3, [pc, #388]	; (8005e78 <__gethex+0x2e0>)
 8005cf2:	4862      	ldr	r0, [pc, #392]	; (8005e7c <__gethex+0x2e4>)
 8005cf4:	f7ff f814 	bl	8004d20 <__assert_func>
 8005cf8:	3101      	adds	r1, #1
 8005cfa:	105b      	asrs	r3, r3, #1
 8005cfc:	e7ef      	b.n	8005cde <__gethex+0x146>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	469b      	mov	fp, r3
 8005d02:	f100 0a14 	add.w	sl, r0, #20
 8005d06:	f8cd a004 	str.w	sl, [sp, #4]
 8005d0a:	45a8      	cmp	r8, r5
 8005d0c:	d344      	bcc.n	8005d98 <__gethex+0x200>
 8005d0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005d12:	4658      	mov	r0, fp
 8005d14:	f848 bb04 	str.w	fp, [r8], #4
 8005d18:	eba8 080a 	sub.w	r8, r8, sl
 8005d1c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8005d20:	6122      	str	r2, [r4, #16]
 8005d22:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8005d26:	f000 fbe1 	bl	80064ec <__hi0bits>
 8005d2a:	683d      	ldr	r5, [r7, #0]
 8005d2c:	eba8 0800 	sub.w	r8, r8, r0
 8005d30:	45a8      	cmp	r8, r5
 8005d32:	dd59      	ble.n	8005de8 <__gethex+0x250>
 8005d34:	eba8 0805 	sub.w	r8, r8, r5
 8005d38:	4641      	mov	r1, r8
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 ff5f 	bl	8006bfe <__any_on>
 8005d40:	4683      	mov	fp, r0
 8005d42:	b1b8      	cbz	r0, 8005d74 <__gethex+0x1dc>
 8005d44:	f04f 0b01 	mov.w	fp, #1
 8005d48:	f108 33ff 	add.w	r3, r8, #4294967295
 8005d4c:	1159      	asrs	r1, r3, #5
 8005d4e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005d52:	f003 021f 	and.w	r2, r3, #31
 8005d56:	fa0b f202 	lsl.w	r2, fp, r2
 8005d5a:	420a      	tst	r2, r1
 8005d5c:	d00a      	beq.n	8005d74 <__gethex+0x1dc>
 8005d5e:	455b      	cmp	r3, fp
 8005d60:	dd06      	ble.n	8005d70 <__gethex+0x1d8>
 8005d62:	4620      	mov	r0, r4
 8005d64:	f1a8 0102 	sub.w	r1, r8, #2
 8005d68:	f000 ff49 	bl	8006bfe <__any_on>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d138      	bne.n	8005de2 <__gethex+0x24a>
 8005d70:	f04f 0b02 	mov.w	fp, #2
 8005d74:	4641      	mov	r1, r8
 8005d76:	4620      	mov	r0, r4
 8005d78:	f7ff fea6 	bl	8005ac8 <rshift>
 8005d7c:	4446      	add	r6, r8
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	42b3      	cmp	r3, r6
 8005d82:	da41      	bge.n	8005e08 <__gethex+0x270>
 8005d84:	4621      	mov	r1, r4
 8005d86:	4648      	mov	r0, r9
 8005d88:	f000 fafe 	bl	8006388 <_Bfree>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d90:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	e789      	b.n	8005cac <__gethex+0x114>
 8005d98:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8005d9c:	2a2e      	cmp	r2, #46	; 0x2e
 8005d9e:	d014      	beq.n	8005dca <__gethex+0x232>
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d106      	bne.n	8005db2 <__gethex+0x21a>
 8005da4:	9b01      	ldr	r3, [sp, #4]
 8005da6:	f843 bb04 	str.w	fp, [r3], #4
 8005daa:	f04f 0b00 	mov.w	fp, #0
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	465b      	mov	r3, fp
 8005db2:	7828      	ldrb	r0, [r5, #0]
 8005db4:	9303      	str	r3, [sp, #12]
 8005db6:	f7ff feda 	bl	8005b6e <__hexdig_fun>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	f000 000f 	and.w	r0, r0, #15
 8005dc0:	4098      	lsls	r0, r3
 8005dc2:	ea4b 0b00 	orr.w	fp, fp, r0
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	e79f      	b.n	8005d0a <__gethex+0x172>
 8005dca:	45a8      	cmp	r8, r5
 8005dcc:	d8e8      	bhi.n	8005da0 <__gethex+0x208>
 8005dce:	2201      	movs	r2, #1
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	4928      	ldr	r1, [pc, #160]	; (8005e74 <__gethex+0x2dc>)
 8005dd4:	9303      	str	r3, [sp, #12]
 8005dd6:	f7fe fe9b 	bl	8004b10 <strncmp>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d1df      	bne.n	8005da0 <__gethex+0x208>
 8005de0:	e793      	b.n	8005d0a <__gethex+0x172>
 8005de2:	f04f 0b03 	mov.w	fp, #3
 8005de6:	e7c5      	b.n	8005d74 <__gethex+0x1dc>
 8005de8:	da0b      	bge.n	8005e02 <__gethex+0x26a>
 8005dea:	eba5 0808 	sub.w	r8, r5, r8
 8005dee:	4621      	mov	r1, r4
 8005df0:	4642      	mov	r2, r8
 8005df2:	4648      	mov	r0, r9
 8005df4:	f000 fce0 	bl	80067b8 <__lshift>
 8005df8:	4604      	mov	r4, r0
 8005dfa:	eba6 0608 	sub.w	r6, r6, r8
 8005dfe:	f100 0a14 	add.w	sl, r0, #20
 8005e02:	f04f 0b00 	mov.w	fp, #0
 8005e06:	e7ba      	b.n	8005d7e <__gethex+0x1e6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	42b3      	cmp	r3, r6
 8005e0c:	dd74      	ble.n	8005ef8 <__gethex+0x360>
 8005e0e:	1b9e      	subs	r6, r3, r6
 8005e10:	42b5      	cmp	r5, r6
 8005e12:	dc35      	bgt.n	8005e80 <__gethex+0x2e8>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d023      	beq.n	8005e62 <__gethex+0x2ca>
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d025      	beq.n	8005e6a <__gethex+0x2d2>
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d115      	bne.n	8005e4e <__gethex+0x2b6>
 8005e22:	42b5      	cmp	r5, r6
 8005e24:	d113      	bne.n	8005e4e <__gethex+0x2b6>
 8005e26:	2d01      	cmp	r5, #1
 8005e28:	d10b      	bne.n	8005e42 <__gethex+0x2aa>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	9a02      	ldr	r2, [sp, #8]
 8005e2e:	f04f 0862 	mov.w	r8, #98	; 0x62
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	2301      	movs	r3, #1
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	f8ca 3000 	str.w	r3, [sl]
 8005e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e3e:	601c      	str	r4, [r3, #0]
 8005e40:	e734      	b.n	8005cac <__gethex+0x114>
 8005e42:	4620      	mov	r0, r4
 8005e44:	1e69      	subs	r1, r5, #1
 8005e46:	f000 feda 	bl	8006bfe <__any_on>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d1ed      	bne.n	8005e2a <__gethex+0x292>
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4648      	mov	r0, r9
 8005e52:	f000 fa99 	bl	8006388 <_Bfree>
 8005e56:	2300      	movs	r3, #0
 8005e58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e5a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	e724      	b.n	8005cac <__gethex+0x114>
 8005e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f2      	bne.n	8005e4e <__gethex+0x2b6>
 8005e68:	e7df      	b.n	8005e2a <__gethex+0x292>
 8005e6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1dc      	bne.n	8005e2a <__gethex+0x292>
 8005e70:	e7ed      	b.n	8005e4e <__gethex+0x2b6>
 8005e72:	bf00      	nop
 8005e74:	08007942 	.word	0x08007942
 8005e78:	08007be7 	.word	0x08007be7
 8005e7c:	08007bf8 	.word	0x08007bf8
 8005e80:	f106 38ff 	add.w	r8, r6, #4294967295
 8005e84:	f1bb 0f00 	cmp.w	fp, #0
 8005e88:	d133      	bne.n	8005ef2 <__gethex+0x35a>
 8005e8a:	f1b8 0f00 	cmp.w	r8, #0
 8005e8e:	d004      	beq.n	8005e9a <__gethex+0x302>
 8005e90:	4641      	mov	r1, r8
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 feb3 	bl	8006bfe <__any_on>
 8005e98:	4683      	mov	fp, r0
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	ea4f 1268 	mov.w	r2, r8, asr #5
 8005ea0:	f008 081f 	and.w	r8, r8, #31
 8005ea4:	fa03 f308 	lsl.w	r3, r3, r8
 8005ea8:	f04f 0802 	mov.w	r8, #2
 8005eac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4213      	tst	r3, r2
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	bf18      	it	ne
 8005eb8:	f04b 0b02 	orrne.w	fp, fp, #2
 8005ebc:	1bad      	subs	r5, r5, r6
 8005ebe:	f7ff fe03 	bl	8005ac8 <rshift>
 8005ec2:	687e      	ldr	r6, [r7, #4]
 8005ec4:	f1bb 0f00 	cmp.w	fp, #0
 8005ec8:	d04a      	beq.n	8005f60 <__gethex+0x3c8>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d016      	beq.n	8005efe <__gethex+0x366>
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d018      	beq.n	8005f06 <__gethex+0x36e>
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d109      	bne.n	8005eec <__gethex+0x354>
 8005ed8:	f01b 0f02 	tst.w	fp, #2
 8005edc:	d006      	beq.n	8005eec <__gethex+0x354>
 8005ede:	f8da 3000 	ldr.w	r3, [sl]
 8005ee2:	ea4b 0b03 	orr.w	fp, fp, r3
 8005ee6:	f01b 0f01 	tst.w	fp, #1
 8005eea:	d10f      	bne.n	8005f0c <__gethex+0x374>
 8005eec:	f048 0810 	orr.w	r8, r8, #16
 8005ef0:	e036      	b.n	8005f60 <__gethex+0x3c8>
 8005ef2:	f04f 0b01 	mov.w	fp, #1
 8005ef6:	e7d0      	b.n	8005e9a <__gethex+0x302>
 8005ef8:	f04f 0801 	mov.w	r8, #1
 8005efc:	e7e2      	b.n	8005ec4 <__gethex+0x32c>
 8005efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f00:	f1c3 0301 	rsb	r3, r3, #1
 8005f04:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0ef      	beq.n	8005eec <__gethex+0x354>
 8005f0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005f10:	f104 0214 	add.w	r2, r4, #20
 8005f14:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8005f20:	4694      	mov	ip, r2
 8005f22:	f852 1b04 	ldr.w	r1, [r2], #4
 8005f26:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005f2a:	d01e      	beq.n	8005f6a <__gethex+0x3d2>
 8005f2c:	3101      	adds	r1, #1
 8005f2e:	f8cc 1000 	str.w	r1, [ip]
 8005f32:	f1b8 0f02 	cmp.w	r8, #2
 8005f36:	f104 0214 	add.w	r2, r4, #20
 8005f3a:	d13d      	bne.n	8005fb8 <__gethex+0x420>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	42ab      	cmp	r3, r5
 8005f42:	d10b      	bne.n	8005f5c <__gethex+0x3c4>
 8005f44:	2301      	movs	r3, #1
 8005f46:	1169      	asrs	r1, r5, #5
 8005f48:	f005 051f 	and.w	r5, r5, #31
 8005f4c:	fa03 f505 	lsl.w	r5, r3, r5
 8005f50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f54:	421d      	tst	r5, r3
 8005f56:	bf18      	it	ne
 8005f58:	f04f 0801 	movne.w	r8, #1
 8005f5c:	f048 0820 	orr.w	r8, r8, #32
 8005f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f62:	601c      	str	r4, [r3, #0]
 8005f64:	9b02      	ldr	r3, [sp, #8]
 8005f66:	601e      	str	r6, [r3, #0]
 8005f68:	e6a0      	b.n	8005cac <__gethex+0x114>
 8005f6a:	4290      	cmp	r0, r2
 8005f6c:	f842 3c04 	str.w	r3, [r2, #-4]
 8005f70:	d8d6      	bhi.n	8005f20 <__gethex+0x388>
 8005f72:	68a2      	ldr	r2, [r4, #8]
 8005f74:	4593      	cmp	fp, r2
 8005f76:	db17      	blt.n	8005fa8 <__gethex+0x410>
 8005f78:	6861      	ldr	r1, [r4, #4]
 8005f7a:	4648      	mov	r0, r9
 8005f7c:	3101      	adds	r1, #1
 8005f7e:	f000 f9c3 	bl	8006308 <_Balloc>
 8005f82:	4682      	mov	sl, r0
 8005f84:	b918      	cbnz	r0, 8005f8e <__gethex+0x3f6>
 8005f86:	4602      	mov	r2, r0
 8005f88:	2184      	movs	r1, #132	; 0x84
 8005f8a:	4b1a      	ldr	r3, [pc, #104]	; (8005ff4 <__gethex+0x45c>)
 8005f8c:	e6b1      	b.n	8005cf2 <__gethex+0x15a>
 8005f8e:	6922      	ldr	r2, [r4, #16]
 8005f90:	f104 010c 	add.w	r1, r4, #12
 8005f94:	3202      	adds	r2, #2
 8005f96:	0092      	lsls	r2, r2, #2
 8005f98:	300c      	adds	r0, #12
 8005f9a:	f7fe feac 	bl	8004cf6 <memcpy>
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4648      	mov	r0, r9
 8005fa2:	f000 f9f1 	bl	8006388 <_Bfree>
 8005fa6:	4654      	mov	r4, sl
 8005fa8:	6922      	ldr	r2, [r4, #16]
 8005faa:	1c51      	adds	r1, r2, #1
 8005fac:	6121      	str	r1, [r4, #16]
 8005fae:	2101      	movs	r1, #1
 8005fb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005fb4:	6151      	str	r1, [r2, #20]
 8005fb6:	e7bc      	b.n	8005f32 <__gethex+0x39a>
 8005fb8:	6921      	ldr	r1, [r4, #16]
 8005fba:	4559      	cmp	r1, fp
 8005fbc:	dd0b      	ble.n	8005fd6 <__gethex+0x43e>
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f7ff fd81 	bl	8005ac8 <rshift>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3601      	adds	r6, #1
 8005fca:	42b3      	cmp	r3, r6
 8005fcc:	f6ff aeda 	blt.w	8005d84 <__gethex+0x1ec>
 8005fd0:	f04f 0801 	mov.w	r8, #1
 8005fd4:	e7c2      	b.n	8005f5c <__gethex+0x3c4>
 8005fd6:	f015 051f 	ands.w	r5, r5, #31
 8005fda:	d0f9      	beq.n	8005fd0 <__gethex+0x438>
 8005fdc:	9b01      	ldr	r3, [sp, #4]
 8005fde:	f1c5 0520 	rsb	r5, r5, #32
 8005fe2:	441a      	add	r2, r3
 8005fe4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8005fe8:	f000 fa80 	bl	80064ec <__hi0bits>
 8005fec:	42a8      	cmp	r0, r5
 8005fee:	dbe6      	blt.n	8005fbe <__gethex+0x426>
 8005ff0:	e7ee      	b.n	8005fd0 <__gethex+0x438>
 8005ff2:	bf00      	nop
 8005ff4:	08007be7 	.word	0x08007be7

08005ff8 <L_shift>:
 8005ff8:	f1c2 0208 	rsb	r2, r2, #8
 8005ffc:	0092      	lsls	r2, r2, #2
 8005ffe:	b570      	push	{r4, r5, r6, lr}
 8006000:	f1c2 0620 	rsb	r6, r2, #32
 8006004:	6843      	ldr	r3, [r0, #4]
 8006006:	6804      	ldr	r4, [r0, #0]
 8006008:	fa03 f506 	lsl.w	r5, r3, r6
 800600c:	432c      	orrs	r4, r5
 800600e:	40d3      	lsrs	r3, r2
 8006010:	6004      	str	r4, [r0, #0]
 8006012:	f840 3f04 	str.w	r3, [r0, #4]!
 8006016:	4288      	cmp	r0, r1
 8006018:	d3f4      	bcc.n	8006004 <L_shift+0xc>
 800601a:	bd70      	pop	{r4, r5, r6, pc}

0800601c <__match>:
 800601c:	b530      	push	{r4, r5, lr}
 800601e:	6803      	ldr	r3, [r0, #0]
 8006020:	3301      	adds	r3, #1
 8006022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006026:	b914      	cbnz	r4, 800602e <__match+0x12>
 8006028:	6003      	str	r3, [r0, #0]
 800602a:	2001      	movs	r0, #1
 800602c:	bd30      	pop	{r4, r5, pc}
 800602e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006032:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006036:	2d19      	cmp	r5, #25
 8006038:	bf98      	it	ls
 800603a:	3220      	addls	r2, #32
 800603c:	42a2      	cmp	r2, r4
 800603e:	d0f0      	beq.n	8006022 <__match+0x6>
 8006040:	2000      	movs	r0, #0
 8006042:	e7f3      	b.n	800602c <__match+0x10>

08006044 <__hexnan>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	2500      	movs	r5, #0
 800604a:	680b      	ldr	r3, [r1, #0]
 800604c:	4682      	mov	sl, r0
 800604e:	115e      	asrs	r6, r3, #5
 8006050:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006054:	f013 031f 	ands.w	r3, r3, #31
 8006058:	bf18      	it	ne
 800605a:	3604      	addne	r6, #4
 800605c:	1f37      	subs	r7, r6, #4
 800605e:	4690      	mov	r8, r2
 8006060:	46b9      	mov	r9, r7
 8006062:	463c      	mov	r4, r7
 8006064:	46ab      	mov	fp, r5
 8006066:	b087      	sub	sp, #28
 8006068:	6801      	ldr	r1, [r0, #0]
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	f846 5c04 	str.w	r5, [r6, #-4]
 8006070:	9502      	str	r5, [sp, #8]
 8006072:	784a      	ldrb	r2, [r1, #1]
 8006074:	1c4b      	adds	r3, r1, #1
 8006076:	9303      	str	r3, [sp, #12]
 8006078:	b342      	cbz	r2, 80060cc <__hexnan+0x88>
 800607a:	4610      	mov	r0, r2
 800607c:	9105      	str	r1, [sp, #20]
 800607e:	9204      	str	r2, [sp, #16]
 8006080:	f7ff fd75 	bl	8005b6e <__hexdig_fun>
 8006084:	2800      	cmp	r0, #0
 8006086:	d14f      	bne.n	8006128 <__hexnan+0xe4>
 8006088:	9a04      	ldr	r2, [sp, #16]
 800608a:	9905      	ldr	r1, [sp, #20]
 800608c:	2a20      	cmp	r2, #32
 800608e:	d818      	bhi.n	80060c2 <__hexnan+0x7e>
 8006090:	9b02      	ldr	r3, [sp, #8]
 8006092:	459b      	cmp	fp, r3
 8006094:	dd13      	ble.n	80060be <__hexnan+0x7a>
 8006096:	454c      	cmp	r4, r9
 8006098:	d206      	bcs.n	80060a8 <__hexnan+0x64>
 800609a:	2d07      	cmp	r5, #7
 800609c:	dc04      	bgt.n	80060a8 <__hexnan+0x64>
 800609e:	462a      	mov	r2, r5
 80060a0:	4649      	mov	r1, r9
 80060a2:	4620      	mov	r0, r4
 80060a4:	f7ff ffa8 	bl	8005ff8 <L_shift>
 80060a8:	4544      	cmp	r4, r8
 80060aa:	d950      	bls.n	800614e <__hexnan+0x10a>
 80060ac:	2300      	movs	r3, #0
 80060ae:	f1a4 0904 	sub.w	r9, r4, #4
 80060b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80060b6:	461d      	mov	r5, r3
 80060b8:	464c      	mov	r4, r9
 80060ba:	f8cd b008 	str.w	fp, [sp, #8]
 80060be:	9903      	ldr	r1, [sp, #12]
 80060c0:	e7d7      	b.n	8006072 <__hexnan+0x2e>
 80060c2:	2a29      	cmp	r2, #41	; 0x29
 80060c4:	d155      	bne.n	8006172 <__hexnan+0x12e>
 80060c6:	3102      	adds	r1, #2
 80060c8:	f8ca 1000 	str.w	r1, [sl]
 80060cc:	f1bb 0f00 	cmp.w	fp, #0
 80060d0:	d04f      	beq.n	8006172 <__hexnan+0x12e>
 80060d2:	454c      	cmp	r4, r9
 80060d4:	d206      	bcs.n	80060e4 <__hexnan+0xa0>
 80060d6:	2d07      	cmp	r5, #7
 80060d8:	dc04      	bgt.n	80060e4 <__hexnan+0xa0>
 80060da:	462a      	mov	r2, r5
 80060dc:	4649      	mov	r1, r9
 80060de:	4620      	mov	r0, r4
 80060e0:	f7ff ff8a 	bl	8005ff8 <L_shift>
 80060e4:	4544      	cmp	r4, r8
 80060e6:	d934      	bls.n	8006152 <__hexnan+0x10e>
 80060e8:	4623      	mov	r3, r4
 80060ea:	f1a8 0204 	sub.w	r2, r8, #4
 80060ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80060f2:	429f      	cmp	r7, r3
 80060f4:	f842 1f04 	str.w	r1, [r2, #4]!
 80060f8:	d2f9      	bcs.n	80060ee <__hexnan+0xaa>
 80060fa:	1b3b      	subs	r3, r7, r4
 80060fc:	f023 0303 	bic.w	r3, r3, #3
 8006100:	3304      	adds	r3, #4
 8006102:	3e03      	subs	r6, #3
 8006104:	3401      	adds	r4, #1
 8006106:	42a6      	cmp	r6, r4
 8006108:	bf38      	it	cc
 800610a:	2304      	movcc	r3, #4
 800610c:	2200      	movs	r2, #0
 800610e:	4443      	add	r3, r8
 8006110:	f843 2b04 	str.w	r2, [r3], #4
 8006114:	429f      	cmp	r7, r3
 8006116:	d2fb      	bcs.n	8006110 <__hexnan+0xcc>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	b91b      	cbnz	r3, 8006124 <__hexnan+0xe0>
 800611c:	4547      	cmp	r7, r8
 800611e:	d126      	bne.n	800616e <__hexnan+0x12a>
 8006120:	2301      	movs	r3, #1
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	2005      	movs	r0, #5
 8006126:	e025      	b.n	8006174 <__hexnan+0x130>
 8006128:	3501      	adds	r5, #1
 800612a:	2d08      	cmp	r5, #8
 800612c:	f10b 0b01 	add.w	fp, fp, #1
 8006130:	dd06      	ble.n	8006140 <__hexnan+0xfc>
 8006132:	4544      	cmp	r4, r8
 8006134:	d9c3      	bls.n	80060be <__hexnan+0x7a>
 8006136:	2300      	movs	r3, #0
 8006138:	2501      	movs	r5, #1
 800613a:	f844 3c04 	str.w	r3, [r4, #-4]
 800613e:	3c04      	subs	r4, #4
 8006140:	6822      	ldr	r2, [r4, #0]
 8006142:	f000 000f 	and.w	r0, r0, #15
 8006146:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800614a:	6020      	str	r0, [r4, #0]
 800614c:	e7b7      	b.n	80060be <__hexnan+0x7a>
 800614e:	2508      	movs	r5, #8
 8006150:	e7b5      	b.n	80060be <__hexnan+0x7a>
 8006152:	9b01      	ldr	r3, [sp, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0df      	beq.n	8006118 <__hexnan+0xd4>
 8006158:	f04f 32ff 	mov.w	r2, #4294967295
 800615c:	f1c3 0320 	rsb	r3, r3, #32
 8006160:	40da      	lsrs	r2, r3
 8006162:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006166:	4013      	ands	r3, r2
 8006168:	f846 3c04 	str.w	r3, [r6, #-4]
 800616c:	e7d4      	b.n	8006118 <__hexnan+0xd4>
 800616e:	3f04      	subs	r7, #4
 8006170:	e7d2      	b.n	8006118 <__hexnan+0xd4>
 8006172:	2004      	movs	r0, #4
 8006174:	b007      	add	sp, #28
 8006176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800617c <malloc>:
 800617c:	4b02      	ldr	r3, [pc, #8]	; (8006188 <malloc+0xc>)
 800617e:	4601      	mov	r1, r0
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	f000 b823 	b.w	80061cc <_malloc_r>
 8006186:	bf00      	nop
 8006188:	200001d0 	.word	0x200001d0

0800618c <sbrk_aligned>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	4e0e      	ldr	r6, [pc, #56]	; (80061c8 <sbrk_aligned+0x3c>)
 8006190:	460c      	mov	r4, r1
 8006192:	6831      	ldr	r1, [r6, #0]
 8006194:	4605      	mov	r5, r0
 8006196:	b911      	cbnz	r1, 800619e <sbrk_aligned+0x12>
 8006198:	f000 ff8e 	bl	80070b8 <_sbrk_r>
 800619c:	6030      	str	r0, [r6, #0]
 800619e:	4621      	mov	r1, r4
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 ff89 	bl	80070b8 <_sbrk_r>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	d00a      	beq.n	80061c0 <sbrk_aligned+0x34>
 80061aa:	1cc4      	adds	r4, r0, #3
 80061ac:	f024 0403 	bic.w	r4, r4, #3
 80061b0:	42a0      	cmp	r0, r4
 80061b2:	d007      	beq.n	80061c4 <sbrk_aligned+0x38>
 80061b4:	1a21      	subs	r1, r4, r0
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 ff7e 	bl	80070b8 <_sbrk_r>
 80061bc:	3001      	adds	r0, #1
 80061be:	d101      	bne.n	80061c4 <sbrk_aligned+0x38>
 80061c0:	f04f 34ff 	mov.w	r4, #4294967295
 80061c4:	4620      	mov	r0, r4
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
 80061c8:	20000408 	.word	0x20000408

080061cc <_malloc_r>:
 80061cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d0:	1ccd      	adds	r5, r1, #3
 80061d2:	f025 0503 	bic.w	r5, r5, #3
 80061d6:	3508      	adds	r5, #8
 80061d8:	2d0c      	cmp	r5, #12
 80061da:	bf38      	it	cc
 80061dc:	250c      	movcc	r5, #12
 80061de:	2d00      	cmp	r5, #0
 80061e0:	4607      	mov	r7, r0
 80061e2:	db01      	blt.n	80061e8 <_malloc_r+0x1c>
 80061e4:	42a9      	cmp	r1, r5
 80061e6:	d905      	bls.n	80061f4 <_malloc_r+0x28>
 80061e8:	230c      	movs	r3, #12
 80061ea:	2600      	movs	r6, #0
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	4630      	mov	r0, r6
 80061f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062c8 <_malloc_r+0xfc>
 80061f8:	f000 f87a 	bl	80062f0 <__malloc_lock>
 80061fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006200:	461c      	mov	r4, r3
 8006202:	bb5c      	cbnz	r4, 800625c <_malloc_r+0x90>
 8006204:	4629      	mov	r1, r5
 8006206:	4638      	mov	r0, r7
 8006208:	f7ff ffc0 	bl	800618c <sbrk_aligned>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	4604      	mov	r4, r0
 8006210:	d155      	bne.n	80062be <_malloc_r+0xf2>
 8006212:	f8d8 4000 	ldr.w	r4, [r8]
 8006216:	4626      	mov	r6, r4
 8006218:	2e00      	cmp	r6, #0
 800621a:	d145      	bne.n	80062a8 <_malloc_r+0xdc>
 800621c:	2c00      	cmp	r4, #0
 800621e:	d048      	beq.n	80062b2 <_malloc_r+0xe6>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	4631      	mov	r1, r6
 8006224:	4638      	mov	r0, r7
 8006226:	eb04 0903 	add.w	r9, r4, r3
 800622a:	f000 ff45 	bl	80070b8 <_sbrk_r>
 800622e:	4581      	cmp	r9, r0
 8006230:	d13f      	bne.n	80062b2 <_malloc_r+0xe6>
 8006232:	6821      	ldr	r1, [r4, #0]
 8006234:	4638      	mov	r0, r7
 8006236:	1a6d      	subs	r5, r5, r1
 8006238:	4629      	mov	r1, r5
 800623a:	f7ff ffa7 	bl	800618c <sbrk_aligned>
 800623e:	3001      	adds	r0, #1
 8006240:	d037      	beq.n	80062b2 <_malloc_r+0xe6>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	442b      	add	r3, r5
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	f8d8 3000 	ldr.w	r3, [r8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d038      	beq.n	80062c2 <_malloc_r+0xf6>
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	42a2      	cmp	r2, r4
 8006254:	d12b      	bne.n	80062ae <_malloc_r+0xe2>
 8006256:	2200      	movs	r2, #0
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	e00f      	b.n	800627c <_malloc_r+0xb0>
 800625c:	6822      	ldr	r2, [r4, #0]
 800625e:	1b52      	subs	r2, r2, r5
 8006260:	d41f      	bmi.n	80062a2 <_malloc_r+0xd6>
 8006262:	2a0b      	cmp	r2, #11
 8006264:	d917      	bls.n	8006296 <_malloc_r+0xca>
 8006266:	1961      	adds	r1, r4, r5
 8006268:	42a3      	cmp	r3, r4
 800626a:	6025      	str	r5, [r4, #0]
 800626c:	bf18      	it	ne
 800626e:	6059      	strne	r1, [r3, #4]
 8006270:	6863      	ldr	r3, [r4, #4]
 8006272:	bf08      	it	eq
 8006274:	f8c8 1000 	streq.w	r1, [r8]
 8006278:	5162      	str	r2, [r4, r5]
 800627a:	604b      	str	r3, [r1, #4]
 800627c:	4638      	mov	r0, r7
 800627e:	f104 060b 	add.w	r6, r4, #11
 8006282:	f000 f83b 	bl	80062fc <__malloc_unlock>
 8006286:	f026 0607 	bic.w	r6, r6, #7
 800628a:	1d23      	adds	r3, r4, #4
 800628c:	1af2      	subs	r2, r6, r3
 800628e:	d0ae      	beq.n	80061ee <_malloc_r+0x22>
 8006290:	1b9b      	subs	r3, r3, r6
 8006292:	50a3      	str	r3, [r4, r2]
 8006294:	e7ab      	b.n	80061ee <_malloc_r+0x22>
 8006296:	42a3      	cmp	r3, r4
 8006298:	6862      	ldr	r2, [r4, #4]
 800629a:	d1dd      	bne.n	8006258 <_malloc_r+0x8c>
 800629c:	f8c8 2000 	str.w	r2, [r8]
 80062a0:	e7ec      	b.n	800627c <_malloc_r+0xb0>
 80062a2:	4623      	mov	r3, r4
 80062a4:	6864      	ldr	r4, [r4, #4]
 80062a6:	e7ac      	b.n	8006202 <_malloc_r+0x36>
 80062a8:	4634      	mov	r4, r6
 80062aa:	6876      	ldr	r6, [r6, #4]
 80062ac:	e7b4      	b.n	8006218 <_malloc_r+0x4c>
 80062ae:	4613      	mov	r3, r2
 80062b0:	e7cc      	b.n	800624c <_malloc_r+0x80>
 80062b2:	230c      	movs	r3, #12
 80062b4:	4638      	mov	r0, r7
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	f000 f820 	bl	80062fc <__malloc_unlock>
 80062bc:	e797      	b.n	80061ee <_malloc_r+0x22>
 80062be:	6025      	str	r5, [r4, #0]
 80062c0:	e7dc      	b.n	800627c <_malloc_r+0xb0>
 80062c2:	605b      	str	r3, [r3, #4]
 80062c4:	deff      	udf	#255	; 0xff
 80062c6:	bf00      	nop
 80062c8:	20000404 	.word	0x20000404

080062cc <__ascii_mbtowc>:
 80062cc:	b082      	sub	sp, #8
 80062ce:	b901      	cbnz	r1, 80062d2 <__ascii_mbtowc+0x6>
 80062d0:	a901      	add	r1, sp, #4
 80062d2:	b142      	cbz	r2, 80062e6 <__ascii_mbtowc+0x1a>
 80062d4:	b14b      	cbz	r3, 80062ea <__ascii_mbtowc+0x1e>
 80062d6:	7813      	ldrb	r3, [r2, #0]
 80062d8:	600b      	str	r3, [r1, #0]
 80062da:	7812      	ldrb	r2, [r2, #0]
 80062dc:	1e10      	subs	r0, r2, #0
 80062de:	bf18      	it	ne
 80062e0:	2001      	movne	r0, #1
 80062e2:	b002      	add	sp, #8
 80062e4:	4770      	bx	lr
 80062e6:	4610      	mov	r0, r2
 80062e8:	e7fb      	b.n	80062e2 <__ascii_mbtowc+0x16>
 80062ea:	f06f 0001 	mvn.w	r0, #1
 80062ee:	e7f8      	b.n	80062e2 <__ascii_mbtowc+0x16>

080062f0 <__malloc_lock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	; (80062f8 <__malloc_lock+0x8>)
 80062f2:	f7fe bcf0 	b.w	8004cd6 <__retarget_lock_acquire_recursive>
 80062f6:	bf00      	nop
 80062f8:	20000400 	.word	0x20000400

080062fc <__malloc_unlock>:
 80062fc:	4801      	ldr	r0, [pc, #4]	; (8006304 <__malloc_unlock+0x8>)
 80062fe:	f7fe bceb 	b.w	8004cd8 <__retarget_lock_release_recursive>
 8006302:	bf00      	nop
 8006304:	20000400 	.word	0x20000400

08006308 <_Balloc>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	69c6      	ldr	r6, [r0, #28]
 800630c:	4604      	mov	r4, r0
 800630e:	460d      	mov	r5, r1
 8006310:	b976      	cbnz	r6, 8006330 <_Balloc+0x28>
 8006312:	2010      	movs	r0, #16
 8006314:	f7ff ff32 	bl	800617c <malloc>
 8006318:	4602      	mov	r2, r0
 800631a:	61e0      	str	r0, [r4, #28]
 800631c:	b920      	cbnz	r0, 8006328 <_Balloc+0x20>
 800631e:	216b      	movs	r1, #107	; 0x6b
 8006320:	4b17      	ldr	r3, [pc, #92]	; (8006380 <_Balloc+0x78>)
 8006322:	4818      	ldr	r0, [pc, #96]	; (8006384 <_Balloc+0x7c>)
 8006324:	f7fe fcfc 	bl	8004d20 <__assert_func>
 8006328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800632c:	6006      	str	r6, [r0, #0]
 800632e:	60c6      	str	r6, [r0, #12]
 8006330:	69e6      	ldr	r6, [r4, #28]
 8006332:	68f3      	ldr	r3, [r6, #12]
 8006334:	b183      	cbz	r3, 8006358 <_Balloc+0x50>
 8006336:	69e3      	ldr	r3, [r4, #28]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800633e:	b9b8      	cbnz	r0, 8006370 <_Balloc+0x68>
 8006340:	2101      	movs	r1, #1
 8006342:	fa01 f605 	lsl.w	r6, r1, r5
 8006346:	1d72      	adds	r2, r6, #5
 8006348:	4620      	mov	r0, r4
 800634a:	0092      	lsls	r2, r2, #2
 800634c:	f000 fecb 	bl	80070e6 <_calloc_r>
 8006350:	b160      	cbz	r0, 800636c <_Balloc+0x64>
 8006352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006356:	e00e      	b.n	8006376 <_Balloc+0x6e>
 8006358:	2221      	movs	r2, #33	; 0x21
 800635a:	2104      	movs	r1, #4
 800635c:	4620      	mov	r0, r4
 800635e:	f000 fec2 	bl	80070e6 <_calloc_r>
 8006362:	69e3      	ldr	r3, [r4, #28]
 8006364:	60f0      	str	r0, [r6, #12]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e4      	bne.n	8006336 <_Balloc+0x2e>
 800636c:	2000      	movs	r0, #0
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	6802      	ldr	r2, [r0, #0]
 8006372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006376:	2300      	movs	r3, #0
 8006378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800637c:	e7f7      	b.n	800636e <_Balloc+0x66>
 800637e:	bf00      	nop
 8006380:	08007acd 	.word	0x08007acd
 8006384:	08007c58 	.word	0x08007c58

08006388 <_Bfree>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	69c6      	ldr	r6, [r0, #28]
 800638c:	4605      	mov	r5, r0
 800638e:	460c      	mov	r4, r1
 8006390:	b976      	cbnz	r6, 80063b0 <_Bfree+0x28>
 8006392:	2010      	movs	r0, #16
 8006394:	f7ff fef2 	bl	800617c <malloc>
 8006398:	4602      	mov	r2, r0
 800639a:	61e8      	str	r0, [r5, #28]
 800639c:	b920      	cbnz	r0, 80063a8 <_Bfree+0x20>
 800639e:	218f      	movs	r1, #143	; 0x8f
 80063a0:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <_Bfree+0x3c>)
 80063a2:	4809      	ldr	r0, [pc, #36]	; (80063c8 <_Bfree+0x40>)
 80063a4:	f7fe fcbc 	bl	8004d20 <__assert_func>
 80063a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063ac:	6006      	str	r6, [r0, #0]
 80063ae:	60c6      	str	r6, [r0, #12]
 80063b0:	b13c      	cbz	r4, 80063c2 <_Bfree+0x3a>
 80063b2:	69eb      	ldr	r3, [r5, #28]
 80063b4:	6862      	ldr	r2, [r4, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063bc:	6021      	str	r1, [r4, #0]
 80063be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	08007acd 	.word	0x08007acd
 80063c8:	08007c58 	.word	0x08007c58

080063cc <__multadd>:
 80063cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d0:	4607      	mov	r7, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	461e      	mov	r6, r3
 80063d6:	2000      	movs	r0, #0
 80063d8:	690d      	ldr	r5, [r1, #16]
 80063da:	f101 0c14 	add.w	ip, r1, #20
 80063de:	f8dc 3000 	ldr.w	r3, [ip]
 80063e2:	3001      	adds	r0, #1
 80063e4:	b299      	uxth	r1, r3
 80063e6:	fb02 6101 	mla	r1, r2, r1, r6
 80063ea:	0c1e      	lsrs	r6, r3, #16
 80063ec:	0c0b      	lsrs	r3, r1, #16
 80063ee:	fb02 3306 	mla	r3, r2, r6, r3
 80063f2:	b289      	uxth	r1, r1
 80063f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063f8:	4285      	cmp	r5, r0
 80063fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063fe:	f84c 1b04 	str.w	r1, [ip], #4
 8006402:	dcec      	bgt.n	80063de <__multadd+0x12>
 8006404:	b30e      	cbz	r6, 800644a <__multadd+0x7e>
 8006406:	68a3      	ldr	r3, [r4, #8]
 8006408:	42ab      	cmp	r3, r5
 800640a:	dc19      	bgt.n	8006440 <__multadd+0x74>
 800640c:	6861      	ldr	r1, [r4, #4]
 800640e:	4638      	mov	r0, r7
 8006410:	3101      	adds	r1, #1
 8006412:	f7ff ff79 	bl	8006308 <_Balloc>
 8006416:	4680      	mov	r8, r0
 8006418:	b928      	cbnz	r0, 8006426 <__multadd+0x5a>
 800641a:	4602      	mov	r2, r0
 800641c:	21ba      	movs	r1, #186	; 0xba
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <__multadd+0x84>)
 8006420:	480c      	ldr	r0, [pc, #48]	; (8006454 <__multadd+0x88>)
 8006422:	f7fe fc7d 	bl	8004d20 <__assert_func>
 8006426:	6922      	ldr	r2, [r4, #16]
 8006428:	f104 010c 	add.w	r1, r4, #12
 800642c:	3202      	adds	r2, #2
 800642e:	0092      	lsls	r2, r2, #2
 8006430:	300c      	adds	r0, #12
 8006432:	f7fe fc60 	bl	8004cf6 <memcpy>
 8006436:	4621      	mov	r1, r4
 8006438:	4638      	mov	r0, r7
 800643a:	f7ff ffa5 	bl	8006388 <_Bfree>
 800643e:	4644      	mov	r4, r8
 8006440:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006444:	3501      	adds	r5, #1
 8006446:	615e      	str	r6, [r3, #20]
 8006448:	6125      	str	r5, [r4, #16]
 800644a:	4620      	mov	r0, r4
 800644c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006450:	08007be7 	.word	0x08007be7
 8006454:	08007c58 	.word	0x08007c58

08006458 <__s2b>:
 8006458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800645c:	4615      	mov	r5, r2
 800645e:	2209      	movs	r2, #9
 8006460:	461f      	mov	r7, r3
 8006462:	3308      	adds	r3, #8
 8006464:	460c      	mov	r4, r1
 8006466:	fb93 f3f2 	sdiv	r3, r3, r2
 800646a:	4606      	mov	r6, r0
 800646c:	2201      	movs	r2, #1
 800646e:	2100      	movs	r1, #0
 8006470:	429a      	cmp	r2, r3
 8006472:	db09      	blt.n	8006488 <__s2b+0x30>
 8006474:	4630      	mov	r0, r6
 8006476:	f7ff ff47 	bl	8006308 <_Balloc>
 800647a:	b940      	cbnz	r0, 800648e <__s2b+0x36>
 800647c:	4602      	mov	r2, r0
 800647e:	21d3      	movs	r1, #211	; 0xd3
 8006480:	4b18      	ldr	r3, [pc, #96]	; (80064e4 <__s2b+0x8c>)
 8006482:	4819      	ldr	r0, [pc, #100]	; (80064e8 <__s2b+0x90>)
 8006484:	f7fe fc4c 	bl	8004d20 <__assert_func>
 8006488:	0052      	lsls	r2, r2, #1
 800648a:	3101      	adds	r1, #1
 800648c:	e7f0      	b.n	8006470 <__s2b+0x18>
 800648e:	9b08      	ldr	r3, [sp, #32]
 8006490:	2d09      	cmp	r5, #9
 8006492:	6143      	str	r3, [r0, #20]
 8006494:	f04f 0301 	mov.w	r3, #1
 8006498:	6103      	str	r3, [r0, #16]
 800649a:	dd16      	ble.n	80064ca <__s2b+0x72>
 800649c:	f104 0909 	add.w	r9, r4, #9
 80064a0:	46c8      	mov	r8, r9
 80064a2:	442c      	add	r4, r5
 80064a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80064a8:	4601      	mov	r1, r0
 80064aa:	220a      	movs	r2, #10
 80064ac:	4630      	mov	r0, r6
 80064ae:	3b30      	subs	r3, #48	; 0x30
 80064b0:	f7ff ff8c 	bl	80063cc <__multadd>
 80064b4:	45a0      	cmp	r8, r4
 80064b6:	d1f5      	bne.n	80064a4 <__s2b+0x4c>
 80064b8:	f1a5 0408 	sub.w	r4, r5, #8
 80064bc:	444c      	add	r4, r9
 80064be:	1b2d      	subs	r5, r5, r4
 80064c0:	1963      	adds	r3, r4, r5
 80064c2:	42bb      	cmp	r3, r7
 80064c4:	db04      	blt.n	80064d0 <__s2b+0x78>
 80064c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ca:	2509      	movs	r5, #9
 80064cc:	340a      	adds	r4, #10
 80064ce:	e7f6      	b.n	80064be <__s2b+0x66>
 80064d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064d4:	4601      	mov	r1, r0
 80064d6:	220a      	movs	r2, #10
 80064d8:	4630      	mov	r0, r6
 80064da:	3b30      	subs	r3, #48	; 0x30
 80064dc:	f7ff ff76 	bl	80063cc <__multadd>
 80064e0:	e7ee      	b.n	80064c0 <__s2b+0x68>
 80064e2:	bf00      	nop
 80064e4:	08007be7 	.word	0x08007be7
 80064e8:	08007c58 	.word	0x08007c58

080064ec <__hi0bits>:
 80064ec:	0c02      	lsrs	r2, r0, #16
 80064ee:	0412      	lsls	r2, r2, #16
 80064f0:	4603      	mov	r3, r0
 80064f2:	b9ca      	cbnz	r2, 8006528 <__hi0bits+0x3c>
 80064f4:	0403      	lsls	r3, r0, #16
 80064f6:	2010      	movs	r0, #16
 80064f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064fc:	bf04      	itt	eq
 80064fe:	021b      	lsleq	r3, r3, #8
 8006500:	3008      	addeq	r0, #8
 8006502:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006506:	bf04      	itt	eq
 8006508:	011b      	lsleq	r3, r3, #4
 800650a:	3004      	addeq	r0, #4
 800650c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006510:	bf04      	itt	eq
 8006512:	009b      	lsleq	r3, r3, #2
 8006514:	3002      	addeq	r0, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	db05      	blt.n	8006526 <__hi0bits+0x3a>
 800651a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800651e:	f100 0001 	add.w	r0, r0, #1
 8006522:	bf08      	it	eq
 8006524:	2020      	moveq	r0, #32
 8006526:	4770      	bx	lr
 8006528:	2000      	movs	r0, #0
 800652a:	e7e5      	b.n	80064f8 <__hi0bits+0xc>

0800652c <__lo0bits>:
 800652c:	6803      	ldr	r3, [r0, #0]
 800652e:	4602      	mov	r2, r0
 8006530:	f013 0007 	ands.w	r0, r3, #7
 8006534:	d00b      	beq.n	800654e <__lo0bits+0x22>
 8006536:	07d9      	lsls	r1, r3, #31
 8006538:	d421      	bmi.n	800657e <__lo0bits+0x52>
 800653a:	0798      	lsls	r0, r3, #30
 800653c:	bf49      	itett	mi
 800653e:	085b      	lsrmi	r3, r3, #1
 8006540:	089b      	lsrpl	r3, r3, #2
 8006542:	2001      	movmi	r0, #1
 8006544:	6013      	strmi	r3, [r2, #0]
 8006546:	bf5c      	itt	pl
 8006548:	2002      	movpl	r0, #2
 800654a:	6013      	strpl	r3, [r2, #0]
 800654c:	4770      	bx	lr
 800654e:	b299      	uxth	r1, r3
 8006550:	b909      	cbnz	r1, 8006556 <__lo0bits+0x2a>
 8006552:	2010      	movs	r0, #16
 8006554:	0c1b      	lsrs	r3, r3, #16
 8006556:	b2d9      	uxtb	r1, r3
 8006558:	b909      	cbnz	r1, 800655e <__lo0bits+0x32>
 800655a:	3008      	adds	r0, #8
 800655c:	0a1b      	lsrs	r3, r3, #8
 800655e:	0719      	lsls	r1, r3, #28
 8006560:	bf04      	itt	eq
 8006562:	091b      	lsreq	r3, r3, #4
 8006564:	3004      	addeq	r0, #4
 8006566:	0799      	lsls	r1, r3, #30
 8006568:	bf04      	itt	eq
 800656a:	089b      	lsreq	r3, r3, #2
 800656c:	3002      	addeq	r0, #2
 800656e:	07d9      	lsls	r1, r3, #31
 8006570:	d403      	bmi.n	800657a <__lo0bits+0x4e>
 8006572:	085b      	lsrs	r3, r3, #1
 8006574:	f100 0001 	add.w	r0, r0, #1
 8006578:	d003      	beq.n	8006582 <__lo0bits+0x56>
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	4770      	bx	lr
 800657e:	2000      	movs	r0, #0
 8006580:	4770      	bx	lr
 8006582:	2020      	movs	r0, #32
 8006584:	4770      	bx	lr
	...

08006588 <__i2b>:
 8006588:	b510      	push	{r4, lr}
 800658a:	460c      	mov	r4, r1
 800658c:	2101      	movs	r1, #1
 800658e:	f7ff febb 	bl	8006308 <_Balloc>
 8006592:	4602      	mov	r2, r0
 8006594:	b928      	cbnz	r0, 80065a2 <__i2b+0x1a>
 8006596:	f240 1145 	movw	r1, #325	; 0x145
 800659a:	4b04      	ldr	r3, [pc, #16]	; (80065ac <__i2b+0x24>)
 800659c:	4804      	ldr	r0, [pc, #16]	; (80065b0 <__i2b+0x28>)
 800659e:	f7fe fbbf 	bl	8004d20 <__assert_func>
 80065a2:	2301      	movs	r3, #1
 80065a4:	6144      	str	r4, [r0, #20]
 80065a6:	6103      	str	r3, [r0, #16]
 80065a8:	bd10      	pop	{r4, pc}
 80065aa:	bf00      	nop
 80065ac:	08007be7 	.word	0x08007be7
 80065b0:	08007c58 	.word	0x08007c58

080065b4 <__multiply>:
 80065b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b8:	4691      	mov	r9, r2
 80065ba:	690a      	ldr	r2, [r1, #16]
 80065bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80065c0:	460c      	mov	r4, r1
 80065c2:	429a      	cmp	r2, r3
 80065c4:	bfbe      	ittt	lt
 80065c6:	460b      	movlt	r3, r1
 80065c8:	464c      	movlt	r4, r9
 80065ca:	4699      	movlt	r9, r3
 80065cc:	6927      	ldr	r7, [r4, #16]
 80065ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065d2:	68a3      	ldr	r3, [r4, #8]
 80065d4:	6861      	ldr	r1, [r4, #4]
 80065d6:	eb07 060a 	add.w	r6, r7, sl
 80065da:	42b3      	cmp	r3, r6
 80065dc:	b085      	sub	sp, #20
 80065de:	bfb8      	it	lt
 80065e0:	3101      	addlt	r1, #1
 80065e2:	f7ff fe91 	bl	8006308 <_Balloc>
 80065e6:	b930      	cbnz	r0, 80065f6 <__multiply+0x42>
 80065e8:	4602      	mov	r2, r0
 80065ea:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80065ee:	4b43      	ldr	r3, [pc, #268]	; (80066fc <__multiply+0x148>)
 80065f0:	4843      	ldr	r0, [pc, #268]	; (8006700 <__multiply+0x14c>)
 80065f2:	f7fe fb95 	bl	8004d20 <__assert_func>
 80065f6:	f100 0514 	add.w	r5, r0, #20
 80065fa:	462b      	mov	r3, r5
 80065fc:	2200      	movs	r2, #0
 80065fe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006602:	4543      	cmp	r3, r8
 8006604:	d321      	bcc.n	800664a <__multiply+0x96>
 8006606:	f104 0314 	add.w	r3, r4, #20
 800660a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800660e:	f109 0314 	add.w	r3, r9, #20
 8006612:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006616:	9202      	str	r2, [sp, #8]
 8006618:	1b3a      	subs	r2, r7, r4
 800661a:	3a15      	subs	r2, #21
 800661c:	f022 0203 	bic.w	r2, r2, #3
 8006620:	3204      	adds	r2, #4
 8006622:	f104 0115 	add.w	r1, r4, #21
 8006626:	428f      	cmp	r7, r1
 8006628:	bf38      	it	cc
 800662a:	2204      	movcc	r2, #4
 800662c:	9201      	str	r2, [sp, #4]
 800662e:	9a02      	ldr	r2, [sp, #8]
 8006630:	9303      	str	r3, [sp, #12]
 8006632:	429a      	cmp	r2, r3
 8006634:	d80c      	bhi.n	8006650 <__multiply+0x9c>
 8006636:	2e00      	cmp	r6, #0
 8006638:	dd03      	ble.n	8006642 <__multiply+0x8e>
 800663a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800663e:	2b00      	cmp	r3, #0
 8006640:	d05a      	beq.n	80066f8 <__multiply+0x144>
 8006642:	6106      	str	r6, [r0, #16]
 8006644:	b005      	add	sp, #20
 8006646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664a:	f843 2b04 	str.w	r2, [r3], #4
 800664e:	e7d8      	b.n	8006602 <__multiply+0x4e>
 8006650:	f8b3 a000 	ldrh.w	sl, [r3]
 8006654:	f1ba 0f00 	cmp.w	sl, #0
 8006658:	d023      	beq.n	80066a2 <__multiply+0xee>
 800665a:	46a9      	mov	r9, r5
 800665c:	f04f 0c00 	mov.w	ip, #0
 8006660:	f104 0e14 	add.w	lr, r4, #20
 8006664:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006668:	f8d9 1000 	ldr.w	r1, [r9]
 800666c:	fa1f fb82 	uxth.w	fp, r2
 8006670:	b289      	uxth	r1, r1
 8006672:	fb0a 110b 	mla	r1, sl, fp, r1
 8006676:	4461      	add	r1, ip
 8006678:	f8d9 c000 	ldr.w	ip, [r9]
 800667c:	0c12      	lsrs	r2, r2, #16
 800667e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006682:	fb0a c202 	mla	r2, sl, r2, ip
 8006686:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800668a:	b289      	uxth	r1, r1
 800668c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006690:	4577      	cmp	r7, lr
 8006692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006696:	f849 1b04 	str.w	r1, [r9], #4
 800669a:	d8e3      	bhi.n	8006664 <__multiply+0xb0>
 800669c:	9a01      	ldr	r2, [sp, #4]
 800669e:	f845 c002 	str.w	ip, [r5, r2]
 80066a2:	9a03      	ldr	r2, [sp, #12]
 80066a4:	3304      	adds	r3, #4
 80066a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066aa:	f1b9 0f00 	cmp.w	r9, #0
 80066ae:	d021      	beq.n	80066f4 <__multiply+0x140>
 80066b0:	46ae      	mov	lr, r5
 80066b2:	f04f 0a00 	mov.w	sl, #0
 80066b6:	6829      	ldr	r1, [r5, #0]
 80066b8:	f104 0c14 	add.w	ip, r4, #20
 80066bc:	f8bc b000 	ldrh.w	fp, [ip]
 80066c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80066c4:	b289      	uxth	r1, r1
 80066c6:	fb09 220b 	mla	r2, r9, fp, r2
 80066ca:	4452      	add	r2, sl
 80066cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066d0:	f84e 1b04 	str.w	r1, [lr], #4
 80066d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80066d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066dc:	f8be 1000 	ldrh.w	r1, [lr]
 80066e0:	4567      	cmp	r7, ip
 80066e2:	fb09 110a 	mla	r1, r9, sl, r1
 80066e6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80066ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066ee:	d8e5      	bhi.n	80066bc <__multiply+0x108>
 80066f0:	9a01      	ldr	r2, [sp, #4]
 80066f2:	50a9      	str	r1, [r5, r2]
 80066f4:	3504      	adds	r5, #4
 80066f6:	e79a      	b.n	800662e <__multiply+0x7a>
 80066f8:	3e01      	subs	r6, #1
 80066fa:	e79c      	b.n	8006636 <__multiply+0x82>
 80066fc:	08007be7 	.word	0x08007be7
 8006700:	08007c58 	.word	0x08007c58

08006704 <__pow5mult>:
 8006704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006708:	4615      	mov	r5, r2
 800670a:	f012 0203 	ands.w	r2, r2, #3
 800670e:	4606      	mov	r6, r0
 8006710:	460f      	mov	r7, r1
 8006712:	d007      	beq.n	8006724 <__pow5mult+0x20>
 8006714:	4c25      	ldr	r4, [pc, #148]	; (80067ac <__pow5mult+0xa8>)
 8006716:	3a01      	subs	r2, #1
 8006718:	2300      	movs	r3, #0
 800671a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800671e:	f7ff fe55 	bl	80063cc <__multadd>
 8006722:	4607      	mov	r7, r0
 8006724:	10ad      	asrs	r5, r5, #2
 8006726:	d03d      	beq.n	80067a4 <__pow5mult+0xa0>
 8006728:	69f4      	ldr	r4, [r6, #28]
 800672a:	b97c      	cbnz	r4, 800674c <__pow5mult+0x48>
 800672c:	2010      	movs	r0, #16
 800672e:	f7ff fd25 	bl	800617c <malloc>
 8006732:	4602      	mov	r2, r0
 8006734:	61f0      	str	r0, [r6, #28]
 8006736:	b928      	cbnz	r0, 8006744 <__pow5mult+0x40>
 8006738:	f240 11b3 	movw	r1, #435	; 0x1b3
 800673c:	4b1c      	ldr	r3, [pc, #112]	; (80067b0 <__pow5mult+0xac>)
 800673e:	481d      	ldr	r0, [pc, #116]	; (80067b4 <__pow5mult+0xb0>)
 8006740:	f7fe faee 	bl	8004d20 <__assert_func>
 8006744:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006748:	6004      	str	r4, [r0, #0]
 800674a:	60c4      	str	r4, [r0, #12]
 800674c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006750:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006754:	b94c      	cbnz	r4, 800676a <__pow5mult+0x66>
 8006756:	f240 2171 	movw	r1, #625	; 0x271
 800675a:	4630      	mov	r0, r6
 800675c:	f7ff ff14 	bl	8006588 <__i2b>
 8006760:	2300      	movs	r3, #0
 8006762:	4604      	mov	r4, r0
 8006764:	f8c8 0008 	str.w	r0, [r8, #8]
 8006768:	6003      	str	r3, [r0, #0]
 800676a:	f04f 0900 	mov.w	r9, #0
 800676e:	07eb      	lsls	r3, r5, #31
 8006770:	d50a      	bpl.n	8006788 <__pow5mult+0x84>
 8006772:	4639      	mov	r1, r7
 8006774:	4622      	mov	r2, r4
 8006776:	4630      	mov	r0, r6
 8006778:	f7ff ff1c 	bl	80065b4 <__multiply>
 800677c:	4680      	mov	r8, r0
 800677e:	4639      	mov	r1, r7
 8006780:	4630      	mov	r0, r6
 8006782:	f7ff fe01 	bl	8006388 <_Bfree>
 8006786:	4647      	mov	r7, r8
 8006788:	106d      	asrs	r5, r5, #1
 800678a:	d00b      	beq.n	80067a4 <__pow5mult+0xa0>
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	b938      	cbnz	r0, 80067a0 <__pow5mult+0x9c>
 8006790:	4622      	mov	r2, r4
 8006792:	4621      	mov	r1, r4
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff ff0d 	bl	80065b4 <__multiply>
 800679a:	6020      	str	r0, [r4, #0]
 800679c:	f8c0 9000 	str.w	r9, [r0]
 80067a0:	4604      	mov	r4, r0
 80067a2:	e7e4      	b.n	800676e <__pow5mult+0x6a>
 80067a4:	4638      	mov	r0, r7
 80067a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067aa:	bf00      	nop
 80067ac:	08007da8 	.word	0x08007da8
 80067b0:	08007acd 	.word	0x08007acd
 80067b4:	08007c58 	.word	0x08007c58

080067b8 <__lshift>:
 80067b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	460c      	mov	r4, r1
 80067be:	4607      	mov	r7, r0
 80067c0:	4691      	mov	r9, r2
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	6849      	ldr	r1, [r1, #4]
 80067c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067ca:	68a3      	ldr	r3, [r4, #8]
 80067cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067d0:	f108 0601 	add.w	r6, r8, #1
 80067d4:	42b3      	cmp	r3, r6
 80067d6:	db0b      	blt.n	80067f0 <__lshift+0x38>
 80067d8:	4638      	mov	r0, r7
 80067da:	f7ff fd95 	bl	8006308 <_Balloc>
 80067de:	4605      	mov	r5, r0
 80067e0:	b948      	cbnz	r0, 80067f6 <__lshift+0x3e>
 80067e2:	4602      	mov	r2, r0
 80067e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80067e8:	4b27      	ldr	r3, [pc, #156]	; (8006888 <__lshift+0xd0>)
 80067ea:	4828      	ldr	r0, [pc, #160]	; (800688c <__lshift+0xd4>)
 80067ec:	f7fe fa98 	bl	8004d20 <__assert_func>
 80067f0:	3101      	adds	r1, #1
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	e7ee      	b.n	80067d4 <__lshift+0x1c>
 80067f6:	2300      	movs	r3, #0
 80067f8:	f100 0114 	add.w	r1, r0, #20
 80067fc:	f100 0210 	add.w	r2, r0, #16
 8006800:	4618      	mov	r0, r3
 8006802:	4553      	cmp	r3, sl
 8006804:	db33      	blt.n	800686e <__lshift+0xb6>
 8006806:	6920      	ldr	r0, [r4, #16]
 8006808:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800680c:	f104 0314 	add.w	r3, r4, #20
 8006810:	f019 091f 	ands.w	r9, r9, #31
 8006814:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006818:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800681c:	d02b      	beq.n	8006876 <__lshift+0xbe>
 800681e:	468a      	mov	sl, r1
 8006820:	2200      	movs	r2, #0
 8006822:	f1c9 0e20 	rsb	lr, r9, #32
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	fa00 f009 	lsl.w	r0, r0, r9
 800682c:	4310      	orrs	r0, r2
 800682e:	f84a 0b04 	str.w	r0, [sl], #4
 8006832:	f853 2b04 	ldr.w	r2, [r3], #4
 8006836:	459c      	cmp	ip, r3
 8006838:	fa22 f20e 	lsr.w	r2, r2, lr
 800683c:	d8f3      	bhi.n	8006826 <__lshift+0x6e>
 800683e:	ebac 0304 	sub.w	r3, ip, r4
 8006842:	3b15      	subs	r3, #21
 8006844:	f023 0303 	bic.w	r3, r3, #3
 8006848:	3304      	adds	r3, #4
 800684a:	f104 0015 	add.w	r0, r4, #21
 800684e:	4584      	cmp	ip, r0
 8006850:	bf38      	it	cc
 8006852:	2304      	movcc	r3, #4
 8006854:	50ca      	str	r2, [r1, r3]
 8006856:	b10a      	cbz	r2, 800685c <__lshift+0xa4>
 8006858:	f108 0602 	add.w	r6, r8, #2
 800685c:	3e01      	subs	r6, #1
 800685e:	4638      	mov	r0, r7
 8006860:	4621      	mov	r1, r4
 8006862:	612e      	str	r6, [r5, #16]
 8006864:	f7ff fd90 	bl	8006388 <_Bfree>
 8006868:	4628      	mov	r0, r5
 800686a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006872:	3301      	adds	r3, #1
 8006874:	e7c5      	b.n	8006802 <__lshift+0x4a>
 8006876:	3904      	subs	r1, #4
 8006878:	f853 2b04 	ldr.w	r2, [r3], #4
 800687c:	459c      	cmp	ip, r3
 800687e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006882:	d8f9      	bhi.n	8006878 <__lshift+0xc0>
 8006884:	e7ea      	b.n	800685c <__lshift+0xa4>
 8006886:	bf00      	nop
 8006888:	08007be7 	.word	0x08007be7
 800688c:	08007c58 	.word	0x08007c58

08006890 <__mcmp>:
 8006890:	4603      	mov	r3, r0
 8006892:	690a      	ldr	r2, [r1, #16]
 8006894:	6900      	ldr	r0, [r0, #16]
 8006896:	b530      	push	{r4, r5, lr}
 8006898:	1a80      	subs	r0, r0, r2
 800689a:	d10d      	bne.n	80068b8 <__mcmp+0x28>
 800689c:	3314      	adds	r3, #20
 800689e:	3114      	adds	r1, #20
 80068a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068b0:	4295      	cmp	r5, r2
 80068b2:	d002      	beq.n	80068ba <__mcmp+0x2a>
 80068b4:	d304      	bcc.n	80068c0 <__mcmp+0x30>
 80068b6:	2001      	movs	r0, #1
 80068b8:	bd30      	pop	{r4, r5, pc}
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	d3f4      	bcc.n	80068a8 <__mcmp+0x18>
 80068be:	e7fb      	b.n	80068b8 <__mcmp+0x28>
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	e7f8      	b.n	80068b8 <__mcmp+0x28>
	...

080068c8 <__mdiff>:
 80068c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	460d      	mov	r5, r1
 80068ce:	4607      	mov	r7, r0
 80068d0:	4611      	mov	r1, r2
 80068d2:	4628      	mov	r0, r5
 80068d4:	4614      	mov	r4, r2
 80068d6:	f7ff ffdb 	bl	8006890 <__mcmp>
 80068da:	1e06      	subs	r6, r0, #0
 80068dc:	d111      	bne.n	8006902 <__mdiff+0x3a>
 80068de:	4631      	mov	r1, r6
 80068e0:	4638      	mov	r0, r7
 80068e2:	f7ff fd11 	bl	8006308 <_Balloc>
 80068e6:	4602      	mov	r2, r0
 80068e8:	b928      	cbnz	r0, 80068f6 <__mdiff+0x2e>
 80068ea:	f240 2137 	movw	r1, #567	; 0x237
 80068ee:	4b3a      	ldr	r3, [pc, #232]	; (80069d8 <__mdiff+0x110>)
 80068f0:	483a      	ldr	r0, [pc, #232]	; (80069dc <__mdiff+0x114>)
 80068f2:	f7fe fa15 	bl	8004d20 <__assert_func>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80068fc:	4610      	mov	r0, r2
 80068fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006902:	bfa4      	itt	ge
 8006904:	4623      	movge	r3, r4
 8006906:	462c      	movge	r4, r5
 8006908:	4638      	mov	r0, r7
 800690a:	6861      	ldr	r1, [r4, #4]
 800690c:	bfa6      	itte	ge
 800690e:	461d      	movge	r5, r3
 8006910:	2600      	movge	r6, #0
 8006912:	2601      	movlt	r6, #1
 8006914:	f7ff fcf8 	bl	8006308 <_Balloc>
 8006918:	4602      	mov	r2, r0
 800691a:	b918      	cbnz	r0, 8006924 <__mdiff+0x5c>
 800691c:	f240 2145 	movw	r1, #581	; 0x245
 8006920:	4b2d      	ldr	r3, [pc, #180]	; (80069d8 <__mdiff+0x110>)
 8006922:	e7e5      	b.n	80068f0 <__mdiff+0x28>
 8006924:	f102 0814 	add.w	r8, r2, #20
 8006928:	46c2      	mov	sl, r8
 800692a:	f04f 0c00 	mov.w	ip, #0
 800692e:	6927      	ldr	r7, [r4, #16]
 8006930:	60c6      	str	r6, [r0, #12]
 8006932:	692e      	ldr	r6, [r5, #16]
 8006934:	f104 0014 	add.w	r0, r4, #20
 8006938:	f105 0914 	add.w	r9, r5, #20
 800693c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006940:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006944:	3410      	adds	r4, #16
 8006946:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800694a:	f859 3b04 	ldr.w	r3, [r9], #4
 800694e:	fa1f f18b 	uxth.w	r1, fp
 8006952:	4461      	add	r1, ip
 8006954:	fa1f fc83 	uxth.w	ip, r3
 8006958:	0c1b      	lsrs	r3, r3, #16
 800695a:	eba1 010c 	sub.w	r1, r1, ip
 800695e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006962:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006966:	b289      	uxth	r1, r1
 8006968:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800696c:	454e      	cmp	r6, r9
 800696e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006972:	f84a 1b04 	str.w	r1, [sl], #4
 8006976:	d8e6      	bhi.n	8006946 <__mdiff+0x7e>
 8006978:	1b73      	subs	r3, r6, r5
 800697a:	3b15      	subs	r3, #21
 800697c:	f023 0303 	bic.w	r3, r3, #3
 8006980:	3515      	adds	r5, #21
 8006982:	3304      	adds	r3, #4
 8006984:	42ae      	cmp	r6, r5
 8006986:	bf38      	it	cc
 8006988:	2304      	movcc	r3, #4
 800698a:	4418      	add	r0, r3
 800698c:	4443      	add	r3, r8
 800698e:	461e      	mov	r6, r3
 8006990:	4605      	mov	r5, r0
 8006992:	4575      	cmp	r5, lr
 8006994:	d30e      	bcc.n	80069b4 <__mdiff+0xec>
 8006996:	f10e 0103 	add.w	r1, lr, #3
 800699a:	1a09      	subs	r1, r1, r0
 800699c:	f021 0103 	bic.w	r1, r1, #3
 80069a0:	3803      	subs	r0, #3
 80069a2:	4586      	cmp	lr, r0
 80069a4:	bf38      	it	cc
 80069a6:	2100      	movcc	r1, #0
 80069a8:	440b      	add	r3, r1
 80069aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069ae:	b189      	cbz	r1, 80069d4 <__mdiff+0x10c>
 80069b0:	6117      	str	r7, [r2, #16]
 80069b2:	e7a3      	b.n	80068fc <__mdiff+0x34>
 80069b4:	f855 8b04 	ldr.w	r8, [r5], #4
 80069b8:	fa1f f188 	uxth.w	r1, r8
 80069bc:	4461      	add	r1, ip
 80069be:	140c      	asrs	r4, r1, #16
 80069c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80069c4:	b289      	uxth	r1, r1
 80069c6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80069ca:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80069ce:	f846 1b04 	str.w	r1, [r6], #4
 80069d2:	e7de      	b.n	8006992 <__mdiff+0xca>
 80069d4:	3f01      	subs	r7, #1
 80069d6:	e7e8      	b.n	80069aa <__mdiff+0xe2>
 80069d8:	08007be7 	.word	0x08007be7
 80069dc:	08007c58 	.word	0x08007c58

080069e0 <__ulp>:
 80069e0:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <__ulp+0x3c>)
 80069e2:	400b      	ands	r3, r1
 80069e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	dc08      	bgt.n	80069fe <__ulp+0x1e>
 80069ec:	425b      	negs	r3, r3
 80069ee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80069f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80069f6:	da04      	bge.n	8006a02 <__ulp+0x22>
 80069f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069fc:	4113      	asrs	r3, r2
 80069fe:	2200      	movs	r2, #0
 8006a00:	e008      	b.n	8006a14 <__ulp+0x34>
 8006a02:	f1a2 0314 	sub.w	r3, r2, #20
 8006a06:	2b1e      	cmp	r3, #30
 8006a08:	bfd6      	itet	le
 8006a0a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006a0e:	2201      	movgt	r2, #1
 8006a10:	40da      	lsrle	r2, r3
 8006a12:	2300      	movs	r3, #0
 8006a14:	4619      	mov	r1, r3
 8006a16:	4610      	mov	r0, r2
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	7ff00000 	.word	0x7ff00000

08006a20 <__b2d>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	6905      	ldr	r5, [r0, #16]
 8006a24:	f100 0714 	add.w	r7, r0, #20
 8006a28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006a2c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006a30:	1f2e      	subs	r6, r5, #4
 8006a32:	4620      	mov	r0, r4
 8006a34:	f7ff fd5a 	bl	80064ec <__hi0bits>
 8006a38:	f1c0 0220 	rsb	r2, r0, #32
 8006a3c:	280a      	cmp	r0, #10
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006aac <__b2d+0x8c>
 8006a44:	600a      	str	r2, [r1, #0]
 8006a46:	dc12      	bgt.n	8006a6e <__b2d+0x4e>
 8006a48:	f1c0 0e0b 	rsb	lr, r0, #11
 8006a4c:	fa24 f20e 	lsr.w	r2, r4, lr
 8006a50:	42b7      	cmp	r7, r6
 8006a52:	ea42 010c 	orr.w	r1, r2, ip
 8006a56:	bf2c      	ite	cs
 8006a58:	2200      	movcs	r2, #0
 8006a5a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006a5e:	3315      	adds	r3, #21
 8006a60:	fa04 f303 	lsl.w	r3, r4, r3
 8006a64:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a6e:	42b7      	cmp	r7, r6
 8006a70:	bf2e      	itee	cs
 8006a72:	2200      	movcs	r2, #0
 8006a74:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006a78:	f1a5 0608 	subcc.w	r6, r5, #8
 8006a7c:	3b0b      	subs	r3, #11
 8006a7e:	d012      	beq.n	8006aa6 <__b2d+0x86>
 8006a80:	f1c3 0520 	rsb	r5, r3, #32
 8006a84:	fa22 f105 	lsr.w	r1, r2, r5
 8006a88:	409c      	lsls	r4, r3
 8006a8a:	430c      	orrs	r4, r1
 8006a8c:	42be      	cmp	r6, r7
 8006a8e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006a92:	bf94      	ite	ls
 8006a94:	2400      	movls	r4, #0
 8006a96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	40ec      	lsrs	r4, r5
 8006a9e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006aa2:	4322      	orrs	r2, r4
 8006aa4:	e7e1      	b.n	8006a6a <__b2d+0x4a>
 8006aa6:	ea44 010c 	orr.w	r1, r4, ip
 8006aaa:	e7de      	b.n	8006a6a <__b2d+0x4a>
 8006aac:	3ff00000 	.word	0x3ff00000

08006ab0 <__d2b>:
 8006ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	4617      	mov	r7, r2
 8006ab6:	461c      	mov	r4, r3
 8006ab8:	9e08      	ldr	r6, [sp, #32]
 8006aba:	f7ff fc25 	bl	8006308 <_Balloc>
 8006abe:	4605      	mov	r5, r0
 8006ac0:	b930      	cbnz	r0, 8006ad0 <__d2b+0x20>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	f240 310f 	movw	r1, #783	; 0x30f
 8006ac8:	4b22      	ldr	r3, [pc, #136]	; (8006b54 <__d2b+0xa4>)
 8006aca:	4823      	ldr	r0, [pc, #140]	; (8006b58 <__d2b+0xa8>)
 8006acc:	f7fe f928 	bl	8004d20 <__assert_func>
 8006ad0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006ad4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006ad8:	bb24      	cbnz	r4, 8006b24 <__d2b+0x74>
 8006ada:	2f00      	cmp	r7, #0
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	d026      	beq.n	8006b2e <__d2b+0x7e>
 8006ae0:	4668      	mov	r0, sp
 8006ae2:	9700      	str	r7, [sp, #0]
 8006ae4:	f7ff fd22 	bl	800652c <__lo0bits>
 8006ae8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006aec:	b1e8      	cbz	r0, 8006b2a <__d2b+0x7a>
 8006aee:	f1c0 0320 	rsb	r3, r0, #32
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	430b      	orrs	r3, r1
 8006af8:	40c2      	lsrs	r2, r0
 8006afa:	616b      	str	r3, [r5, #20]
 8006afc:	9201      	str	r2, [sp, #4]
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	bf14      	ite	ne
 8006b04:	2102      	movne	r1, #2
 8006b06:	2101      	moveq	r1, #1
 8006b08:	61ab      	str	r3, [r5, #24]
 8006b0a:	6129      	str	r1, [r5, #16]
 8006b0c:	b1bc      	cbz	r4, 8006b3e <__d2b+0x8e>
 8006b0e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006b12:	4404      	add	r4, r0
 8006b14:	6034      	str	r4, [r6, #0]
 8006b16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1c:	6018      	str	r0, [r3, #0]
 8006b1e:	4628      	mov	r0, r5
 8006b20:	b003      	add	sp, #12
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b28:	e7d7      	b.n	8006ada <__d2b+0x2a>
 8006b2a:	6169      	str	r1, [r5, #20]
 8006b2c:	e7e7      	b.n	8006afe <__d2b+0x4e>
 8006b2e:	a801      	add	r0, sp, #4
 8006b30:	f7ff fcfc 	bl	800652c <__lo0bits>
 8006b34:	9b01      	ldr	r3, [sp, #4]
 8006b36:	2101      	movs	r1, #1
 8006b38:	616b      	str	r3, [r5, #20]
 8006b3a:	3020      	adds	r0, #32
 8006b3c:	e7e5      	b.n	8006b0a <__d2b+0x5a>
 8006b3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b42:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006b46:	6030      	str	r0, [r6, #0]
 8006b48:	6918      	ldr	r0, [r3, #16]
 8006b4a:	f7ff fccf 	bl	80064ec <__hi0bits>
 8006b4e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b52:	e7e2      	b.n	8006b1a <__d2b+0x6a>
 8006b54:	08007be7 	.word	0x08007be7
 8006b58:	08007c58 	.word	0x08007c58

08006b5c <__ratio>:
 8006b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b60:	4688      	mov	r8, r1
 8006b62:	4669      	mov	r1, sp
 8006b64:	4681      	mov	r9, r0
 8006b66:	f7ff ff5b 	bl	8006a20 <__b2d>
 8006b6a:	460f      	mov	r7, r1
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	460d      	mov	r5, r1
 8006b70:	4640      	mov	r0, r8
 8006b72:	a901      	add	r1, sp, #4
 8006b74:	f7ff ff54 	bl	8006a20 <__b2d>
 8006b78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b7c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006b80:	468b      	mov	fp, r1
 8006b82:	eba3 0c02 	sub.w	ip, r3, r2
 8006b86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bfd5      	itete	le
 8006b94:	460a      	movle	r2, r1
 8006b96:	462a      	movgt	r2, r5
 8006b98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006b9c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006ba0:	bfd8      	it	le
 8006ba2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006ba6:	465b      	mov	r3, fp
 8006ba8:	4602      	mov	r2, r0
 8006baa:	4639      	mov	r1, r7
 8006bac:	4620      	mov	r0, r4
 8006bae:	f7f9 fdc7 	bl	8000740 <__aeabi_ddiv>
 8006bb2:	b003      	add	sp, #12
 8006bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bb8 <__copybits>:
 8006bb8:	3901      	subs	r1, #1
 8006bba:	b570      	push	{r4, r5, r6, lr}
 8006bbc:	1149      	asrs	r1, r1, #5
 8006bbe:	6914      	ldr	r4, [r2, #16]
 8006bc0:	3101      	adds	r1, #1
 8006bc2:	f102 0314 	add.w	r3, r2, #20
 8006bc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006bca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006bce:	1f05      	subs	r5, r0, #4
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	d30c      	bcc.n	8006bee <__copybits+0x36>
 8006bd4:	1aa3      	subs	r3, r4, r2
 8006bd6:	3b11      	subs	r3, #17
 8006bd8:	f023 0303 	bic.w	r3, r3, #3
 8006bdc:	3211      	adds	r2, #17
 8006bde:	42a2      	cmp	r2, r4
 8006be0:	bf88      	it	hi
 8006be2:	2300      	movhi	r3, #0
 8006be4:	4418      	add	r0, r3
 8006be6:	2300      	movs	r3, #0
 8006be8:	4288      	cmp	r0, r1
 8006bea:	d305      	bcc.n	8006bf8 <__copybits+0x40>
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
 8006bee:	f853 6b04 	ldr.w	r6, [r3], #4
 8006bf2:	f845 6f04 	str.w	r6, [r5, #4]!
 8006bf6:	e7eb      	b.n	8006bd0 <__copybits+0x18>
 8006bf8:	f840 3b04 	str.w	r3, [r0], #4
 8006bfc:	e7f4      	b.n	8006be8 <__copybits+0x30>

08006bfe <__any_on>:
 8006bfe:	f100 0214 	add.w	r2, r0, #20
 8006c02:	6900      	ldr	r0, [r0, #16]
 8006c04:	114b      	asrs	r3, r1, #5
 8006c06:	4298      	cmp	r0, r3
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	db11      	blt.n	8006c30 <__any_on+0x32>
 8006c0c:	dd0a      	ble.n	8006c24 <__any_on+0x26>
 8006c0e:	f011 011f 	ands.w	r1, r1, #31
 8006c12:	d007      	beq.n	8006c24 <__any_on+0x26>
 8006c14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006c18:	fa24 f001 	lsr.w	r0, r4, r1
 8006c1c:	fa00 f101 	lsl.w	r1, r0, r1
 8006c20:	428c      	cmp	r4, r1
 8006c22:	d10b      	bne.n	8006c3c <__any_on+0x3e>
 8006c24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d803      	bhi.n	8006c34 <__any_on+0x36>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	bd10      	pop	{r4, pc}
 8006c30:	4603      	mov	r3, r0
 8006c32:	e7f7      	b.n	8006c24 <__any_on+0x26>
 8006c34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	d0f5      	beq.n	8006c28 <__any_on+0x2a>
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	e7f6      	b.n	8006c2e <__any_on+0x30>

08006c40 <__ascii_wctomb>:
 8006c40:	4603      	mov	r3, r0
 8006c42:	4608      	mov	r0, r1
 8006c44:	b141      	cbz	r1, 8006c58 <__ascii_wctomb+0x18>
 8006c46:	2aff      	cmp	r2, #255	; 0xff
 8006c48:	d904      	bls.n	8006c54 <__ascii_wctomb+0x14>
 8006c4a:	228a      	movs	r2, #138	; 0x8a
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	4770      	bx	lr
 8006c54:	2001      	movs	r0, #1
 8006c56:	700a      	strb	r2, [r1, #0]
 8006c58:	4770      	bx	lr

08006c5a <__ssputs_r>:
 8006c5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c5e:	461f      	mov	r7, r3
 8006c60:	688e      	ldr	r6, [r1, #8]
 8006c62:	4682      	mov	sl, r0
 8006c64:	42be      	cmp	r6, r7
 8006c66:	460c      	mov	r4, r1
 8006c68:	4690      	mov	r8, r2
 8006c6a:	680b      	ldr	r3, [r1, #0]
 8006c6c:	d82c      	bhi.n	8006cc8 <__ssputs_r+0x6e>
 8006c6e:	898a      	ldrh	r2, [r1, #12]
 8006c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c74:	d026      	beq.n	8006cc4 <__ssputs_r+0x6a>
 8006c76:	6965      	ldr	r5, [r4, #20]
 8006c78:	6909      	ldr	r1, [r1, #16]
 8006c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c7e:	eba3 0901 	sub.w	r9, r3, r1
 8006c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c86:	1c7b      	adds	r3, r7, #1
 8006c88:	444b      	add	r3, r9
 8006c8a:	106d      	asrs	r5, r5, #1
 8006c8c:	429d      	cmp	r5, r3
 8006c8e:	bf38      	it	cc
 8006c90:	461d      	movcc	r5, r3
 8006c92:	0553      	lsls	r3, r2, #21
 8006c94:	d527      	bpl.n	8006ce6 <__ssputs_r+0x8c>
 8006c96:	4629      	mov	r1, r5
 8006c98:	f7ff fa98 	bl	80061cc <_malloc_r>
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	b360      	cbz	r0, 8006cfa <__ssputs_r+0xa0>
 8006ca0:	464a      	mov	r2, r9
 8006ca2:	6921      	ldr	r1, [r4, #16]
 8006ca4:	f7fe f827 	bl	8004cf6 <memcpy>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb2:	81a3      	strh	r3, [r4, #12]
 8006cb4:	6126      	str	r6, [r4, #16]
 8006cb6:	444e      	add	r6, r9
 8006cb8:	6026      	str	r6, [r4, #0]
 8006cba:	463e      	mov	r6, r7
 8006cbc:	6165      	str	r5, [r4, #20]
 8006cbe:	eba5 0509 	sub.w	r5, r5, r9
 8006cc2:	60a5      	str	r5, [r4, #8]
 8006cc4:	42be      	cmp	r6, r7
 8006cc6:	d900      	bls.n	8006cca <__ssputs_r+0x70>
 8006cc8:	463e      	mov	r6, r7
 8006cca:	4632      	mov	r2, r6
 8006ccc:	4641      	mov	r1, r8
 8006cce:	6820      	ldr	r0, [r4, #0]
 8006cd0:	f000 f9d8 	bl	8007084 <memmove>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	68a3      	ldr	r3, [r4, #8]
 8006cd8:	1b9b      	subs	r3, r3, r6
 8006cda:	60a3      	str	r3, [r4, #8]
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	4433      	add	r3, r6
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce6:	462a      	mov	r2, r5
 8006ce8:	f000 fa11 	bl	800710e <_realloc_r>
 8006cec:	4606      	mov	r6, r0
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d1e0      	bne.n	8006cb4 <__ssputs_r+0x5a>
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	6921      	ldr	r1, [r4, #16]
 8006cf6:	f7fe fe9f 	bl	8005a38 <_free_r>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	f8ca 3000 	str.w	r3, [sl]
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f04f 30ff 	mov.w	r0, #4294967295
 8006d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	e7e9      	b.n	8006ce2 <__ssputs_r+0x88>
	...

08006d10 <_svfiprintf_r>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	4698      	mov	r8, r3
 8006d16:	898b      	ldrh	r3, [r1, #12]
 8006d18:	4607      	mov	r7, r0
 8006d1a:	061b      	lsls	r3, r3, #24
 8006d1c:	460d      	mov	r5, r1
 8006d1e:	4614      	mov	r4, r2
 8006d20:	b09d      	sub	sp, #116	; 0x74
 8006d22:	d50e      	bpl.n	8006d42 <_svfiprintf_r+0x32>
 8006d24:	690b      	ldr	r3, [r1, #16]
 8006d26:	b963      	cbnz	r3, 8006d42 <_svfiprintf_r+0x32>
 8006d28:	2140      	movs	r1, #64	; 0x40
 8006d2a:	f7ff fa4f 	bl	80061cc <_malloc_r>
 8006d2e:	6028      	str	r0, [r5, #0]
 8006d30:	6128      	str	r0, [r5, #16]
 8006d32:	b920      	cbnz	r0, 8006d3e <_svfiprintf_r+0x2e>
 8006d34:	230c      	movs	r3, #12
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	e0d0      	b.n	8006ee0 <_svfiprintf_r+0x1d0>
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	616b      	str	r3, [r5, #20]
 8006d42:	2300      	movs	r3, #0
 8006d44:	9309      	str	r3, [sp, #36]	; 0x24
 8006d46:	2320      	movs	r3, #32
 8006d48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d4c:	2330      	movs	r3, #48	; 0x30
 8006d4e:	f04f 0901 	mov.w	r9, #1
 8006d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d56:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006ef8 <_svfiprintf_r+0x1e8>
 8006d5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d5e:	4623      	mov	r3, r4
 8006d60:	469a      	mov	sl, r3
 8006d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d66:	b10a      	cbz	r2, 8006d6c <_svfiprintf_r+0x5c>
 8006d68:	2a25      	cmp	r2, #37	; 0x25
 8006d6a:	d1f9      	bne.n	8006d60 <_svfiprintf_r+0x50>
 8006d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006d70:	d00b      	beq.n	8006d8a <_svfiprintf_r+0x7a>
 8006d72:	465b      	mov	r3, fp
 8006d74:	4622      	mov	r2, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f7ff ff6e 	bl	8006c5a <__ssputs_r>
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f000 80a9 	beq.w	8006ed6 <_svfiprintf_r+0x1c6>
 8006d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d86:	445a      	add	r2, fp
 8006d88:	9209      	str	r2, [sp, #36]	; 0x24
 8006d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 80a1 	beq.w	8006ed6 <_svfiprintf_r+0x1c6>
 8006d94:	2300      	movs	r3, #0
 8006d96:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d9e:	f10a 0a01 	add.w	sl, sl, #1
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	9307      	str	r3, [sp, #28]
 8006da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006daa:	931a      	str	r3, [sp, #104]	; 0x68
 8006dac:	4654      	mov	r4, sl
 8006dae:	2205      	movs	r2, #5
 8006db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db4:	4850      	ldr	r0, [pc, #320]	; (8006ef8 <_svfiprintf_r+0x1e8>)
 8006db6:	f7fd ff90 	bl	8004cda <memchr>
 8006dba:	9a04      	ldr	r2, [sp, #16]
 8006dbc:	b9d8      	cbnz	r0, 8006df6 <_svfiprintf_r+0xe6>
 8006dbe:	06d0      	lsls	r0, r2, #27
 8006dc0:	bf44      	itt	mi
 8006dc2:	2320      	movmi	r3, #32
 8006dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dc8:	0711      	lsls	r1, r2, #28
 8006dca:	bf44      	itt	mi
 8006dcc:	232b      	movmi	r3, #43	; 0x2b
 8006dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd8:	d015      	beq.n	8006e06 <_svfiprintf_r+0xf6>
 8006dda:	4654      	mov	r4, sl
 8006ddc:	2000      	movs	r0, #0
 8006dde:	f04f 0c0a 	mov.w	ip, #10
 8006de2:	9a07      	ldr	r2, [sp, #28]
 8006de4:	4621      	mov	r1, r4
 8006de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dea:	3b30      	subs	r3, #48	; 0x30
 8006dec:	2b09      	cmp	r3, #9
 8006dee:	d94d      	bls.n	8006e8c <_svfiprintf_r+0x17c>
 8006df0:	b1b0      	cbz	r0, 8006e20 <_svfiprintf_r+0x110>
 8006df2:	9207      	str	r2, [sp, #28]
 8006df4:	e014      	b.n	8006e20 <_svfiprintf_r+0x110>
 8006df6:	eba0 0308 	sub.w	r3, r0, r8
 8006dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	46a2      	mov	sl, r4
 8006e02:	9304      	str	r3, [sp, #16]
 8006e04:	e7d2      	b.n	8006dac <_svfiprintf_r+0x9c>
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	1d19      	adds	r1, r3, #4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	9103      	str	r1, [sp, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bfbb      	ittet	lt
 8006e12:	425b      	neglt	r3, r3
 8006e14:	f042 0202 	orrlt.w	r2, r2, #2
 8006e18:	9307      	strge	r3, [sp, #28]
 8006e1a:	9307      	strlt	r3, [sp, #28]
 8006e1c:	bfb8      	it	lt
 8006e1e:	9204      	strlt	r2, [sp, #16]
 8006e20:	7823      	ldrb	r3, [r4, #0]
 8006e22:	2b2e      	cmp	r3, #46	; 0x2e
 8006e24:	d10c      	bne.n	8006e40 <_svfiprintf_r+0x130>
 8006e26:	7863      	ldrb	r3, [r4, #1]
 8006e28:	2b2a      	cmp	r3, #42	; 0x2a
 8006e2a:	d134      	bne.n	8006e96 <_svfiprintf_r+0x186>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	3402      	adds	r4, #2
 8006e30:	1d1a      	adds	r2, r3, #4
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	9203      	str	r2, [sp, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	bfb8      	it	lt
 8006e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e3e:	9305      	str	r3, [sp, #20]
 8006e40:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006efc <_svfiprintf_r+0x1ec>
 8006e44:	2203      	movs	r2, #3
 8006e46:	4650      	mov	r0, sl
 8006e48:	7821      	ldrb	r1, [r4, #0]
 8006e4a:	f7fd ff46 	bl	8004cda <memchr>
 8006e4e:	b138      	cbz	r0, 8006e60 <_svfiprintf_r+0x150>
 8006e50:	2240      	movs	r2, #64	; 0x40
 8006e52:	9b04      	ldr	r3, [sp, #16]
 8006e54:	eba0 000a 	sub.w	r0, r0, sl
 8006e58:	4082      	lsls	r2, r0
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	3401      	adds	r4, #1
 8006e5e:	9304      	str	r3, [sp, #16]
 8006e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e64:	2206      	movs	r2, #6
 8006e66:	4826      	ldr	r0, [pc, #152]	; (8006f00 <_svfiprintf_r+0x1f0>)
 8006e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e6c:	f7fd ff35 	bl	8004cda <memchr>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d038      	beq.n	8006ee6 <_svfiprintf_r+0x1d6>
 8006e74:	4b23      	ldr	r3, [pc, #140]	; (8006f04 <_svfiprintf_r+0x1f4>)
 8006e76:	bb1b      	cbnz	r3, 8006ec0 <_svfiprintf_r+0x1b0>
 8006e78:	9b03      	ldr	r3, [sp, #12]
 8006e7a:	3307      	adds	r3, #7
 8006e7c:	f023 0307 	bic.w	r3, r3, #7
 8006e80:	3308      	adds	r3, #8
 8006e82:	9303      	str	r3, [sp, #12]
 8006e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e86:	4433      	add	r3, r6
 8006e88:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8a:	e768      	b.n	8006d5e <_svfiprintf_r+0x4e>
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	2001      	movs	r0, #1
 8006e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e94:	e7a6      	b.n	8006de4 <_svfiprintf_r+0xd4>
 8006e96:	2300      	movs	r3, #0
 8006e98:	f04f 0c0a 	mov.w	ip, #10
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	3401      	adds	r4, #1
 8006ea0:	9305      	str	r3, [sp, #20]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ea8:	3a30      	subs	r2, #48	; 0x30
 8006eaa:	2a09      	cmp	r2, #9
 8006eac:	d903      	bls.n	8006eb6 <_svfiprintf_r+0x1a6>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0c6      	beq.n	8006e40 <_svfiprintf_r+0x130>
 8006eb2:	9105      	str	r1, [sp, #20]
 8006eb4:	e7c4      	b.n	8006e40 <_svfiprintf_r+0x130>
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	2301      	movs	r3, #1
 8006eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ebe:	e7f0      	b.n	8006ea2 <_svfiprintf_r+0x192>
 8006ec0:	ab03      	add	r3, sp, #12
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	462a      	mov	r2, r5
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <_svfiprintf_r+0x1f8>)
 8006eca:	a904      	add	r1, sp, #16
 8006ecc:	f7fd f930 	bl	8004130 <_printf_float>
 8006ed0:	1c42      	adds	r2, r0, #1
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	d1d6      	bne.n	8006e84 <_svfiprintf_r+0x174>
 8006ed6:	89ab      	ldrh	r3, [r5, #12]
 8006ed8:	065b      	lsls	r3, r3, #25
 8006eda:	f53f af2d 	bmi.w	8006d38 <_svfiprintf_r+0x28>
 8006ede:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ee0:	b01d      	add	sp, #116	; 0x74
 8006ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	462a      	mov	r2, r5
 8006eec:	4638      	mov	r0, r7
 8006eee:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <_svfiprintf_r+0x1f8>)
 8006ef0:	a904      	add	r1, sp, #16
 8006ef2:	f7fd fbbd 	bl	8004670 <_printf_i>
 8006ef6:	e7eb      	b.n	8006ed0 <_svfiprintf_r+0x1c0>
 8006ef8:	08007db4 	.word	0x08007db4
 8006efc:	08007dba 	.word	0x08007dba
 8006f00:	08007dbe 	.word	0x08007dbe
 8006f04:	08004131 	.word	0x08004131
 8006f08:	08006c5b 	.word	0x08006c5b

08006f0c <__sflush_r>:
 8006f0c:	898a      	ldrh	r2, [r1, #12]
 8006f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f10:	4605      	mov	r5, r0
 8006f12:	0710      	lsls	r0, r2, #28
 8006f14:	460c      	mov	r4, r1
 8006f16:	d457      	bmi.n	8006fc8 <__sflush_r+0xbc>
 8006f18:	684b      	ldr	r3, [r1, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dc04      	bgt.n	8006f28 <__sflush_r+0x1c>
 8006f1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	dc01      	bgt.n	8006f28 <__sflush_r+0x1c>
 8006f24:	2000      	movs	r0, #0
 8006f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f2a:	2e00      	cmp	r6, #0
 8006f2c:	d0fa      	beq.n	8006f24 <__sflush_r+0x18>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f34:	682f      	ldr	r7, [r5, #0]
 8006f36:	6a21      	ldr	r1, [r4, #32]
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	d032      	beq.n	8006fa2 <__sflush_r+0x96>
 8006f3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	075a      	lsls	r2, r3, #29
 8006f42:	d505      	bpl.n	8006f50 <__sflush_r+0x44>
 8006f44:	6863      	ldr	r3, [r4, #4]
 8006f46:	1ac0      	subs	r0, r0, r3
 8006f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f4a:	b10b      	cbz	r3, 8006f50 <__sflush_r+0x44>
 8006f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f4e:	1ac0      	subs	r0, r0, r3
 8006f50:	2300      	movs	r3, #0
 8006f52:	4602      	mov	r2, r0
 8006f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f56:	4628      	mov	r0, r5
 8006f58:	6a21      	ldr	r1, [r4, #32]
 8006f5a:	47b0      	blx	r6
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	d106      	bne.n	8006f70 <__sflush_r+0x64>
 8006f62:	6829      	ldr	r1, [r5, #0]
 8006f64:	291d      	cmp	r1, #29
 8006f66:	d82b      	bhi.n	8006fc0 <__sflush_r+0xb4>
 8006f68:	4a28      	ldr	r2, [pc, #160]	; (800700c <__sflush_r+0x100>)
 8006f6a:	410a      	asrs	r2, r1
 8006f6c:	07d6      	lsls	r6, r2, #31
 8006f6e:	d427      	bmi.n	8006fc0 <__sflush_r+0xb4>
 8006f70:	2200      	movs	r2, #0
 8006f72:	6062      	str	r2, [r4, #4]
 8006f74:	6922      	ldr	r2, [r4, #16]
 8006f76:	04d9      	lsls	r1, r3, #19
 8006f78:	6022      	str	r2, [r4, #0]
 8006f7a:	d504      	bpl.n	8006f86 <__sflush_r+0x7a>
 8006f7c:	1c42      	adds	r2, r0, #1
 8006f7e:	d101      	bne.n	8006f84 <__sflush_r+0x78>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b903      	cbnz	r3, 8006f86 <__sflush_r+0x7a>
 8006f84:	6560      	str	r0, [r4, #84]	; 0x54
 8006f86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f88:	602f      	str	r7, [r5, #0]
 8006f8a:	2900      	cmp	r1, #0
 8006f8c:	d0ca      	beq.n	8006f24 <__sflush_r+0x18>
 8006f8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f92:	4299      	cmp	r1, r3
 8006f94:	d002      	beq.n	8006f9c <__sflush_r+0x90>
 8006f96:	4628      	mov	r0, r5
 8006f98:	f7fe fd4e 	bl	8005a38 <_free_r>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	6360      	str	r0, [r4, #52]	; 0x34
 8006fa0:	e7c1      	b.n	8006f26 <__sflush_r+0x1a>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b0      	blx	r6
 8006fa8:	1c41      	adds	r1, r0, #1
 8006faa:	d1c8      	bne.n	8006f3e <__sflush_r+0x32>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0c5      	beq.n	8006f3e <__sflush_r+0x32>
 8006fb2:	2b1d      	cmp	r3, #29
 8006fb4:	d001      	beq.n	8006fba <__sflush_r+0xae>
 8006fb6:	2b16      	cmp	r3, #22
 8006fb8:	d101      	bne.n	8006fbe <__sflush_r+0xb2>
 8006fba:	602f      	str	r7, [r5, #0]
 8006fbc:	e7b2      	b.n	8006f24 <__sflush_r+0x18>
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	e7ae      	b.n	8006f26 <__sflush_r+0x1a>
 8006fc8:	690f      	ldr	r7, [r1, #16]
 8006fca:	2f00      	cmp	r7, #0
 8006fcc:	d0aa      	beq.n	8006f24 <__sflush_r+0x18>
 8006fce:	0793      	lsls	r3, r2, #30
 8006fd0:	bf18      	it	ne
 8006fd2:	2300      	movne	r3, #0
 8006fd4:	680e      	ldr	r6, [r1, #0]
 8006fd6:	bf08      	it	eq
 8006fd8:	694b      	ldreq	r3, [r1, #20]
 8006fda:	1bf6      	subs	r6, r6, r7
 8006fdc:	600f      	str	r7, [r1, #0]
 8006fde:	608b      	str	r3, [r1, #8]
 8006fe0:	2e00      	cmp	r6, #0
 8006fe2:	dd9f      	ble.n	8006f24 <__sflush_r+0x18>
 8006fe4:	4633      	mov	r3, r6
 8006fe6:	463a      	mov	r2, r7
 8006fe8:	4628      	mov	r0, r5
 8006fea:	6a21      	ldr	r1, [r4, #32]
 8006fec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006ff0:	47e0      	blx	ip
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	dc06      	bgt.n	8007004 <__sflush_r+0xf8>
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007000:	81a3      	strh	r3, [r4, #12]
 8007002:	e790      	b.n	8006f26 <__sflush_r+0x1a>
 8007004:	4407      	add	r7, r0
 8007006:	1a36      	subs	r6, r6, r0
 8007008:	e7ea      	b.n	8006fe0 <__sflush_r+0xd4>
 800700a:	bf00      	nop
 800700c:	dfbffffe 	.word	0xdfbffffe

08007010 <_fflush_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	690b      	ldr	r3, [r1, #16]
 8007014:	4605      	mov	r5, r0
 8007016:	460c      	mov	r4, r1
 8007018:	b913      	cbnz	r3, 8007020 <_fflush_r+0x10>
 800701a:	2500      	movs	r5, #0
 800701c:	4628      	mov	r0, r5
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	b118      	cbz	r0, 800702a <_fflush_r+0x1a>
 8007022:	6a03      	ldr	r3, [r0, #32]
 8007024:	b90b      	cbnz	r3, 800702a <_fflush_r+0x1a>
 8007026:	f7fd fcd1 	bl	80049cc <__sinit>
 800702a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0f3      	beq.n	800701a <_fflush_r+0xa>
 8007032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007034:	07d0      	lsls	r0, r2, #31
 8007036:	d404      	bmi.n	8007042 <_fflush_r+0x32>
 8007038:	0599      	lsls	r1, r3, #22
 800703a:	d402      	bmi.n	8007042 <_fflush_r+0x32>
 800703c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800703e:	f7fd fe4a 	bl	8004cd6 <__retarget_lock_acquire_recursive>
 8007042:	4628      	mov	r0, r5
 8007044:	4621      	mov	r1, r4
 8007046:	f7ff ff61 	bl	8006f0c <__sflush_r>
 800704a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800704c:	4605      	mov	r5, r0
 800704e:	07da      	lsls	r2, r3, #31
 8007050:	d4e4      	bmi.n	800701c <_fflush_r+0xc>
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	059b      	lsls	r3, r3, #22
 8007056:	d4e1      	bmi.n	800701c <_fflush_r+0xc>
 8007058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800705a:	f7fd fe3d 	bl	8004cd8 <__retarget_lock_release_recursive>
 800705e:	e7dd      	b.n	800701c <_fflush_r+0xc>

08007060 <fiprintf>:
 8007060:	b40e      	push	{r1, r2, r3}
 8007062:	b503      	push	{r0, r1, lr}
 8007064:	4601      	mov	r1, r0
 8007066:	ab03      	add	r3, sp, #12
 8007068:	4805      	ldr	r0, [pc, #20]	; (8007080 <fiprintf+0x20>)
 800706a:	f853 2b04 	ldr.w	r2, [r3], #4
 800706e:	6800      	ldr	r0, [r0, #0]
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	f000 f8a3 	bl	80071bc <_vfiprintf_r>
 8007076:	b002      	add	sp, #8
 8007078:	f85d eb04 	ldr.w	lr, [sp], #4
 800707c:	b003      	add	sp, #12
 800707e:	4770      	bx	lr
 8007080:	200001d0 	.word	0x200001d0

08007084 <memmove>:
 8007084:	4288      	cmp	r0, r1
 8007086:	b510      	push	{r4, lr}
 8007088:	eb01 0402 	add.w	r4, r1, r2
 800708c:	d902      	bls.n	8007094 <memmove+0x10>
 800708e:	4284      	cmp	r4, r0
 8007090:	4623      	mov	r3, r4
 8007092:	d807      	bhi.n	80070a4 <memmove+0x20>
 8007094:	1e43      	subs	r3, r0, #1
 8007096:	42a1      	cmp	r1, r4
 8007098:	d008      	beq.n	80070ac <memmove+0x28>
 800709a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800709e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070a2:	e7f8      	b.n	8007096 <memmove+0x12>
 80070a4:	4601      	mov	r1, r0
 80070a6:	4402      	add	r2, r0
 80070a8:	428a      	cmp	r2, r1
 80070aa:	d100      	bne.n	80070ae <memmove+0x2a>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070b6:	e7f7      	b.n	80070a8 <memmove+0x24>

080070b8 <_sbrk_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	2300      	movs	r3, #0
 80070bc:	4d05      	ldr	r5, [pc, #20]	; (80070d4 <_sbrk_r+0x1c>)
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	602b      	str	r3, [r5, #0]
 80070c4:	f7fa fa40 	bl	8001548 <_sbrk>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d102      	bne.n	80070d2 <_sbrk_r+0x1a>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b103      	cbz	r3, 80070d2 <_sbrk_r+0x1a>
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	200003fc 	.word	0x200003fc

080070d8 <abort>:
 80070d8:	2006      	movs	r0, #6
 80070da:	b508      	push	{r3, lr}
 80070dc:	f000 fa46 	bl	800756c <raise>
 80070e0:	2001      	movs	r0, #1
 80070e2:	f7fa f9be 	bl	8001462 <_exit>

080070e6 <_calloc_r>:
 80070e6:	b570      	push	{r4, r5, r6, lr}
 80070e8:	fba1 5402 	umull	r5, r4, r1, r2
 80070ec:	b934      	cbnz	r4, 80070fc <_calloc_r+0x16>
 80070ee:	4629      	mov	r1, r5
 80070f0:	f7ff f86c 	bl	80061cc <_malloc_r>
 80070f4:	4606      	mov	r6, r0
 80070f6:	b928      	cbnz	r0, 8007104 <_calloc_r+0x1e>
 80070f8:	4630      	mov	r0, r6
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	220c      	movs	r2, #12
 80070fe:	2600      	movs	r6, #0
 8007100:	6002      	str	r2, [r0, #0]
 8007102:	e7f9      	b.n	80070f8 <_calloc_r+0x12>
 8007104:	462a      	mov	r2, r5
 8007106:	4621      	mov	r1, r4
 8007108:	f7fd fcfa 	bl	8004b00 <memset>
 800710c:	e7f4      	b.n	80070f8 <_calloc_r+0x12>

0800710e <_realloc_r>:
 800710e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007112:	4680      	mov	r8, r0
 8007114:	4614      	mov	r4, r2
 8007116:	460e      	mov	r6, r1
 8007118:	b921      	cbnz	r1, 8007124 <_realloc_r+0x16>
 800711a:	4611      	mov	r1, r2
 800711c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007120:	f7ff b854 	b.w	80061cc <_malloc_r>
 8007124:	b92a      	cbnz	r2, 8007132 <_realloc_r+0x24>
 8007126:	f7fe fc87 	bl	8005a38 <_free_r>
 800712a:	4625      	mov	r5, r4
 800712c:	4628      	mov	r0, r5
 800712e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007132:	f000 fa37 	bl	80075a4 <_malloc_usable_size_r>
 8007136:	4284      	cmp	r4, r0
 8007138:	4607      	mov	r7, r0
 800713a:	d802      	bhi.n	8007142 <_realloc_r+0x34>
 800713c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007140:	d812      	bhi.n	8007168 <_realloc_r+0x5a>
 8007142:	4621      	mov	r1, r4
 8007144:	4640      	mov	r0, r8
 8007146:	f7ff f841 	bl	80061cc <_malloc_r>
 800714a:	4605      	mov	r5, r0
 800714c:	2800      	cmp	r0, #0
 800714e:	d0ed      	beq.n	800712c <_realloc_r+0x1e>
 8007150:	42bc      	cmp	r4, r7
 8007152:	4622      	mov	r2, r4
 8007154:	4631      	mov	r1, r6
 8007156:	bf28      	it	cs
 8007158:	463a      	movcs	r2, r7
 800715a:	f7fd fdcc 	bl	8004cf6 <memcpy>
 800715e:	4631      	mov	r1, r6
 8007160:	4640      	mov	r0, r8
 8007162:	f7fe fc69 	bl	8005a38 <_free_r>
 8007166:	e7e1      	b.n	800712c <_realloc_r+0x1e>
 8007168:	4635      	mov	r5, r6
 800716a:	e7df      	b.n	800712c <_realloc_r+0x1e>

0800716c <__sfputc_r>:
 800716c:	6893      	ldr	r3, [r2, #8]
 800716e:	b410      	push	{r4}
 8007170:	3b01      	subs	r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	6093      	str	r3, [r2, #8]
 8007176:	da07      	bge.n	8007188 <__sfputc_r+0x1c>
 8007178:	6994      	ldr	r4, [r2, #24]
 800717a:	42a3      	cmp	r3, r4
 800717c:	db01      	blt.n	8007182 <__sfputc_r+0x16>
 800717e:	290a      	cmp	r1, #10
 8007180:	d102      	bne.n	8007188 <__sfputc_r+0x1c>
 8007182:	bc10      	pop	{r4}
 8007184:	f000 b934 	b.w	80073f0 <__swbuf_r>
 8007188:	6813      	ldr	r3, [r2, #0]
 800718a:	1c58      	adds	r0, r3, #1
 800718c:	6010      	str	r0, [r2, #0]
 800718e:	7019      	strb	r1, [r3, #0]
 8007190:	4608      	mov	r0, r1
 8007192:	bc10      	pop	{r4}
 8007194:	4770      	bx	lr

08007196 <__sfputs_r>:
 8007196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007198:	4606      	mov	r6, r0
 800719a:	460f      	mov	r7, r1
 800719c:	4614      	mov	r4, r2
 800719e:	18d5      	adds	r5, r2, r3
 80071a0:	42ac      	cmp	r4, r5
 80071a2:	d101      	bne.n	80071a8 <__sfputs_r+0x12>
 80071a4:	2000      	movs	r0, #0
 80071a6:	e007      	b.n	80071b8 <__sfputs_r+0x22>
 80071a8:	463a      	mov	r2, r7
 80071aa:	4630      	mov	r0, r6
 80071ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b0:	f7ff ffdc 	bl	800716c <__sfputc_r>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d1f3      	bne.n	80071a0 <__sfputs_r+0xa>
 80071b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071bc <_vfiprintf_r>:
 80071bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c0:	460d      	mov	r5, r1
 80071c2:	4614      	mov	r4, r2
 80071c4:	4698      	mov	r8, r3
 80071c6:	4606      	mov	r6, r0
 80071c8:	b09d      	sub	sp, #116	; 0x74
 80071ca:	b118      	cbz	r0, 80071d4 <_vfiprintf_r+0x18>
 80071cc:	6a03      	ldr	r3, [r0, #32]
 80071ce:	b90b      	cbnz	r3, 80071d4 <_vfiprintf_r+0x18>
 80071d0:	f7fd fbfc 	bl	80049cc <__sinit>
 80071d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071d6:	07d9      	lsls	r1, r3, #31
 80071d8:	d405      	bmi.n	80071e6 <_vfiprintf_r+0x2a>
 80071da:	89ab      	ldrh	r3, [r5, #12]
 80071dc:	059a      	lsls	r2, r3, #22
 80071de:	d402      	bmi.n	80071e6 <_vfiprintf_r+0x2a>
 80071e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071e2:	f7fd fd78 	bl	8004cd6 <__retarget_lock_acquire_recursive>
 80071e6:	89ab      	ldrh	r3, [r5, #12]
 80071e8:	071b      	lsls	r3, r3, #28
 80071ea:	d501      	bpl.n	80071f0 <_vfiprintf_r+0x34>
 80071ec:	692b      	ldr	r3, [r5, #16]
 80071ee:	b99b      	cbnz	r3, 8007218 <_vfiprintf_r+0x5c>
 80071f0:	4629      	mov	r1, r5
 80071f2:	4630      	mov	r0, r6
 80071f4:	f000 f93a 	bl	800746c <__swsetup_r>
 80071f8:	b170      	cbz	r0, 8007218 <_vfiprintf_r+0x5c>
 80071fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071fc:	07dc      	lsls	r4, r3, #31
 80071fe:	d504      	bpl.n	800720a <_vfiprintf_r+0x4e>
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	b01d      	add	sp, #116	; 0x74
 8007206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	0598      	lsls	r0, r3, #22
 800720e:	d4f7      	bmi.n	8007200 <_vfiprintf_r+0x44>
 8007210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007212:	f7fd fd61 	bl	8004cd8 <__retarget_lock_release_recursive>
 8007216:	e7f3      	b.n	8007200 <_vfiprintf_r+0x44>
 8007218:	2300      	movs	r3, #0
 800721a:	9309      	str	r3, [sp, #36]	; 0x24
 800721c:	2320      	movs	r3, #32
 800721e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007222:	2330      	movs	r3, #48	; 0x30
 8007224:	f04f 0901 	mov.w	r9, #1
 8007228:	f8cd 800c 	str.w	r8, [sp, #12]
 800722c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80073dc <_vfiprintf_r+0x220>
 8007230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007234:	4623      	mov	r3, r4
 8007236:	469a      	mov	sl, r3
 8007238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800723c:	b10a      	cbz	r2, 8007242 <_vfiprintf_r+0x86>
 800723e:	2a25      	cmp	r2, #37	; 0x25
 8007240:	d1f9      	bne.n	8007236 <_vfiprintf_r+0x7a>
 8007242:	ebba 0b04 	subs.w	fp, sl, r4
 8007246:	d00b      	beq.n	8007260 <_vfiprintf_r+0xa4>
 8007248:	465b      	mov	r3, fp
 800724a:	4622      	mov	r2, r4
 800724c:	4629      	mov	r1, r5
 800724e:	4630      	mov	r0, r6
 8007250:	f7ff ffa1 	bl	8007196 <__sfputs_r>
 8007254:	3001      	adds	r0, #1
 8007256:	f000 80a9 	beq.w	80073ac <_vfiprintf_r+0x1f0>
 800725a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800725c:	445a      	add	r2, fp
 800725e:	9209      	str	r2, [sp, #36]	; 0x24
 8007260:	f89a 3000 	ldrb.w	r3, [sl]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 80a1 	beq.w	80073ac <_vfiprintf_r+0x1f0>
 800726a:	2300      	movs	r3, #0
 800726c:	f04f 32ff 	mov.w	r2, #4294967295
 8007270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007274:	f10a 0a01 	add.w	sl, sl, #1
 8007278:	9304      	str	r3, [sp, #16]
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007280:	931a      	str	r3, [sp, #104]	; 0x68
 8007282:	4654      	mov	r4, sl
 8007284:	2205      	movs	r2, #5
 8007286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800728a:	4854      	ldr	r0, [pc, #336]	; (80073dc <_vfiprintf_r+0x220>)
 800728c:	f7fd fd25 	bl	8004cda <memchr>
 8007290:	9a04      	ldr	r2, [sp, #16]
 8007292:	b9d8      	cbnz	r0, 80072cc <_vfiprintf_r+0x110>
 8007294:	06d1      	lsls	r1, r2, #27
 8007296:	bf44      	itt	mi
 8007298:	2320      	movmi	r3, #32
 800729a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800729e:	0713      	lsls	r3, r2, #28
 80072a0:	bf44      	itt	mi
 80072a2:	232b      	movmi	r3, #43	; 0x2b
 80072a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a8:	f89a 3000 	ldrb.w	r3, [sl]
 80072ac:	2b2a      	cmp	r3, #42	; 0x2a
 80072ae:	d015      	beq.n	80072dc <_vfiprintf_r+0x120>
 80072b0:	4654      	mov	r4, sl
 80072b2:	2000      	movs	r0, #0
 80072b4:	f04f 0c0a 	mov.w	ip, #10
 80072b8:	9a07      	ldr	r2, [sp, #28]
 80072ba:	4621      	mov	r1, r4
 80072bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072c0:	3b30      	subs	r3, #48	; 0x30
 80072c2:	2b09      	cmp	r3, #9
 80072c4:	d94d      	bls.n	8007362 <_vfiprintf_r+0x1a6>
 80072c6:	b1b0      	cbz	r0, 80072f6 <_vfiprintf_r+0x13a>
 80072c8:	9207      	str	r2, [sp, #28]
 80072ca:	e014      	b.n	80072f6 <_vfiprintf_r+0x13a>
 80072cc:	eba0 0308 	sub.w	r3, r0, r8
 80072d0:	fa09 f303 	lsl.w	r3, r9, r3
 80072d4:	4313      	orrs	r3, r2
 80072d6:	46a2      	mov	sl, r4
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	e7d2      	b.n	8007282 <_vfiprintf_r+0xc6>
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	1d19      	adds	r1, r3, #4
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	9103      	str	r1, [sp, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bfbb      	ittet	lt
 80072e8:	425b      	neglt	r3, r3
 80072ea:	f042 0202 	orrlt.w	r2, r2, #2
 80072ee:	9307      	strge	r3, [sp, #28]
 80072f0:	9307      	strlt	r3, [sp, #28]
 80072f2:	bfb8      	it	lt
 80072f4:	9204      	strlt	r2, [sp, #16]
 80072f6:	7823      	ldrb	r3, [r4, #0]
 80072f8:	2b2e      	cmp	r3, #46	; 0x2e
 80072fa:	d10c      	bne.n	8007316 <_vfiprintf_r+0x15a>
 80072fc:	7863      	ldrb	r3, [r4, #1]
 80072fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007300:	d134      	bne.n	800736c <_vfiprintf_r+0x1b0>
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	3402      	adds	r4, #2
 8007306:	1d1a      	adds	r2, r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	9203      	str	r2, [sp, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	bfb8      	it	lt
 8007310:	f04f 33ff 	movlt.w	r3, #4294967295
 8007314:	9305      	str	r3, [sp, #20]
 8007316:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073e0 <_vfiprintf_r+0x224>
 800731a:	2203      	movs	r2, #3
 800731c:	4650      	mov	r0, sl
 800731e:	7821      	ldrb	r1, [r4, #0]
 8007320:	f7fd fcdb 	bl	8004cda <memchr>
 8007324:	b138      	cbz	r0, 8007336 <_vfiprintf_r+0x17a>
 8007326:	2240      	movs	r2, #64	; 0x40
 8007328:	9b04      	ldr	r3, [sp, #16]
 800732a:	eba0 000a 	sub.w	r0, r0, sl
 800732e:	4082      	lsls	r2, r0
 8007330:	4313      	orrs	r3, r2
 8007332:	3401      	adds	r4, #1
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733a:	2206      	movs	r2, #6
 800733c:	4829      	ldr	r0, [pc, #164]	; (80073e4 <_vfiprintf_r+0x228>)
 800733e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007342:	f7fd fcca 	bl	8004cda <memchr>
 8007346:	2800      	cmp	r0, #0
 8007348:	d03f      	beq.n	80073ca <_vfiprintf_r+0x20e>
 800734a:	4b27      	ldr	r3, [pc, #156]	; (80073e8 <_vfiprintf_r+0x22c>)
 800734c:	bb1b      	cbnz	r3, 8007396 <_vfiprintf_r+0x1da>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	3307      	adds	r3, #7
 8007352:	f023 0307 	bic.w	r3, r3, #7
 8007356:	3308      	adds	r3, #8
 8007358:	9303      	str	r3, [sp, #12]
 800735a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735c:	443b      	add	r3, r7
 800735e:	9309      	str	r3, [sp, #36]	; 0x24
 8007360:	e768      	b.n	8007234 <_vfiprintf_r+0x78>
 8007362:	460c      	mov	r4, r1
 8007364:	2001      	movs	r0, #1
 8007366:	fb0c 3202 	mla	r2, ip, r2, r3
 800736a:	e7a6      	b.n	80072ba <_vfiprintf_r+0xfe>
 800736c:	2300      	movs	r3, #0
 800736e:	f04f 0c0a 	mov.w	ip, #10
 8007372:	4619      	mov	r1, r3
 8007374:	3401      	adds	r4, #1
 8007376:	9305      	str	r3, [sp, #20]
 8007378:	4620      	mov	r0, r4
 800737a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800737e:	3a30      	subs	r2, #48	; 0x30
 8007380:	2a09      	cmp	r2, #9
 8007382:	d903      	bls.n	800738c <_vfiprintf_r+0x1d0>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0c6      	beq.n	8007316 <_vfiprintf_r+0x15a>
 8007388:	9105      	str	r1, [sp, #20]
 800738a:	e7c4      	b.n	8007316 <_vfiprintf_r+0x15a>
 800738c:	4604      	mov	r4, r0
 800738e:	2301      	movs	r3, #1
 8007390:	fb0c 2101 	mla	r1, ip, r1, r2
 8007394:	e7f0      	b.n	8007378 <_vfiprintf_r+0x1bc>
 8007396:	ab03      	add	r3, sp, #12
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	462a      	mov	r2, r5
 800739c:	4630      	mov	r0, r6
 800739e:	4b13      	ldr	r3, [pc, #76]	; (80073ec <_vfiprintf_r+0x230>)
 80073a0:	a904      	add	r1, sp, #16
 80073a2:	f7fc fec5 	bl	8004130 <_printf_float>
 80073a6:	4607      	mov	r7, r0
 80073a8:	1c78      	adds	r0, r7, #1
 80073aa:	d1d6      	bne.n	800735a <_vfiprintf_r+0x19e>
 80073ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073ae:	07d9      	lsls	r1, r3, #31
 80073b0:	d405      	bmi.n	80073be <_vfiprintf_r+0x202>
 80073b2:	89ab      	ldrh	r3, [r5, #12]
 80073b4:	059a      	lsls	r2, r3, #22
 80073b6:	d402      	bmi.n	80073be <_vfiprintf_r+0x202>
 80073b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073ba:	f7fd fc8d 	bl	8004cd8 <__retarget_lock_release_recursive>
 80073be:	89ab      	ldrh	r3, [r5, #12]
 80073c0:	065b      	lsls	r3, r3, #25
 80073c2:	f53f af1d 	bmi.w	8007200 <_vfiprintf_r+0x44>
 80073c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073c8:	e71c      	b.n	8007204 <_vfiprintf_r+0x48>
 80073ca:	ab03      	add	r3, sp, #12
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	462a      	mov	r2, r5
 80073d0:	4630      	mov	r0, r6
 80073d2:	4b06      	ldr	r3, [pc, #24]	; (80073ec <_vfiprintf_r+0x230>)
 80073d4:	a904      	add	r1, sp, #16
 80073d6:	f7fd f94b 	bl	8004670 <_printf_i>
 80073da:	e7e4      	b.n	80073a6 <_vfiprintf_r+0x1ea>
 80073dc:	08007db4 	.word	0x08007db4
 80073e0:	08007dba 	.word	0x08007dba
 80073e4:	08007dbe 	.word	0x08007dbe
 80073e8:	08004131 	.word	0x08004131
 80073ec:	08007197 	.word	0x08007197

080073f0 <__swbuf_r>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	460e      	mov	r6, r1
 80073f4:	4614      	mov	r4, r2
 80073f6:	4605      	mov	r5, r0
 80073f8:	b118      	cbz	r0, 8007402 <__swbuf_r+0x12>
 80073fa:	6a03      	ldr	r3, [r0, #32]
 80073fc:	b90b      	cbnz	r3, 8007402 <__swbuf_r+0x12>
 80073fe:	f7fd fae5 	bl	80049cc <__sinit>
 8007402:	69a3      	ldr	r3, [r4, #24]
 8007404:	60a3      	str	r3, [r4, #8]
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	071a      	lsls	r2, r3, #28
 800740a:	d525      	bpl.n	8007458 <__swbuf_r+0x68>
 800740c:	6923      	ldr	r3, [r4, #16]
 800740e:	b31b      	cbz	r3, 8007458 <__swbuf_r+0x68>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	6922      	ldr	r2, [r4, #16]
 8007414:	b2f6      	uxtb	r6, r6
 8007416:	1a98      	subs	r0, r3, r2
 8007418:	6963      	ldr	r3, [r4, #20]
 800741a:	4637      	mov	r7, r6
 800741c:	4283      	cmp	r3, r0
 800741e:	dc04      	bgt.n	800742a <__swbuf_r+0x3a>
 8007420:	4621      	mov	r1, r4
 8007422:	4628      	mov	r0, r5
 8007424:	f7ff fdf4 	bl	8007010 <_fflush_r>
 8007428:	b9e0      	cbnz	r0, 8007464 <__swbuf_r+0x74>
 800742a:	68a3      	ldr	r3, [r4, #8]
 800742c:	3b01      	subs	r3, #1
 800742e:	60a3      	str	r3, [r4, #8]
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	6022      	str	r2, [r4, #0]
 8007436:	701e      	strb	r6, [r3, #0]
 8007438:	6962      	ldr	r2, [r4, #20]
 800743a:	1c43      	adds	r3, r0, #1
 800743c:	429a      	cmp	r2, r3
 800743e:	d004      	beq.n	800744a <__swbuf_r+0x5a>
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	07db      	lsls	r3, r3, #31
 8007444:	d506      	bpl.n	8007454 <__swbuf_r+0x64>
 8007446:	2e0a      	cmp	r6, #10
 8007448:	d104      	bne.n	8007454 <__swbuf_r+0x64>
 800744a:	4621      	mov	r1, r4
 800744c:	4628      	mov	r0, r5
 800744e:	f7ff fddf 	bl	8007010 <_fflush_r>
 8007452:	b938      	cbnz	r0, 8007464 <__swbuf_r+0x74>
 8007454:	4638      	mov	r0, r7
 8007456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007458:	4621      	mov	r1, r4
 800745a:	4628      	mov	r0, r5
 800745c:	f000 f806 	bl	800746c <__swsetup_r>
 8007460:	2800      	cmp	r0, #0
 8007462:	d0d5      	beq.n	8007410 <__swbuf_r+0x20>
 8007464:	f04f 37ff 	mov.w	r7, #4294967295
 8007468:	e7f4      	b.n	8007454 <__swbuf_r+0x64>
	...

0800746c <__swsetup_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4b2a      	ldr	r3, [pc, #168]	; (8007518 <__swsetup_r+0xac>)
 8007470:	4605      	mov	r5, r0
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	460c      	mov	r4, r1
 8007476:	b118      	cbz	r0, 8007480 <__swsetup_r+0x14>
 8007478:	6a03      	ldr	r3, [r0, #32]
 800747a:	b90b      	cbnz	r3, 8007480 <__swsetup_r+0x14>
 800747c:	f7fd faa6 	bl	80049cc <__sinit>
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007486:	0718      	lsls	r0, r3, #28
 8007488:	d422      	bmi.n	80074d0 <__swsetup_r+0x64>
 800748a:	06d9      	lsls	r1, r3, #27
 800748c:	d407      	bmi.n	800749e <__swsetup_r+0x32>
 800748e:	2309      	movs	r3, #9
 8007490:	602b      	str	r3, [r5, #0]
 8007492:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007496:	f04f 30ff 	mov.w	r0, #4294967295
 800749a:	81a3      	strh	r3, [r4, #12]
 800749c:	e034      	b.n	8007508 <__swsetup_r+0x9c>
 800749e:	0758      	lsls	r0, r3, #29
 80074a0:	d512      	bpl.n	80074c8 <__swsetup_r+0x5c>
 80074a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a4:	b141      	cbz	r1, 80074b8 <__swsetup_r+0x4c>
 80074a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074aa:	4299      	cmp	r1, r3
 80074ac:	d002      	beq.n	80074b4 <__swsetup_r+0x48>
 80074ae:	4628      	mov	r0, r5
 80074b0:	f7fe fac2 	bl	8005a38 <_free_r>
 80074b4:	2300      	movs	r3, #0
 80074b6:	6363      	str	r3, [r4, #52]	; 0x34
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	2300      	movs	r3, #0
 80074c2:	6063      	str	r3, [r4, #4]
 80074c4:	6923      	ldr	r3, [r4, #16]
 80074c6:	6023      	str	r3, [r4, #0]
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f043 0308 	orr.w	r3, r3, #8
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	b94b      	cbnz	r3, 80074e8 <__swsetup_r+0x7c>
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074de:	d003      	beq.n	80074e8 <__swsetup_r+0x7c>
 80074e0:	4621      	mov	r1, r4
 80074e2:	4628      	mov	r0, r5
 80074e4:	f000 f88b 	bl	80075fe <__smakebuf_r>
 80074e8:	89a0      	ldrh	r0, [r4, #12]
 80074ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074ee:	f010 0301 	ands.w	r3, r0, #1
 80074f2:	d00a      	beq.n	800750a <__swsetup_r+0x9e>
 80074f4:	2300      	movs	r3, #0
 80074f6:	60a3      	str	r3, [r4, #8]
 80074f8:	6963      	ldr	r3, [r4, #20]
 80074fa:	425b      	negs	r3, r3
 80074fc:	61a3      	str	r3, [r4, #24]
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	b943      	cbnz	r3, 8007514 <__swsetup_r+0xa8>
 8007502:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007506:	d1c4      	bne.n	8007492 <__swsetup_r+0x26>
 8007508:	bd38      	pop	{r3, r4, r5, pc}
 800750a:	0781      	lsls	r1, r0, #30
 800750c:	bf58      	it	pl
 800750e:	6963      	ldrpl	r3, [r4, #20]
 8007510:	60a3      	str	r3, [r4, #8]
 8007512:	e7f4      	b.n	80074fe <__swsetup_r+0x92>
 8007514:	2000      	movs	r0, #0
 8007516:	e7f7      	b.n	8007508 <__swsetup_r+0x9c>
 8007518:	200001d0 	.word	0x200001d0

0800751c <_raise_r>:
 800751c:	291f      	cmp	r1, #31
 800751e:	b538      	push	{r3, r4, r5, lr}
 8007520:	4604      	mov	r4, r0
 8007522:	460d      	mov	r5, r1
 8007524:	d904      	bls.n	8007530 <_raise_r+0x14>
 8007526:	2316      	movs	r3, #22
 8007528:	6003      	str	r3, [r0, #0]
 800752a:	f04f 30ff 	mov.w	r0, #4294967295
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007532:	b112      	cbz	r2, 800753a <_raise_r+0x1e>
 8007534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007538:	b94b      	cbnz	r3, 800754e <_raise_r+0x32>
 800753a:	4620      	mov	r0, r4
 800753c:	f000 f830 	bl	80075a0 <_getpid_r>
 8007540:	462a      	mov	r2, r5
 8007542:	4601      	mov	r1, r0
 8007544:	4620      	mov	r0, r4
 8007546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800754a:	f000 b817 	b.w	800757c <_kill_r>
 800754e:	2b01      	cmp	r3, #1
 8007550:	d00a      	beq.n	8007568 <_raise_r+0x4c>
 8007552:	1c59      	adds	r1, r3, #1
 8007554:	d103      	bne.n	800755e <_raise_r+0x42>
 8007556:	2316      	movs	r3, #22
 8007558:	6003      	str	r3, [r0, #0]
 800755a:	2001      	movs	r0, #1
 800755c:	e7e7      	b.n	800752e <_raise_r+0x12>
 800755e:	2400      	movs	r4, #0
 8007560:	4628      	mov	r0, r5
 8007562:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007566:	4798      	blx	r3
 8007568:	2000      	movs	r0, #0
 800756a:	e7e0      	b.n	800752e <_raise_r+0x12>

0800756c <raise>:
 800756c:	4b02      	ldr	r3, [pc, #8]	; (8007578 <raise+0xc>)
 800756e:	4601      	mov	r1, r0
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	f7ff bfd3 	b.w	800751c <_raise_r>
 8007576:	bf00      	nop
 8007578:	200001d0 	.word	0x200001d0

0800757c <_kill_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	2300      	movs	r3, #0
 8007580:	4d06      	ldr	r5, [pc, #24]	; (800759c <_kill_r+0x20>)
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	4611      	mov	r1, r2
 8007588:	602b      	str	r3, [r5, #0]
 800758a:	f7f9 ff5a 	bl	8001442 <_kill>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	d102      	bne.n	8007598 <_kill_r+0x1c>
 8007592:	682b      	ldr	r3, [r5, #0]
 8007594:	b103      	cbz	r3, 8007598 <_kill_r+0x1c>
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	bd38      	pop	{r3, r4, r5, pc}
 800759a:	bf00      	nop
 800759c:	200003fc 	.word	0x200003fc

080075a0 <_getpid_r>:
 80075a0:	f7f9 bf48 	b.w	8001434 <_getpid>

080075a4 <_malloc_usable_size_r>:
 80075a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a8:	1f18      	subs	r0, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bfbc      	itt	lt
 80075ae:	580b      	ldrlt	r3, [r1, r0]
 80075b0:	18c0      	addlt	r0, r0, r3
 80075b2:	4770      	bx	lr

080075b4 <__swhatbuf_r>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	460c      	mov	r4, r1
 80075b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075bc:	4615      	mov	r5, r2
 80075be:	2900      	cmp	r1, #0
 80075c0:	461e      	mov	r6, r3
 80075c2:	b096      	sub	sp, #88	; 0x58
 80075c4:	da0c      	bge.n	80075e0 <__swhatbuf_r+0x2c>
 80075c6:	89a3      	ldrh	r3, [r4, #12]
 80075c8:	2100      	movs	r1, #0
 80075ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075ce:	bf0c      	ite	eq
 80075d0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80075d4:	2340      	movne	r3, #64	; 0x40
 80075d6:	2000      	movs	r0, #0
 80075d8:	6031      	str	r1, [r6, #0]
 80075da:	602b      	str	r3, [r5, #0]
 80075dc:	b016      	add	sp, #88	; 0x58
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	466a      	mov	r2, sp
 80075e2:	f000 f849 	bl	8007678 <_fstat_r>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	dbed      	blt.n	80075c6 <__swhatbuf_r+0x12>
 80075ea:	9901      	ldr	r1, [sp, #4]
 80075ec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075f0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075f4:	4259      	negs	r1, r3
 80075f6:	4159      	adcs	r1, r3
 80075f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075fc:	e7eb      	b.n	80075d6 <__swhatbuf_r+0x22>

080075fe <__smakebuf_r>:
 80075fe:	898b      	ldrh	r3, [r1, #12]
 8007600:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007602:	079d      	lsls	r5, r3, #30
 8007604:	4606      	mov	r6, r0
 8007606:	460c      	mov	r4, r1
 8007608:	d507      	bpl.n	800761a <__smakebuf_r+0x1c>
 800760a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800760e:	6023      	str	r3, [r4, #0]
 8007610:	6123      	str	r3, [r4, #16]
 8007612:	2301      	movs	r3, #1
 8007614:	6163      	str	r3, [r4, #20]
 8007616:	b002      	add	sp, #8
 8007618:	bd70      	pop	{r4, r5, r6, pc}
 800761a:	466a      	mov	r2, sp
 800761c:	ab01      	add	r3, sp, #4
 800761e:	f7ff ffc9 	bl	80075b4 <__swhatbuf_r>
 8007622:	9900      	ldr	r1, [sp, #0]
 8007624:	4605      	mov	r5, r0
 8007626:	4630      	mov	r0, r6
 8007628:	f7fe fdd0 	bl	80061cc <_malloc_r>
 800762c:	b948      	cbnz	r0, 8007642 <__smakebuf_r+0x44>
 800762e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007632:	059a      	lsls	r2, r3, #22
 8007634:	d4ef      	bmi.n	8007616 <__smakebuf_r+0x18>
 8007636:	f023 0303 	bic.w	r3, r3, #3
 800763a:	f043 0302 	orr.w	r3, r3, #2
 800763e:	81a3      	strh	r3, [r4, #12]
 8007640:	e7e3      	b.n	800760a <__smakebuf_r+0xc>
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	6020      	str	r0, [r4, #0]
 8007646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800764a:	81a3      	strh	r3, [r4, #12]
 800764c:	9b00      	ldr	r3, [sp, #0]
 800764e:	6120      	str	r0, [r4, #16]
 8007650:	6163      	str	r3, [r4, #20]
 8007652:	9b01      	ldr	r3, [sp, #4]
 8007654:	b15b      	cbz	r3, 800766e <__smakebuf_r+0x70>
 8007656:	4630      	mov	r0, r6
 8007658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800765c:	f000 f81e 	bl	800769c <_isatty_r>
 8007660:	b128      	cbz	r0, 800766e <__smakebuf_r+0x70>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f023 0303 	bic.w	r3, r3, #3
 8007668:	f043 0301 	orr.w	r3, r3, #1
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	431d      	orrs	r5, r3
 8007672:	81a5      	strh	r5, [r4, #12]
 8007674:	e7cf      	b.n	8007616 <__smakebuf_r+0x18>
	...

08007678 <_fstat_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	2300      	movs	r3, #0
 800767c:	4d06      	ldr	r5, [pc, #24]	; (8007698 <_fstat_r+0x20>)
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	4611      	mov	r1, r2
 8007684:	602b      	str	r3, [r5, #0]
 8007686:	f7f9 ff3a 	bl	80014fe <_fstat>
 800768a:	1c43      	adds	r3, r0, #1
 800768c:	d102      	bne.n	8007694 <_fstat_r+0x1c>
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	b103      	cbz	r3, 8007694 <_fstat_r+0x1c>
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	bd38      	pop	{r3, r4, r5, pc}
 8007696:	bf00      	nop
 8007698:	200003fc 	.word	0x200003fc

0800769c <_isatty_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	2300      	movs	r3, #0
 80076a0:	4d05      	ldr	r5, [pc, #20]	; (80076b8 <_isatty_r+0x1c>)
 80076a2:	4604      	mov	r4, r0
 80076a4:	4608      	mov	r0, r1
 80076a6:	602b      	str	r3, [r5, #0]
 80076a8:	f7f9 ff38 	bl	800151c <_isatty>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_isatty_r+0x1a>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_isatty_r+0x1a>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	200003fc 	.word	0x200003fc

080076bc <_init>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	bf00      	nop
 80076c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c2:	bc08      	pop	{r3}
 80076c4:	469e      	mov	lr, r3
 80076c6:	4770      	bx	lr

080076c8 <_fini>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	bf00      	nop
 80076cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ce:	bc08      	pop	{r3}
 80076d0:	469e      	mov	lr, r3
 80076d2:	4770      	bx	lr
